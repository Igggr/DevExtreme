declare global {
  interface JQuery<TElement = HTMLElement> {}
  interface JQuery<TElement = HTMLElement> {
    dxAccordion(): JQuery;
    dxAccordion(options: 'instance'): DevExpress.ui.dxAccordion;
    dxAccordion(options: DevExpress.ui.dxAccordion.Properties): JQuery;
    dxAccordion(options: string): any;
    dxAccordion(options: string, ...params: any[]): any;

    dxActionSheet(): JQuery;
    dxActionSheet(options: 'instance'): DevExpress.ui.dxActionSheet;
    dxActionSheet(options: DevExpress.ui.dxActionSheet.Properties): JQuery;
    dxActionSheet(options: string): any;
    dxActionSheet(options: string, ...params: any[]): any;

    dxAutocomplete(): JQuery;
    dxAutocomplete(options: 'instance'): DevExpress.ui.dxAutocomplete;
    dxAutocomplete(options: DevExpress.ui.dxAutocomplete.Properties): JQuery;
    dxAutocomplete(options: string): any;
    dxAutocomplete(options: string, ...params: any[]): any;

    dxBarGauge(): JQuery;
    dxBarGauge(options: 'instance'): DevExpress.viz.dxBarGauge;
    dxBarGauge(options: DevExpress.viz.dxBarGauge.Properties): JQuery;
    dxBarGauge(options: string): any;
    dxBarGauge(options: string, ...params: any[]): any;

    dxBox(): JQuery;
    dxBox(options: 'instance'): DevExpress.ui.dxBox;
    dxBox(options: DevExpress.ui.dxBox.Properties): JQuery;
    dxBox(options: string): any;
    dxBox(options: string, ...params: any[]): any;

    dxBullet(): JQuery;
    dxBullet(options: 'instance'): DevExpress.viz.dxBullet;
    dxBullet(options: DevExpress.viz.dxBullet.Properties): JQuery;
    dxBullet(options: string): any;
    dxBullet(options: string, ...params: any[]): any;

    dxButton(): JQuery;
    dxButton(options: 'instance'): DevExpress.ui.dxButton;
    dxButton(options: DevExpress.ui.dxButton.Properties): JQuery;
    dxButton(options: string): any;
    dxButton(options: string, ...params: any[]): any;

    dxButtonGroup(): JQuery;
    dxButtonGroup(options: 'instance'): DevExpress.ui.dxButtonGroup;
    dxButtonGroup(options: DevExpress.ui.dxButtonGroup.Properties): JQuery;
    dxButtonGroup(options: string): any;
    dxButtonGroup(options: string, ...params: any[]): any;

    dxCalendar(): JQuery;
    dxCalendar(options: 'instance'): DevExpress.ui.dxCalendar;
    dxCalendar(options: DevExpress.ui.dxCalendar.Properties): JQuery;
    dxCalendar(options: string): any;
    dxCalendar(options: string, ...params: any[]): any;

    dxChart(): JQuery;
    dxChart(options: 'instance'): DevExpress.viz.dxChart;
    dxChart(options: DevExpress.viz.dxChart.Properties): JQuery;
    dxChart(options: string): any;
    dxChart(options: string, ...params: any[]): any;

    dxCheckBox(): JQuery;
    dxCheckBox(options: 'instance'): DevExpress.ui.dxCheckBox;
    dxCheckBox(options: DevExpress.ui.dxCheckBox.Properties): JQuery;
    dxCheckBox(options: string): any;
    dxCheckBox(options: string, ...params: any[]): any;

    dxCircularGauge(): JQuery;
    dxCircularGauge(options: 'instance'): DevExpress.viz.dxCircularGauge;
    dxCircularGauge(options: DevExpress.viz.dxCircularGauge.Properties): JQuery;
    dxCircularGauge(options: string): any;
    dxCircularGauge(options: string, ...params: any[]): any;

    dxColorBox(): JQuery;
    dxColorBox(options: 'instance'): DevExpress.ui.dxColorBox;
    dxColorBox(options: DevExpress.ui.dxColorBox.Properties): JQuery;
    dxColorBox(options: string): any;
    dxColorBox(options: string, ...params: any[]): any;

    dxContextMenu(): JQuery;
    dxContextMenu(options: 'instance'): DevExpress.ui.dxContextMenu;
    dxContextMenu(options: DevExpress.ui.dxContextMenu.Properties): JQuery;
    dxContextMenu(options: string): any;
    dxContextMenu(options: string, ...params: any[]): any;

    dxDataGrid(): JQuery;
    dxDataGrid(options: 'instance'): DevExpress.ui.dxDataGrid;
    dxDataGrid(options: DevExpress.ui.dxDataGrid.Properties): JQuery;
    dxDataGrid(options: string): any;
    dxDataGrid(options: string, ...params: any[]): any;

    dxDateBox(): JQuery;
    dxDateBox(options: 'instance'): DevExpress.ui.dxDateBox;
    dxDateBox(options: DevExpress.ui.dxDateBox.Properties): JQuery;
    dxDateBox(options: string): any;
    dxDateBox(options: string, ...params: any[]): any;

    dxDeferRendering(): JQuery;
    dxDeferRendering(options: 'instance'): DevExpress.ui.dxDeferRendering;
    dxDeferRendering(
      options: DevExpress.ui.dxDeferRendering.Properties
    ): JQuery;
    dxDeferRendering(options: string): any;
    dxDeferRendering(options: string, ...params: any[]): any;

    dxDiagram(): JQuery;
    dxDiagram(options: 'instance'): DevExpress.ui.dxDiagram;
    dxDiagram(options: DevExpress.ui.dxDiagram.Properties): JQuery;
    dxDiagram(options: string): any;
    dxDiagram(options: string, ...params: any[]): any;

    dxDraggable(): JQuery;
    dxDraggable(options: 'instance'): DevExpress.ui.dxDraggable;
    dxDraggable(options: DevExpress.ui.dxDraggable.Properties): JQuery;
    dxDraggable(options: string): any;
    dxDraggable(options: string, ...params: any[]): any;

    dxDrawer(): JQuery;
    dxDrawer(options: 'instance'): DevExpress.ui.dxDrawer;
    dxDrawer(options: DevExpress.ui.dxDrawer.Properties): JQuery;
    dxDrawer(options: string): any;
    dxDrawer(options: string, ...params: any[]): any;

    dxDropDownBox(): JQuery;
    dxDropDownBox(options: 'instance'): DevExpress.ui.dxDropDownBox;
    dxDropDownBox(options: DevExpress.ui.dxDropDownBox.Properties): JQuery;
    dxDropDownBox(options: string): any;
    dxDropDownBox(options: string, ...params: any[]): any;

    dxDropDownButton(): JQuery;
    dxDropDownButton(options: 'instance'): DevExpress.ui.dxDropDownButton;
    dxDropDownButton(
      options: DevExpress.ui.dxDropDownButton.Properties
    ): JQuery;
    dxDropDownButton(options: string): any;
    dxDropDownButton(options: string, ...params: any[]): any;

    dxFileManager(): JQuery;
    dxFileManager(options: 'instance'): DevExpress.ui.dxFileManager;
    dxFileManager(options: DevExpress.ui.dxFileManager.Properties): JQuery;
    dxFileManager(options: string): any;
    dxFileManager(options: string, ...params: any[]): any;

    dxFileUploader(): JQuery;
    dxFileUploader(options: 'instance'): DevExpress.ui.dxFileUploader;
    dxFileUploader(options: DevExpress.ui.dxFileUploader.Properties): JQuery;
    dxFileUploader(options: string): any;
    dxFileUploader(options: string, ...params: any[]): any;

    dxFilterBuilder(): JQuery;
    dxFilterBuilder(options: 'instance'): DevExpress.ui.dxFilterBuilder;
    dxFilterBuilder(options: DevExpress.ui.dxFilterBuilder.Properties): JQuery;
    dxFilterBuilder(options: string): any;
    dxFilterBuilder(options: string, ...params: any[]): any;

    dxForm(): JQuery;
    dxForm(options: 'instance'): DevExpress.ui.dxForm;
    dxForm(options: DevExpress.ui.dxForm.Properties): JQuery;
    dxForm(options: string): any;
    dxForm(options: string, ...params: any[]): any;

    dxFunnel(): JQuery;
    dxFunnel(options: 'instance'): DevExpress.viz.dxFunnel;
    dxFunnel(options: DevExpress.viz.dxFunnel.Properties): JQuery;
    dxFunnel(options: string): any;
    dxFunnel(options: string, ...params: any[]): any;

    dxGallery(): JQuery;
    dxGallery(options: 'instance'): DevExpress.ui.dxGallery;
    dxGallery(options: DevExpress.ui.dxGallery.Properties): JQuery;
    dxGallery(options: string): any;
    dxGallery(options: string, ...params: any[]): any;

    dxGantt(): JQuery;
    dxGantt(options: 'instance'): DevExpress.ui.dxGantt;
    dxGantt(options: DevExpress.ui.dxGantt.Properties): JQuery;
    dxGantt(options: string): any;
    dxGantt(options: string, ...params: any[]): any;

    dxHtmlEditor(): JQuery;
    dxHtmlEditor(options: 'instance'): DevExpress.ui.dxHtmlEditor;
    dxHtmlEditor(options: DevExpress.ui.dxHtmlEditor.Properties): JQuery;
    dxHtmlEditor(options: string): any;
    dxHtmlEditor(options: string, ...params: any[]): any;

    dxLinearGauge(): JQuery;
    dxLinearGauge(options: 'instance'): DevExpress.viz.dxLinearGauge;
    dxLinearGauge(options: DevExpress.viz.dxLinearGauge.Properties): JQuery;
    dxLinearGauge(options: string): any;
    dxLinearGauge(options: string, ...params: any[]): any;

    dxList(): JQuery;
    dxList(options: 'instance'): DevExpress.ui.dxList;
    dxList(options: DevExpress.ui.dxList.Properties): JQuery;
    dxList(options: string): any;
    dxList(options: string, ...params: any[]): any;

    dxLoadIndicator(): JQuery;
    dxLoadIndicator(options: 'instance'): DevExpress.ui.dxLoadIndicator;
    dxLoadIndicator(options: DevExpress.ui.dxLoadIndicator.Properties): JQuery;
    dxLoadIndicator(options: string): any;
    dxLoadIndicator(options: string, ...params: any[]): any;

    dxLoadPanel(): JQuery;
    dxLoadPanel(options: 'instance'): DevExpress.ui.dxLoadPanel;
    dxLoadPanel(options: DevExpress.ui.dxLoadPanel.Properties): JQuery;
    dxLoadPanel(options: string): any;
    dxLoadPanel(options: string, ...params: any[]): any;

    dxLookup(): JQuery;
    dxLookup(options: 'instance'): DevExpress.ui.dxLookup;
    dxLookup(options: DevExpress.ui.dxLookup.Properties): JQuery;
    dxLookup(options: string): any;
    dxLookup(options: string, ...params: any[]): any;

    dxMap(): JQuery;
    dxMap(options: 'instance'): DevExpress.ui.dxMap;
    dxMap(options: DevExpress.ui.dxMap.Properties): JQuery;
    dxMap(options: string): any;
    dxMap(options: string, ...params: any[]): any;

    dxMenu(): JQuery;
    dxMenu(options: 'instance'): DevExpress.ui.dxMenu;
    dxMenu(options: DevExpress.ui.dxMenu.Properties): JQuery;
    dxMenu(options: string): any;
    dxMenu(options: string, ...params: any[]): any;

    dxMultiView(): JQuery;
    dxMultiView(options: 'instance'): DevExpress.ui.dxMultiView;
    dxMultiView(options: DevExpress.ui.dxMultiView.Properties): JQuery;
    dxMultiView(options: string): any;
    dxMultiView(options: string, ...params: any[]): any;

    dxNavBar(): JQuery;
    dxNavBar(options: 'instance'): DevExpress.ui.dxNavBar;
    dxNavBar(options: DevExpress.ui.dxNavBar.Properties): JQuery;
    dxNavBar(options: string): any;
    dxNavBar(options: string, ...params: any[]): any;

    dxNumberBox(): JQuery;
    dxNumberBox(options: 'instance'): DevExpress.ui.dxNumberBox;
    dxNumberBox(options: DevExpress.ui.dxNumberBox.Properties): JQuery;
    dxNumberBox(options: string): any;
    dxNumberBox(options: string, ...params: any[]): any;

    dxPieChart(): JQuery;
    dxPieChart(options: 'instance'): DevExpress.viz.dxPieChart;
    dxPieChart(options: DevExpress.viz.dxPieChart.Properties): JQuery;
    dxPieChart(options: string): any;
    dxPieChart(options: string, ...params: any[]): any;

    dxPivotGrid(): JQuery;
    dxPivotGrid(options: 'instance'): DevExpress.ui.dxPivotGrid;
    dxPivotGrid(options: DevExpress.ui.dxPivotGrid.Properties): JQuery;
    dxPivotGrid(options: string): any;
    dxPivotGrid(options: string, ...params: any[]): any;

    dxPivotGridFieldChooser(): JQuery;
    dxPivotGridFieldChooser(
      options: 'instance'
    ): DevExpress.ui.dxPivotGridFieldChooser;
    dxPivotGridFieldChooser(
      options: DevExpress.ui.dxPivotGridFieldChooser.Properties
    ): JQuery;
    dxPivotGridFieldChooser(options: string): any;
    dxPivotGridFieldChooser(options: string, ...params: any[]): any;

    dxPolarChart(): JQuery;
    dxPolarChart(options: 'instance'): DevExpress.viz.dxPolarChart;
    dxPolarChart(options: DevExpress.viz.dxPolarChart.Properties): JQuery;
    dxPolarChart(options: string): any;
    dxPolarChart(options: string, ...params: any[]): any;

    dxPopover(): JQuery;
    dxPopover(options: 'instance'): DevExpress.ui.dxPopover;
    dxPopover(options: DevExpress.ui.dxPopover.Properties): JQuery;
    dxPopover(options: string): any;
    dxPopover(options: string, ...params: any[]): any;

    dxPopup(): JQuery;
    dxPopup(options: 'instance'): DevExpress.ui.dxPopup;
    dxPopup(options: DevExpress.ui.dxPopup.Properties): JQuery;
    dxPopup(options: string): any;
    dxPopup(options: string, ...params: any[]): any;

    dxProgressBar(): JQuery;
    dxProgressBar(options: 'instance'): DevExpress.ui.dxProgressBar;
    dxProgressBar(options: DevExpress.ui.dxProgressBar.Properties): JQuery;
    dxProgressBar(options: string): any;
    dxProgressBar(options: string, ...params: any[]): any;

    dxRadioGroup(): JQuery;
    dxRadioGroup(options: 'instance'): DevExpress.ui.dxRadioGroup;
    dxRadioGroup(options: DevExpress.ui.dxRadioGroup.Properties): JQuery;
    dxRadioGroup(options: string): any;
    dxRadioGroup(options: string, ...params: any[]): any;

    dxRangeSelector(): JQuery;
    dxRangeSelector(options: 'instance'): DevExpress.viz.dxRangeSelector;
    dxRangeSelector(options: DevExpress.viz.dxRangeSelector.Properties): JQuery;
    dxRangeSelector(options: string): any;
    dxRangeSelector(options: string, ...params: any[]): any;

    dxRangeSlider(): JQuery;
    dxRangeSlider(options: 'instance'): DevExpress.ui.dxRangeSlider;
    dxRangeSlider(options: DevExpress.ui.dxRangeSlider.Properties): JQuery;
    dxRangeSlider(options: string): any;
    dxRangeSlider(options: string, ...params: any[]): any;

    dxRecurrenceEditor(): JQuery;
    dxRecurrenceEditor(options: 'instance'): DevExpress.ui.dxRecurrenceEditor;
    dxRecurrenceEditor(
      options: DevExpress.ui.dxRecurrenceEditor.Properties
    ): JQuery;
    dxRecurrenceEditor(options: string): any;
    dxRecurrenceEditor(options: string, ...params: any[]): any;

    dxResizable(): JQuery;
    dxResizable(options: 'instance'): DevExpress.ui.dxResizable;
    dxResizable(options: DevExpress.ui.dxResizable.Properties): JQuery;
    dxResizable(options: string): any;
    dxResizable(options: string, ...params: any[]): any;

    dxResponsiveBox(): JQuery;
    dxResponsiveBox(options: 'instance'): DevExpress.ui.dxResponsiveBox;
    dxResponsiveBox(options: DevExpress.ui.dxResponsiveBox.Properties): JQuery;
    dxResponsiveBox(options: string): any;
    dxResponsiveBox(options: string, ...params: any[]): any;

    dxSankey(): JQuery;
    dxSankey(options: 'instance'): DevExpress.viz.dxSankey;
    dxSankey(options: DevExpress.viz.dxSankey.Properties): JQuery;
    dxSankey(options: string): any;
    dxSankey(options: string, ...params: any[]): any;

    dxScheduler(): JQuery;
    dxScheduler(options: 'instance'): DevExpress.ui.dxScheduler;
    dxScheduler(options: DevExpress.ui.dxScheduler.Properties): JQuery;
    dxScheduler(options: string): any;
    dxScheduler(options: string, ...params: any[]): any;

    dxScrollView(): JQuery;
    dxScrollView(options: 'instance'): DevExpress.ui.dxScrollView;
    dxScrollView(options: DevExpress.ui.dxScrollView.Properties): JQuery;
    dxScrollView(options: string): any;
    dxScrollView(options: string, ...params: any[]): any;

    dxSelectBox(): JQuery;
    dxSelectBox(options: 'instance'): DevExpress.ui.dxSelectBox;
    dxSelectBox(options: DevExpress.ui.dxSelectBox.Properties): JQuery;
    dxSelectBox(options: string): any;
    dxSelectBox(options: string, ...params: any[]): any;

    dxSlideOut(): JQuery;
    dxSlideOut(options: 'instance'): DevExpress.ui.dxSlideOut;
    dxSlideOut(options: DevExpress.ui.dxSlideOut.Properties): JQuery;
    dxSlideOut(options: string): any;
    dxSlideOut(options: string, ...params: any[]): any;

    dxSlideOutView(): JQuery;
    dxSlideOutView(options: 'instance'): DevExpress.ui.dxSlideOutView;
    dxSlideOutView(options: DevExpress.ui.dxSlideOutView.Properties): JQuery;
    dxSlideOutView(options: string): any;
    dxSlideOutView(options: string, ...params: any[]): any;

    dxSlider(): JQuery;
    dxSlider(options: 'instance'): DevExpress.ui.dxSlider;
    dxSlider(options: DevExpress.ui.dxSlider.Properties): JQuery;
    dxSlider(options: string): any;
    dxSlider(options: string, ...params: any[]): any;

    dxSortable(): JQuery;
    dxSortable(options: 'instance'): DevExpress.ui.dxSortable;
    dxSortable(options: DevExpress.ui.dxSortable.Properties): JQuery;
    dxSortable(options: string): any;
    dxSortable(options: string, ...params: any[]): any;

    dxSparkline(): JQuery;
    dxSparkline(options: 'instance'): DevExpress.viz.dxSparkline;
    dxSparkline(options: DevExpress.viz.dxSparkline.Properties): JQuery;
    dxSparkline(options: string): any;
    dxSparkline(options: string, ...params: any[]): any;

    dxSpeedDialAction(): JQuery;
    dxSpeedDialAction(options: 'instance'): DevExpress.ui.dxSpeedDialAction;
    dxSpeedDialAction(
      options: DevExpress.ui.dxSpeedDialAction.Properties
    ): JQuery;
    dxSpeedDialAction(options: string): any;
    dxSpeedDialAction(options: string, ...params: any[]): any;

    dxSwitch(): JQuery;
    dxSwitch(options: 'instance'): DevExpress.ui.dxSwitch;
    dxSwitch(options: DevExpress.ui.dxSwitch.Properties): JQuery;
    dxSwitch(options: string): any;
    dxSwitch(options: string, ...params: any[]): any;

    dxTabPanel(): JQuery;
    dxTabPanel(options: 'instance'): DevExpress.ui.dxTabPanel;
    dxTabPanel(options: DevExpress.ui.dxTabPanel.Properties): JQuery;
    dxTabPanel(options: string): any;
    dxTabPanel(options: string, ...params: any[]): any;

    dxTabs(): JQuery;
    dxTabs(options: 'instance'): DevExpress.ui.dxTabs;
    dxTabs(options: DevExpress.ui.dxTabs.Properties): JQuery;
    dxTabs(options: string): any;
    dxTabs(options: string, ...params: any[]): any;

    dxTagBox(): JQuery;
    dxTagBox(options: 'instance'): DevExpress.ui.dxTagBox;
    dxTagBox(options: DevExpress.ui.dxTagBox.Properties): JQuery;
    dxTagBox(options: string): any;
    dxTagBox(options: string, ...params: any[]): any;

    dxTextArea(): JQuery;
    dxTextArea(options: 'instance'): DevExpress.ui.dxTextArea;
    dxTextArea(options: DevExpress.ui.dxTextArea.Properties): JQuery;
    dxTextArea(options: string): any;
    dxTextArea(options: string, ...params: any[]): any;

    dxTextBox(): JQuery;
    dxTextBox(options: 'instance'): DevExpress.ui.dxTextBox;
    dxTextBox(options: DevExpress.ui.dxTextBox.Properties): JQuery;
    dxTextBox(options: string): any;
    dxTextBox(options: string, ...params: any[]): any;

    dxTileView(): JQuery;
    dxTileView(options: 'instance'): DevExpress.ui.dxTileView;
    dxTileView(options: DevExpress.ui.dxTileView.Properties): JQuery;
    dxTileView(options: string): any;
    dxTileView(options: string, ...params: any[]): any;

    dxToast(): JQuery;
    dxToast(options: 'instance'): DevExpress.ui.dxToast;
    dxToast(options: DevExpress.ui.dxToast.Properties): JQuery;
    dxToast(options: string): any;
    dxToast(options: string, ...params: any[]): any;

    dxToolbar(): JQuery;
    dxToolbar(options: 'instance'): DevExpress.ui.dxToolbar;
    dxToolbar(options: DevExpress.ui.dxToolbar.Properties): JQuery;
    dxToolbar(options: string): any;
    dxToolbar(options: string, ...params: any[]): any;

    dxTooltip(): JQuery;
    dxTooltip(options: 'instance'): DevExpress.ui.dxTooltip;
    dxTooltip(options: DevExpress.ui.dxTooltip.Properties): JQuery;
    dxTooltip(options: string): any;
    dxTooltip(options: string, ...params: any[]): any;

    dxTreeList(): JQuery;
    dxTreeList(options: 'instance'): DevExpress.ui.dxTreeList;
    dxTreeList(options: DevExpress.ui.dxTreeList.Properties): JQuery;
    dxTreeList(options: string): any;
    dxTreeList(options: string, ...params: any[]): any;

    dxTreeMap(): JQuery;
    dxTreeMap(options: 'instance'): DevExpress.viz.dxTreeMap;
    dxTreeMap(options: DevExpress.viz.dxTreeMap.Properties): JQuery;
    dxTreeMap(options: string): any;
    dxTreeMap(options: string, ...params: any[]): any;

    dxTreeView(): JQuery;
    dxTreeView(options: 'instance'): DevExpress.ui.dxTreeView;
    dxTreeView(options: DevExpress.ui.dxTreeView.Properties): JQuery;
    dxTreeView(options: string): any;
    dxTreeView(options: string, ...params: any[]): any;

    dxValidationGroup(): JQuery;
    dxValidationGroup(options: 'instance'): DevExpress.ui.dxValidationGroup;
    dxValidationGroup(
      options: DevExpress.ui.dxValidationGroup.Properties
    ): JQuery;
    dxValidationGroup(options: string): any;
    dxValidationGroup(options: string, ...params: any[]): any;

    dxValidationMessage(): JQuery;
    dxValidationMessage(options: 'instance'): DevExpress.ui.dxValidationMessage;
    dxValidationMessage(
      options: DevExpress.ui.dxValidationMessage.Properties
    ): JQuery;
    dxValidationMessage(options: string): any;
    dxValidationMessage(options: string, ...params: any[]): any;

    dxValidationSummary(): JQuery;
    dxValidationSummary(options: 'instance'): DevExpress.ui.dxValidationSummary;
    dxValidationSummary(
      options: DevExpress.ui.dxValidationSummary.Properties
    ): JQuery;
    dxValidationSummary(options: string): any;
    dxValidationSummary(options: string, ...params: any[]): any;

    dxValidator(): JQuery;
    dxValidator(options: 'instance'): DevExpress.ui.dxValidator;
    dxValidator(options: DevExpress.ui.dxValidator.Properties): JQuery;
    dxValidator(options: string): any;
    dxValidator(options: string, ...params: any[]): any;

    dxVectorMap(): JQuery;
    dxVectorMap(options: 'instance'): DevExpress.viz.dxVectorMap;
    dxVectorMap(options: DevExpress.viz.dxVectorMap.Properties): JQuery;
    dxVectorMap(options: string): any;
    dxVectorMap(options: string, ...params: any[]): any;
  }
  interface JQueryEventObject {}
  interface JQueryPromise<T> {}
}
declare module DevExpress {
  /**
   * [descr:AnimationConfig]
   */
  export type AnimationConfig = {
    /**
     * [descr:AnimationConfig.complete]
     */
    complete?: (
      $element: DevExpress.core.DxElement,
      config: AnimationConfig
    ) => void;
    /**
     * [descr:AnimationConfig.delay]
     */
    delay?: number;
    /**
     * [descr:AnimationConfig.direction]
     */
    direction?: 'bottom' | 'left' | 'right' | 'top';
    /**
     * [descr:AnimationConfig.duration]
     */
    duration?: number;
    /**
     * [descr:AnimationConfig.easing]
     */
    easing?: string;
    /**
     * [descr:AnimationConfig.from]
     */
    from?: DevExpress.animation.AnimationState;
    /**
     * [descr:AnimationConfig.staggerDelay]
     */
    staggerDelay?: number;
    /**
     * [descr:AnimationConfig.start]
     */
    start?: (
      $element: DevExpress.core.DxElement,
      config: AnimationConfig
    ) => void;
    /**
     * [descr:AnimationConfig.to]
     */
    to?: DevExpress.animation.AnimationState;
    /**
     * [descr:AnimationConfig.type]
     */
    type?:
      | 'css'
      | 'fade'
      | 'fadeIn'
      | 'fadeOut'
      | 'pop'
      | 'slide'
      | 'slideIn'
      | 'slideOut';
  };
  /**
   * [descr:animationPresets]
   */
  export const animationPresets: {
    /**
     * [descr:animationPresets.applyChanges()]
     */
    applyChanges(): void;
    /**
     * [descr:animationPresets.clear()]
     */
    clear(): void;
    /**
     * [descr:animationPresets.clear(name)]
     */
    clear(name: string): void;
    /**
     * [descr:animationPresets.getPreset(name)]
     */
    getPreset(name: string): AnimationConfig;
    /**
     * [descr:animationPresets.registerDefaultPresets()]
     */
    registerDefaultPresets(): void;
    /**
     * [descr:animationPresets.registerPreset(name, config)]
     */
    registerPreset(
      name: string,
      config: { animation: AnimationConfig; device?: Device }
    ): void;
    /**
     * [descr:animationPresets.resetToDefaults()]
     */
    resetToDefaults(): void;
  };
  /**
   * [descr:Component]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class Component<TProperties> {
    constructor(options?: TProperties);
    /**
     * [descr:Component.beginUpdate()]
     */
    beginUpdate(): void;
    /**
     * [descr:Component.endUpdate()]
     */
    endUpdate(): void;
    /**
     * [descr:Component.instance()]
     */
    instance(): this;
    /**
     * [descr:Component.off(eventName)]
     */
    off(eventName: string): this;
    /**
     * [descr:Component.off(eventName, eventHandler)]
     */
    off(eventName: string, eventHandler: Function): this;
    /**
     * [descr:Component.on(eventName, eventHandler)]
     */
    on(eventName: string, eventHandler: Function): this;
    /**
     * [descr:Component.on(events)]
     */
    on(events: { [key: string]: Function }): this;
    /**
     * [descr:Component.option()]
     */
    option(): TProperties;
    /**
     * [descr:Component.option(optionName)]
     */
    option<TPropertyName extends string>(
      optionName: TPropertyName
    ): TPropertyName extends keyof TProperties
      ? TProperties[TPropertyName]
      : unknown;
    /**
     * [descr:Component.option(optionName, optionValue)]
     */
    option<TPropertyName extends string>(
      optionName: TPropertyName,
      optionValue: TPropertyName extends keyof TProperties
        ? TProperties[TPropertyName]
        : unknown
    ): void;
    /**
     * [descr:Component.option(options)]
     */
    option(options: Partial<TProperties>): void;
    /**
     * [descr:Component.resetOption(optionName)]
     */
    resetOption(optionName: string): void;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface ComponentOptions<TComponent> {
    /**
     * [descr:ComponentOptions.onDisposing]
     */
    onDisposing?: (e: { component: TComponent }) => void;
    /**
     * [descr:ComponentOptions.onInitialized]
     */
    onInitialized?: (e: {
      component?: TComponent;
      element?: DevExpress.core.DxElement;
    }) => void;
    /**
     * [descr:ComponentOptions.onOptionChanged]
     */
    onOptionChanged?: (e: {
      component?: TComponent;
      name?: string;
      fullName?: string;
      value?: any;
    }) => void;
  }
  /**
   * [descr:config()]
   */
  export function config(): globalConfig;
  /**
   * [descr:config(config)]
   */
  export function config(config: globalConfig): void;
  /**
   * [descr:DataHelperMixin]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class DataHelperMixin {
    /**
     * [descr:DataHelperMixin.getDataSource()]
     */
    getDataSource(): DevExpress.data.DataSource;
  }
  /**
   * [descr:Device]
   */
  export type Device = {
    /**
     * [descr:Device.android]
     */
    android?: boolean;
    /**
     * [descr:Device.deviceType]
     */
    deviceType?: 'phone' | 'tablet' | 'desktop';
    /**
     * [descr:Device.generic]
     */
    generic?: boolean;
    /**
     * [descr:Device.grade]
     */
    grade?: 'A' | 'B' | 'C';
    /**
     * [descr:Device.ios]
     */
    ios?: boolean;
    /**
     * [descr:Device.phone]
     */
    phone?: boolean;
    /**
     * [descr:Device.platform]
     */
    platform?: 'android' | 'ios' | 'generic';
    /**
     * [descr:Device.tablet]
     */
    tablet?: boolean;
    /**
     * [descr:Device.version]
     */
    version?: Array<number>;
  };
  /**
    * [descr:devices]
    * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
    */
   export const devices: DevicesObject;
  /**
   * [descr:DevicesObject]
   */
  export class DevicesObject {
    constructor(options?: { window?: Window });
    /**
     * [descr:DevicesObject.current()]
     */
    current(): Device;
    /**
     * [descr:DevicesObject.current(deviceName)]
     */
    current(deviceName: string | Device): void;
    /**
     * [descr:DevicesObject.off(eventName)]
     */
    off(eventName: DevExpress.core.EventName): this;
    /**
     * [descr:DevicesObject.off(eventName, eventHandler)]
     */
    off(eventName: DevExpress.core.EventName, eventHandler: Function): this;
    /**
     * [descr:DevicesObject.on(eventName, eventHandler)]
     */
    on(eventName: DevExpress.core.EventName, eventHandler: Function): this;
    /**
     * [descr:DevicesObject.on(events)]
     */
    on(events: { [key in DevExpress.core.EventName]?: Function }): this;
    /**
     * [descr:DevicesObject.orientation()]
     */
    orientation(): 'portrait' | 'landscape' | undefined;
    /**
     * [descr:DevicesObject.real()]
     */
    real(): Device;
    isSimulator(): boolean;
  }
  /**
   * [descr:DOMComponent]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class DOMComponent<
    TProperties = DevExpress.DOMComponent.Properties
  > extends Component<TProperties> {
    _templateManager: DevExpress.core.TemplateManager;

    _cancelOptionChange?: string;

    constructor(
      element: DevExpress.core.UserDefinedElement,
      options?: TProperties
    );

    /**
     * [descr:DOMComponent.getInstance(element)]
     */
    static getInstance(
      element: DevExpress.core.UserDefinedElement
    ): DOMComponent<DevExpress.DOMComponent.Properties>;

    /**
     * [descr:DOMComponent.defaultOptions(rule)]
     */
    static defaultOptions<TProperties = DevExpress.DOMComponent.Properties>(
      rule: DevExpress.core.DefaultOptionsRule<TProperties>
    ): void;

    /**
     * [descr:DOMComponent.dispose()]
     */
    dispose(): void;
    /**
     * [descr:DOMComponent.element()]
     */
    element(): DevExpress.core.DxElement;

    $element(): DevExpress.core.UserDefinedElement;
    _getTemplate(template: unknown): DevExpress.core.FunctionTemplate;
    _invalidate(): void;
    _refresh(): void;
    _notifyOptionChanged(
      fullName: string,
      value: unknown,
      previousValue: unknown
    ): void;
    _createElement(element: HTMLElement): void;
  }
  module DOMComponent {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface DOMComponentInstance extends DOMComponent<Properties> {}
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    type Properties = DOMComponentOptions<DOMComponentInstance>;
  }
  /* eslint-disable no-underscore-dangle */

  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface DOMComponentOptions<TComponent>
    extends ComponentOptions<TComponent> {
    /**
     * [descr:DOMComponentOptions.bindingOptions]
     */
    bindingOptions?: { [key: string]: any };
    /**
     * [descr:DOMComponentOptions.elementAttr]
     */
    elementAttr?: { [key: string]: any };
    /**
     * [descr:DOMComponentOptions.height]
     */
    height?: number | string | (() => number | string);
    /**
     * [descr:DOMComponentOptions.onDisposing]
     */
    onDisposing?: (e: {
      component?: TComponent;
      element?: DevExpress.core.DxElement;
      model?: any;
    }) => void;
    /**
     * [descr:DOMComponentOptions.onOptionChanged]
     */
    onOptionChanged?: (e: {
      component?: TComponent;
      element?: DevExpress.core.DxElement;
      model?: any;
      name?: string;
      fullName?: string;
      value?: any;
    }) => void;
    /**
     * [descr:DOMComponentOptions.rtlEnabled]
     */
    rtlEnabled?: boolean;
    /**
     * [descr:DOMComponentOptions.width]
     */
    width?: number | string | (() => number | string);
  }
  /**
   * [descr:dxSchedulerTimeZone]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxSchedulerTimeZone {
    /**
     * [descr:dxSchedulerTimeZone.id]
     */
    id: string;
    /**
     * [descr:dxSchedulerTimeZone.offset]
     */
    offset: number;
    /**
     * [descr:dxSchedulerTimeZone.title]
     */
    title: string;
  }
  /**
   * [descr:EndpointSelector]
   */
  export class EndpointSelector {
    constructor(options: any);
    /**
     * [descr:EndpointSelector.urlFor(key)]
     */
    urlFor(key: string): string;
  }
  /**
   * [descr:ExportLoadPanel]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface ExportLoadPanel {
    /**
     * [descr:ExportLoadPanel.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:ExportLoadPanel.text]
     */
    text?: string;
    /**
     * [descr:ExportLoadPanel.width]
     */
    width?: number;
    /**
     * [descr:ExportLoadPanel.height]
     */
    height?: number;
    /**
     * [descr:ExportLoadPanel.showIndicator]
     */
    showIndicator?: boolean;
    /**
     * [descr:ExportLoadPanel.indicatorSrc]
     */
    indicatorSrc?: string;
    /**
     * [descr:ExportLoadPanel.showPane]
     */
    showPane?: boolean;
    /**
     * [descr:ExportLoadPanel.shading]
     */
    shading?: boolean;
    /**
     * [descr:ExportLoadPanel.shadingColor]
     */
    shadingColor?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  type ExternalFormat = any;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface FormatObject {
    /**
     * [descr:Format.currency]
     */
    currency?: string;
    /**
     * [descr:Format.formatter]
     */
    formatter?: (value: number | Date) => string;
    /**
     * [descr:Format.parser]
     */
    parser?: (value: string) => number | Date;
    /**
     * [descr:Format.precision]
     */
    precision?: number;
    /**
     * [descr:Format.type]
     */
    type?: PredefinedFormat | string;
  }
  /**
   * [descr:fx]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export const fx: {
    /**
     * [descr:fx.animate(element, config)]
     */
    animate(
      element: Element,
      config: AnimationConfig
    ): DevExpress.core.utils.DxPromise<void>;

    /**
     * [descr:fx.isAnimating(element)]
     */
    isAnimating(element: Element): boolean;

    /**
     * [descr:fx.stop(element, jumpToEnd)]
     */
    stop(element: Element, jumpToEnd: boolean): void;
  };
  /**
   * [descr:globalConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface globalConfig {
    /**
     * [descr:globalConfig.decimalSeparator]
     * @deprecated [depNote:globalConfig.decimalSeparator]
     */
    decimalSeparator?: string;
    /**
     * [descr:globalConfig.defaultCurrency]
     */
    defaultCurrency?: string;
    /**
     * [descr:globalConfig.editorStylingMode]
     */
    editorStylingMode?: 'outlined' | 'underlined' | 'filled';
    /**
     * [descr:globalConfig.floatingActionButtonConfig]
     */
    floatingActionButtonConfig?: {
      /**
       * [descr:globalConfig.floatingActionButtonConfig.closeIcon]
       */
      closeIcon?: string;
      /**
       * [descr:globalConfig.floatingActionButtonConfig.direction]
       */
      direction?: 'auto' | 'up' | 'down';
      /**
       * [descr:globalConfig.floatingActionButtonConfig.icon]
       */
      icon?: string;
      /**
       * [descr:globalConfig.floatingActionButtonConfig.label]
       */
      label?: string;
      /**
       * [descr:globalConfig.floatingActionButtonConfig.maxSpeedDialActionCount]
       */
      maxSpeedDialActionCount?: number;
      /**
       * [descr:globalConfig.floatingActionButtonConfig.position]
       */
      position?:
        | 'bottom'
        | 'center'
        | 'left'
        | 'left bottom'
        | 'left top'
        | 'right'
        | 'right bottom'
        | 'right top'
        | 'top'
        | PositionConfig
        | Function;
      /**
       * [descr:globalConfig.floatingActionButtonConfig.shading]
       */
      shading?: boolean;
    };
    /**
     * [descr:globalConfig.forceIsoDateParsing]
     */
    forceIsoDateParsing?: boolean;
    /**
     * [descr:globalConfig.oDataFilterToLower]
     */
    oDataFilterToLower?: boolean;
    /**
     * [descr:globalConfig.rtlEnabled]
     */
    rtlEnabled?: boolean;
    /**
     * [descr:globalConfig.serverDecimalSeparator]
     */
    serverDecimalSeparator?: string;
    /**
     * [descr:globalConfig.thousandsSeparator]
     * @deprecated [depNote:globalConfig.thousandsSeparator]
     */
    thousandsSeparator?: string;
    /**
     * [descr:globalConfig.useLegacyStoreResult]
     */
    useLegacyStoreResult?: boolean;
    /**
     * [descr:globalConfig.useLegacyVisibleIndex]
     */
    useLegacyVisibleIndex?: boolean;
  }
  /**
   * [descr:hideTopOverlay()]
   */
  export function hideTopOverlay(): boolean;
  /**
   * [descr:PositionConfig]
   */
  export interface PositionConfig {
    /**
     * [descr:PositionConfig.at]
     */
    at?:
      | 'bottom'
      | 'center'
      | 'left'
      | 'left bottom'
      | 'left top'
      | 'right'
      | 'right bottom'
      | 'right top'
      | 'top'
      | {
          /**
           * [descr:PositionConfig.at.x]
           */
          x?: 'center' | 'left' | 'right';
          /**
           * [descr:PositionConfig.at.y]
           */
          y?: 'bottom' | 'center' | 'top';
        };
    /**
     * [descr:PositionConfig.boundary]
     */
    boundary?: string | DevExpress.core.UserDefinedElement | Window;
    /**
     * [descr:PositionConfig.boundaryOffset]
     */
    boundaryOffset?:
      | string
      | {
          /**
           * [descr:PositionConfig.boundaryOffset.x]
           */
          x?: number;
          /**
           * [descr:PositionConfig.boundaryOffset.y]
           */
          y?: number;
        };
    /**
     * [descr:PositionConfig.collision]
     */
    collision?:
      | 'fit'
      | 'fit flip'
      | 'fit flipfit'
      | 'fit none'
      | 'flip'
      | 'flip fit'
      | 'flip none'
      | 'flipfit'
      | 'flipfit fit'
      | 'flipfit none'
      | 'none'
      | 'none fit'
      | 'none flip'
      | 'none flipfit'
      | {
          /**
           * [descr:PositionConfig.collision.x]
           */
          x?: 'fit' | 'flip' | 'flipfit' | 'none';
          /**
           * [descr:PositionConfig.collision.y]
           */
          y?: 'fit' | 'flip' | 'flipfit' | 'none';
        };
    /**
     * [descr:PositionConfig.my]
     */
    my?:
      | 'bottom'
      | 'center'
      | 'left'
      | 'left bottom'
      | 'left top'
      | 'right'
      | 'right bottom'
      | 'right top'
      | 'top'
      | {
          /**
           * [descr:PositionConfig.my.x]
           */
          x?: 'center' | 'left' | 'right';
          /**
           * [descr:PositionConfig.my.y]
           */
          y?: 'bottom' | 'center' | 'top';
        };
    /**
     * [descr:PositionConfig.of]
     */
    of?: string | DevExpress.core.UserDefinedElement | Window;
    /**
     * [descr:PositionConfig.offset]
     */
    offset?:
      | string
      | {
          /**
           * [descr:PositionConfig.offset.x]
           */
          x?: number;
          /**
           * [descr:PositionConfig.offset.y]
           */
          y?: number;
        };
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  type PredefinedFormat =
    | 'billions'
    | 'currency'
    | 'day'
    | 'decimal'
    | 'exponential'
    | 'fixedPoint'
    | 'largeNumber'
    | 'longDate'
    | 'longTime'
    | 'millions'
    | 'millisecond'
    | 'month'
    | 'monthAndDay'
    | 'monthAndYear'
    | 'percent'
    | 'quarter'
    | 'quarterAndYear'
    | 'shortDate'
    | 'shortTime'
    | 'thousands'
    | 'trillions'
    | 'year'
    | 'dayOfWeek'
    | 'hour'
    | 'longDateLongTime'
    | 'minute'
    | 'second'
    | 'shortDateShortTime';
  /**
   * [descr:registerComponent(name, componentClass)]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export function registerComponent<TComponent>(
    name: string,
    componentClass: DevExpress.core.ComponentFactory<TComponent>
  ): void;
  /**
   * [descr:registerComponent(name, namespace, componentClass)]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export function registerComponent<TComponent>(
    name: string,
    namespace: {
      [key: string]: DevExpress.core.ComponentFactory<DOMComponent>;
    },
    componentClass: DevExpress.core.ComponentFactory<TComponent>
  ): void;
  /**
   * [descr:setTemplateEngine(name)]
   */
  export function setTemplateEngine(templateEngineName: string): void;
  /**
   * [descr:setTemplateEngine(options)]
   */
  export function setTemplateEngine(templateEngineOptions: {
    compile?: Function;
    render?: Function;
  }): void;
  /**
   * [descr:TransitionExecutor]
   */
  export class TransitionExecutor {
    /**
     * [descr:TransitionExecutor.enter(elements, animation)]
     */
    enter(
      elements: DevExpress.core.UserDefinedElementsArray,
      animation: AnimationConfig | string
    ): void;
    /**
     * [descr:TransitionExecutor.leave(elements, animation)]
     */
    leave(
      elements: DevExpress.core.UserDefinedElementsArray,
      animation: AnimationConfig | string
    ): void;
    /**
     * [descr:TransitionExecutor.reset()]
     */
    reset(): void;
    /**
     * [descr:TransitionExecutor.start()]
     */
    start(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:TransitionExecutor.stop()]
     */
    stop(): void;
  }
  /**
   * [descr:validationEngine]
   */
  export class validationEngine {
    /**
     * [descr:validationEngine.getGroupConfig()]
     */
    static getGroupConfig(): any;
    /**
     * [descr:validationEngine.getGroupConfig(group)]
     */
    static getGroupConfig(group: string | any): any;
    /**
     * [descr:validationEngine.registerModelForValidation(model)]
     */
    static registerModelForValidation(model: any): void;
    /**
     * [descr:validationEngine.resetGroup()]
     */
    static resetGroup(): void;
    /**
     * [descr:validationEngine.resetGroup(group)]
     */
    static resetGroup(group: string | any): void;
    /**
     * [descr:validationEngine.unregisterModelForValidation(model)]
     */
    static unregisterModelForValidation(model: any): void;
    /**
     * [descr:validationEngine.validateGroup()]
     */
    static validateGroup(): DevExpress.ui.dxValidationGroup.ValidationResult;
    /**
     * [descr:validationEngine.validateGroup(group)]
     */
    static validateGroup(
      group: string | any
    ): DevExpress.ui.dxValidationGroup.ValidationResult;
    /**
     * [descr:validationEngine.validateModel(model)]
     */
    static validateModel(model: any): any;
  }
}
declare module DevExpress.animation {
  /**
   * @deprecated Use the AnimationConfig type instead
   */
  export type animationConfig = AnimationConfig;
  /**
   * [descr:AnimationState]
   */
  export type AnimationState =
    | string
    | number
    | {
        /**
         * [descr:AnimationState.opacity]
         */
        opacity: number;
      }
    | {
        /**
         * [descr:AnimationState.scale]
         */
        scale: number;
      }
    | {
        /**
         * [descr:AnimationState.position]
         */
        position: PositionConfig;
      }
    | {
        /**
         * [descr:AnimationState.left]
         */
        left: number;
      }
    | {
        /**
         * [descr:AnimationState.top]
         */
        top: number;
      };
  /**
   * @deprecated Use the PositionConfig type instead
   */
  export interface positionConfig extends PositionConfig {}
}
declare module DevExpress.core {
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  interface Component<TProperties> {
    // eslint-disable-line @typescript-eslint/no-unused-vars
    _optionsByReference: Record<string, unknown>;
    _deprecatedOptions: Record<string, unknown>;
    _options: {
      silent(path: any, value: any): void;
    };
    _createActionByOption(
      optionName: string,
      config: Record<string, unknown>
    ): (...args: any[]) => any;
    _dispose(): void;
    _getDefaultOptions(): Record<string, unknown>;
    _initOptions(options: Record<string, unknown>): void;
    _init(): void;
    _initializeComponent(): void;
    _optionChanging(name: string, value: unknown, prevValue: unknown): void;
    _optionChanged(args: { name: string; value: unknown }): void;
    _setOptionsByReference(): void;
    _setDeprecatedOptions(): void;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  type ComponentFactory<TComponent> = {
    new (
      element: UserDefinedElement,
      options?: Record<string, unknown>
    ): TComponent;
    getInstance(element: UserDefinedElement): TComponent;
  };
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface Condition {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  interface Condition extends JQueryEventObject {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type DeepPartial<T> = {
    [P in keyof T]?: DeepPartial<T[P]>;
  };
  export type DefaultOptionsRule<T> = {
    device?: Device | Device[] | ((device: Device) => boolean);
    options: DeepPartial<T>;
  };
  /**
   * [descr:dxElement]
   * @deprecated [depNote:dxElement]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type dxElement = DxElement<HTMLElement>;
  /**
   * [descr:DxElement]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type DxElement<T extends Element = HTMLElement> = {} extends Condition
    ? T
    : ElementWrapper<T>;
  /**
   * [descr:dxSVGElement]
   * @deprecated [depNote:dxSVGElement]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type dxSVGElement = DxElement<SVGElement>;
  /**
   * [descr:dxTemplate]
   */
  export type dxTemplate = Template;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxTemplateOptions {
    /**
     * [descr:dxTemplateOptions.name]
     */
    name?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface ElementsArrayWrapper<T extends Element> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  interface ElementsArrayWrapper<T extends Element> extends JQuery<T> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface ElementWrapper<T extends Element> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  interface ElementWrapper<T extends Element> extends JQuery<T> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  type EventName = 'orientationChanged';
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class FunctionTemplate {
    render(template: {
      container: unknown;
      model?: object;
      transclude?: boolean;
    }): DxElement;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface PromiseType<T> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  interface PromiseType<T> extends JQueryPromise<T> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type Skip<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
  /**
   * [descr:template]
   */
  export type template = string | Function | UserDefinedElement;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class Template {
    constructor(options?: dxTemplateOptions);
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class TemplateManager {
    anonymousTemplateName: string;
    addDefaultTemplates(templates: Record<string, unknown>): void;
  }
  /**
   * [descr:UserDefinedElement]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type UserDefinedElement<T extends Element = Element> =
    {} extends Condition ? T : ElementWrapper<T> | T;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type UserDefinedElementsArray = {} extends Condition
    ? Array<Element>
    : ElementsArrayWrapper<Element>;
}
declare module DevExpress.core.utils {
  /**
   * [descr:DxPromise]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type DxPromise<T = void> = {} extends PromiseType<T>
    ? Promise<T>
    : PromiseType<T>;
}
declare module DevExpress.data {
  /**
   * [descr:Utils.applyChanges(data, changes, options)]
   */
  export function applyChanges(
    data: Array<any>,
    changes: Array<any>,
    options?: { keyExpr?: string | Array<string>; immutable?: boolean }
  ): Array<any>;
  /**
   * [descr:ArrayStore]
   */
  export class ArrayStore<TItem = any, TKey = any> extends Store<TItem, TKey> {
    constructor(options?: DevExpress.data.ArrayStore.Options<TItem, TKey>);
    /**
     * [descr:ArrayStore.clear()]
     */
    clear(): void;
    /**
     * [descr:ArrayStore.createQuery()]
     */
    createQuery(): Query;
  }
  module ArrayStore {
    /**
     * [descr:Options]
     */
    export interface Options<TItem = any, TKey = any>
      extends DevExpress.data.Store.Options<TItem, TKey> {
      /**
       * [descr:Options.data]
       */
      data?: Array<TItem>;
    }
  }
  /**
   * [descr:Utils.base64_encode(input)]
   */
  export function base64_encode(input: string | Array<number>): string;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  type BaseGroupDescriptor<T> = {
    selector: KeySelector<T>;
  };
  /**
   * [descr:CustomStore]
   */
  export class CustomStore<TItem = any, TKey = any> extends Store<TItem, TKey> {
    constructor(options?: DevExpress.data.CustomStore.Options<TItem, TKey>);
    /**
     * [descr:CustomStore.clearRawDataCache()]
     */
    clearRawDataCache(): void;
  }
  module CustomStore {
    /**
     * [descr:Options]
     */
    export interface Options<TItem = any, TKey = any>
      extends DevExpress.data.Store.Options<TItem, TKey> {
      /**
       * [descr:Options.byKey]
       */
      byKey?: (key: TKey) => PromiseLike<TItem>;
      /**
       * [descr:Options.cacheRawData]
       */
      cacheRawData?: boolean;
      /**
       * [descr:Options.insert]
       */
      insert?: (values: TItem) => PromiseLike<TItem>;
      /**
       * [descr:Options.load]
       */
      load: (options: LoadOptions<TItem>) => PromiseLike<TItem> | Array<TItem>;
      /**
       * [descr:Options.loadMode]
       */
      loadMode?: 'processed' | 'raw';
      /**
       * [descr:Options.remove]
       */
      remove?: (key: TKey) => PromiseLike<void>;
      /**
       * [descr:Options.totalCount]
       */
      totalCount?: (loadOptions: {
        filter?: FilterDescriptor | Array<FilterDescriptor>;
        group?: GroupDescriptor<TItem> | Array<GroupDescriptor<TItem>>;
      }) => PromiseLike<number>;
      /**
       * [descr:Options.update]
       */
      update?: (key: TKey, values: TItem) => PromiseLike<any>;
      /**
       * [descr:Options.useDefaultSearch]
       */
      useDefaultSearch?: boolean;
    }
  }
  /**
   * [descr:DataSource]
   */
  export class DataSource<TItem = any, TKey = any> {
    constructor(data: Array<TItem>);
    constructor(
      options:
        | DevExpress.data.CustomStore.Options<TItem, TKey>
        | DevExpress.data.DataSource.Options<any, any, TItem, TKey>
    );
    constructor(store: Store<TItem, TKey>);
    constructor(url: string);
    /**
     * [descr:DataSource.cancel(operationId)]
     */
    cancel(operationId: number): boolean;
    /**
     * [descr:DataSource.dispose()]
     */
    dispose(): void;
    /**
     * [descr:DataSource.filter()]
     */
    filter(): FilterDescriptor | Array<FilterDescriptor>;
    /**
     * [descr:DataSource.filter(filterExpr)]
     */
    filter(filterExpr: FilterDescriptor | Array<FilterDescriptor>): void;
    /**
     * [descr:DataSource.group()]
     */
    group(): GroupDescriptor<TItem> | Array<GroupDescriptor<TItem>>;
    /**
     * [descr:DataSource.group(groupExpr)]
     */
    group(
      groupExpr: GroupDescriptor<TItem> | Array<GroupDescriptor<TItem>>
    ): void;
    /**
     * [descr:DataSource.isLastPage()]
     */
    isLastPage(): boolean;
    /**
     * [descr:DataSource.isLoaded()]
     */
    isLoaded(): boolean;
    /**
     * [descr:DataSource.isLoading()]
     */
    isLoading(): boolean;
    /**
     * [descr:DataSource.items()]
     */
    items(): Array<any>;
    /**
     * [descr:DataSource.key()]
     */
    key(): string | Array<string>;
    /**
     * [descr:DataSource.load()]
     */
    load(): DevExpress.core.utils.DxPromise<any>;
    /**
     * [descr:DataSource.loadOptions()]
     */
    loadOptions(): LoadOptions<TItem>;
    /**
     * [descr:DataSource.off(eventName)]
     */
    off(eventName: DevExpress.data.DataSource.EventName): this;
    /**
     * [descr:DataSource.off(eventName, eventHandler)]
     */
    off(
      eventName: DevExpress.data.DataSource.EventName,
      eventHandler: Function
    ): this;
    /**
     * [descr:DataSource.on(eventName, eventHandler)]
     */
    on(
      eventName: DevExpress.data.DataSource.EventName,
      eventHandler: Function
    ): this;
    /**
     * [descr:DataSource.on(events)]
     */
    on(
      events: { [key in DevExpress.data.DataSource.EventName]?: Function }
    ): this;
    /**
     * [descr:DataSource.pageIndex()]
     */
    pageIndex(): number;
    /**
     * [descr:DataSource.pageIndex(newIndex)]
     */
    pageIndex(newIndex: number): void;
    /**
     * [descr:DataSource.pageSize()]
     */
    pageSize(): number;
    /**
     * [descr:DataSource.pageSize(value)]
     */
    pageSize(value: number): void;
    /**
     * [descr:DataSource.paginate()]
     */
    paginate(): boolean;
    /**
     * [descr:DataSource.paginate(value)]
     */
    paginate(value: boolean): void;
    /**
     * [descr:DataSource.reload()]
     */
    reload(): DevExpress.core.utils.DxPromise<any>;
    /**
     * [descr:DataSource.requireTotalCount()]
     */
    requireTotalCount(): boolean;
    /**
     * [descr:DataSource.requireTotalCount(value)]
     */
    requireTotalCount(value: boolean): void;
    /**
     * [descr:DataSource.searchExpr()]
     */
    searchExpr(): string & Function & Array<string | Function>;
    /**
     * [descr:DataSource.searchExpr(expr)]
     */
    searchExpr(expr: string | Function | Array<string | Function>): void;
    /**
     * [descr:DataSource.searchOperation()]
     */
    searchOperation(): string;
    /**
     * [descr:DataSource.searchOperation(op)]
     */
    searchOperation(op: string): void;
    /**
     * [descr:DataSource.searchValue()]
     */
    searchValue(): any;
    /**
     * [descr:DataSource.searchValue(value)]
     */
    searchValue(value: any): void;
    /**
     * [descr:DataSource.select()]
     */
    select(): SelectDescriptor<TItem>;
    /**
     * [descr:DataSource.select(expr)]
     */
    select(expr: SelectDescriptor<TItem>): void;
    /**
     * [descr:DataSource.sort()]
     */
    sort(): SortDescriptor<TItem> | Array<SortDescriptor<TItem>>;
    /**
     * [descr:DataSource.sort(sortExpr)]
     */
    sort(sortExpr: SortDescriptor<TItem> | Array<SortDescriptor<TItem>>): void;
    /**
     * [descr:DataSource.store()]
     */
    store(): Store<TItem, TKey>;
    /**
     * [descr:DataSource.totalCount()]
     */
    totalCount(): number;
  }
  module DataSource {
    /**
     * [descr:DataSourceLike]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export type DataSourceLike<TItem, TKey = any> =
      | string
      | Array<TItem>
      | Store<TItem, TKey>
      | DataSourceOptionsStub<any, any, TItem>
      | DataSource<TItem, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface DataSourceOptionsStub<
      TStoreItem = any,
      TMappedItem = TStoreItem,
      TItem = TMappedItem
    > {
      customQueryParams?: any;
      expand?: Array<string> | string;
      filter?: FilterDescriptor | Array<FilterDescriptor>;
      group?: GroupDescriptor<TItem> | Array<GroupDescriptor<TItem>>;
      map?: (dataItem: TStoreItem) => TMappedItem;
      onChanged?: (e: { readonly changes?: Array<TMappedItem> }) => void;
      onLoadError?: (error: { readonly message?: string }) => void;
      onLoadingChanged?: (isLoading: boolean) => void;
      pageSize?: number;
      paginate?: boolean;
      postProcess?: (data: Array<TMappedItem>) => Array<TItem>;
      pushAggregationTimeout?: number;
      requireTotalCount?: boolean;
      reshapeOnPush?: boolean;
      searchExpr?: string | Function | Array<string | Function>;
      searchOperation?: SearchOperation;
      searchValue?: any;
      select?: SelectDescriptor<TItem>;
      sort?: SortDescriptor<TItem> | Array<SortDescriptor<TItem>>;
      store?:
        | Array<TStoreItem>
        | Store<TStoreItem, any>
        | (DevExpress.data.ArrayStore.Options<TStoreItem, any> & {
            type: 'array';
          })
        | (DevExpress.data.LocalStore.Options<TStoreItem, any> & {
            type: 'local';
          })
        | (DevExpress.data.ODataStore.Options<TStoreItem, any> & {
            type: 'odata';
          })
        | DevExpress.data.CustomStore.Options<TStoreItem, any>;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    type EventName = 'changed' | 'loadError' | 'loadingChanged';
    /**
     * [descr:Options]
     */
    export interface Options<
      TStoreItem = any,
      TMappedItem = TStoreItem,
      TItem = TMappedItem,
      TKey = any
    > {
      /**
       * [descr:Options.customQueryParams]
       */
      customQueryParams?: any;
      /**
       * [descr:Options.expand]
       */
      expand?: Array<string> | string;
      /**
       * [descr:Options.filter]
       */
      filter?: FilterDescriptor | Array<FilterDescriptor>;
      /**
       * [descr:Options.group]
       */
      group?: GroupDescriptor<TItem> | Array<GroupDescriptor<TItem>>;
      /**
       * [descr:Options.map]
       */
      map?: (dataItem: TStoreItem) => TMappedItem;
      /**
       * [descr:Options.onChanged]
       */
      onChanged?: (e: { readonly changes?: Array<TMappedItem> }) => void;
      /**
       * [descr:Options.onLoadError]
       */
      onLoadError?: (error: { readonly message?: string }) => void;
      /**
       * [descr:Options.onLoadingChanged]
       */
      onLoadingChanged?: (isLoading: boolean) => void;
      /**
       * [descr:Options.pageSize]
       */
      pageSize?: number;
      /**
       * [descr:Options.paginate]
       */
      paginate?: boolean;
      /**
       * [descr:Options.postProcess]
       */
      postProcess?: (data: Array<TMappedItem>) => Array<TItem>;
      /**
       * [descr:Options.pushAggregationTimeout]
       */
      pushAggregationTimeout?: number;
      /**
       * [descr:Options.requireTotalCount]
       */
      requireTotalCount?: boolean;
      /**
       * [descr:Options.reshapeOnPush]
       */
      reshapeOnPush?: boolean;
      /**
       * [descr:Options.searchExpr]
       */
      searchExpr?: string | Function | Array<string | Function>;
      /**
       * [descr:Options.searchOperation]
       */
      searchOperation?: SearchOperation;
      /**
       * [descr:Options.searchValue]
       */
      searchValue?: any;
      /**
       * [descr:Options.select]
       */
      select?: SelectDescriptor<TItem>;
      /**
       * [descr:Options.sort]
       */
      sort?: SortDescriptor<TItem> | Array<SortDescriptor<TItem>>;
      /**
       * [descr:Options.store]
       */
      store?:
        | Array<TStoreItem>
        | Store<TStoreItem, TKey>
        | (DevExpress.data.ArrayStore.Options<TStoreItem, TKey> & {
            type: 'array';
          })
        | (DevExpress.data.LocalStore.Options<TStoreItem, TKey> & {
            type: 'local';
          })
        | (DevExpress.data.ODataStore.Options<TStoreItem, TKey> & {
            type: 'odata';
          })
        | DevExpress.data.CustomStore.Options<TStoreItem, TKey>;
    }
  }
  /**
   * [descr:EdmLiteral]
   */
  export class EdmLiteral {
    constructor(value: string);
    /**
     * [descr:EdmLiteral.valueOf()]
     */
    valueOf(): string;
  }
  /**
   * [descr:Utils.errorHandler]
   * @deprecated [depNote:Utils.errorHandler]
   */
  export function errorHandler(e: Error): void;
  /**
   * [descr:FilterDescriptor]
   */
  export type FilterDescriptor = any;
  /**
   * [descr:GroupDescriptor]
   */
  export type GroupDescriptor<T> =
    | KeySelector<T>
    | (BaseGroupDescriptor<T> & {
        desc?: boolean;
      });
  /**
   * [descr:Guid]
   */
  export class Guid {
    constructor();
    constructor(value: string);
    /**
     * [descr:Guid.toString()]
     */
    toString(): string;
    /**
     * [descr:Guid.valueOf()]
     */
    valueOf(): string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  type KeySelector<T> =
    | string
    | ((source: T) => string | number | Date | Object);
  /**
   * [descr:LoadOptions]
   */
  export interface LoadOptions<T = any> {
    /**
     * [descr:LoadOptions.customQueryParams]
     */
    customQueryParams?: any;
    /**
     * [descr:LoadOptions.expand]
     */
    expand?: Array<string>;
    /**
     * [descr:LoadOptions.filter]
     */
    filter?: FilterDescriptor | Array<FilterDescriptor>;
    /**
     * [descr:LoadOptions.group]
     */
    group?: GroupDescriptor<T> | Array<GroupDescriptor<T>>;
    /**
     * [descr:LoadOptions.groupSummary]
     */
    groupSummary?: SummaryDescriptor<T> | Array<SummaryDescriptor<T>>;
    /**
     * [descr:LoadOptions.parentIds]
     */
    parentIds?: Array<any>;
    /**
     * [descr:LoadOptions.requireGroupCount]
     */
    requireGroupCount?: boolean;
    /**
     * [descr:LoadOptions.requireTotalCount]
     */
    requireTotalCount?: boolean;
    /**
     * [descr:LoadOptions.searchExpr]
     */
    searchExpr?: string | Function | Array<string | Function>;
    /**
     * [descr:LoadOptions.searchOperation]
     */
    searchOperation?: SearchOperation;
    /**
     * [descr:LoadOptions.searchValue]
     */
    searchValue?: any;
    /**
     * [descr:LoadOptions.select]
     */
    select?: SelectDescriptor<T>;
    /**
     * [descr:LoadOptions.skip]
     */
    skip?: number;
    /**
     * [descr:LoadOptions.sort]
     */
    sort?: SortDescriptor<T> | Array<SortDescriptor<T>>;
    /**
     * [descr:LoadOptions.take]
     */
    take?: number;
    /**
     * [descr:LoadOptions.totalSummary]
     */
    totalSummary?: SummaryDescriptor<T> | Array<SummaryDescriptor<T>>;
    /**
     * [descr:LoadOptions.userData]
     */
    userData?: any;
  }
  /**
   * [descr:LocalStore]
   */
  export class LocalStore<TItem = any, TKey = any> extends ArrayStore<
    TItem,
    TKey
  > {
    constructor(options?: DevExpress.data.LocalStore.Options<TItem, TKey>);
    /**
     * [descr:LocalStore.clear()]
     */
    clear(): void;
  }
  module LocalStore {
    /**
     * [descr:Options]
     */
    export interface Options<TItem = any, TKey = any>
      extends DevExpress.data.ArrayStore.Options<TItem, TKey> {
      /**
       * [descr:Options.flushInterval]
       */
      flushInterval?: number;
      /**
       * [descr:Options.immediate]
       */
      immediate?: boolean;
      /**
       * [descr:Options.name]
       */
      name?: string;
    }
  }
  /**
   * [descr:ODataContext]
   */
  export class ODataContext {
    constructor(options?: ODataContextOptions);
    /**
     * [descr:ODataContext.get(operationName, params)]
     */
    get(
      operationName: string,
      params: any
    ): DevExpress.core.utils.DxPromise<any>;
    /**
     * [descr:ODataContext.invoke(operationName, params, httpMethod)]
     */
    invoke(
      operationName: string,
      params: any,
      httpMethod: DevExpress.data.ODataContext.HttpMethod
    ): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:ODataContext.objectLink(entityAlias, key)]
     */
    objectLink(entityAlias: string, key: any | string | number): any;
  }
  module ODataContext {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    type HttpMethod = 'GET' | 'POST' | 'PATCH' | 'MERGE';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ODataRequestOptions {
      accepts: any;
      async: boolean;
      contentType: string | boolean;
      data: any;
      dataType: string;
      headers: any;
      jsonp?: boolean;
      method: string;
      timeout: number;
      url: string;
      xhrFields: any;
    }
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface ODataContextOptions {
    /**
     * [descr:ODataContextOptions.beforeSend]
     */
    beforeSend?: (options: {
      url: string;
      async: boolean;
      method: string;
      timeout: number;
      params: any;
      payload: any;
      headers: any;
    }) => void;
    /**
     * [descr:ODataContextOptions.deserializeDates]
     */
    deserializeDates?: boolean;
    /**
     * [descr:ODataContextOptions.entities]
     */
    entities?: any;
    /**
     * [descr:ODataContextOptions.errorHandler]
     */
    errorHandler?: (e: {
      httpStatus: number;
      errorDetails: any;
      requestOptions: DevExpress.data.ODataContext.ODataRequestOptions;
    }) => void;
    /**
     * [descr:ODataContextOptions.filterToLower]
     */
    filterToLower?: boolean;
    /**
     * [descr:ODataContextOptions.jsonp]
     */
    jsonp?: boolean;
    /**
     * [descr:ODataContextOptions.url]
     */
    url?: string;
    /**
     * [descr:ODataContextOptions.version]
     */
    version?: number;
    /**
     * [descr:ODataContextOptions.withCredentials]
     */
    withCredentials?: boolean;
  }
  /**
   * [descr:ODataStore]
   */
  export class ODataStore<TItem = any, TKey = any> extends Store<TItem, TKey> {
    constructor(options?: DevExpress.data.ODataStore.Options<TItem, TKey>);
    byKey(key: TKey): DevExpress.core.utils.DxPromise<TItem>;
    /**
     * [descr:ODataStore.byKey(key, extraOptions)]
     */
    byKey(
      key: TKey,
      extraOptions: {
        expand?: string | Array<string>;
        select?: string | Array<string>;
      }
    ): DevExpress.core.utils.DxPromise<TItem>;
    /**
     * [descr:ODataStore.createQuery(loadOptions)]
     */
    createQuery(loadOptions?: {
      expand?: string | Array<string>;
      requireTotalCount?: boolean;
      customQueryParams?: any;
    }): Query;

    /**
     * [descr:ODataStore.insert(values)]
     */
    insert(
      values: TItem
    ): DevExpress.core.utils.DxPromise<TItem> &
      DevExpress.data.ODataStore.PromiseExtension<TItem>;
  }
  module ODataStore {
    /**
     * [descr:Options]
     */
    export interface Options<TItem = any, TKey = any>
      extends DevExpress.data.Store.Options<TItem, TKey> {
      /**
       * [descr:Options.beforeSend]
       */
      beforeSend?: (options: {
        url: string;
        async: boolean;
        method: string;
        timeout: number;
        params: any;
        payload: any;
        headers: any;
      }) => void;
      /**
       * [descr:Options.deserializeDates]
       */
      deserializeDates?: boolean;
      /**
       * [descr:Options.errorHandler]
       */
      errorHandler?: (e: {
        httpStatus: number;
        errorDetails: any;
        requestOptions: DevExpress.data.ODataContext.ODataRequestOptions;
      }) => void;
      /**
       * [descr:Options.fieldTypes]
       */
      fieldTypes?: any;
      /**
       * [descr:Options.filterToLower]
       */
      filterToLower?: boolean;
      /**
       * [descr:Options.jsonp]
       */
      jsonp?: boolean;
      /**
       * [descr:Options.keyType]
       */
      keyType?:
        | 'String'
        | 'Int32'
        | 'Int64'
        | 'Guid'
        | 'Boolean'
        | 'Single'
        | 'Decimal'
        | any;
      /**
       * [descr:Options.onLoading]
       */
      onLoading?: (loadOptions: LoadOptions<TItem>) => void;
      /**
       * [descr:Options.url]
       */
      url?: string;
      /**
       * [descr:Options.version]
       */
      version?: number;
      /**
       * [descr:Options.withCredentials]
       */
      withCredentials?: boolean;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface PromiseExtension<T> {
      then<TResult1 = T, TResult2 = never>(
        onFulfilled?:
          | ((
              value: T,
              extraParameters?: T
            ) => TResult1 | PromiseLike<TResult1>)
          | undefined
          | null,
        onRejected?:
          | ((reason: any) => TResult2 | PromiseLike<TResult2>)
          | undefined
          | null
      ): Promise<TResult1 | TResult2>;
    }
  }
  /**
   * [descr:PivotGridDataSource]
   */
  export class PivotGridDataSource {
    constructor(options?: DevExpress.data.PivotGridDataSource.Options);
    /**
     * [descr:PivotGridDataSource.collapseAll(id)]
     */
    collapseAll(id: number | string): void;
    /**
     * [descr:PivotGridDataSource.collapseHeaderItem(area, path)]
     */
    collapseHeaderItem(area: string, path: Array<string | number | Date>): void;
    /**
     * [descr:PivotGridDataSource.createDrillDownDataSource(options)]
     */
    createDrillDownDataSource(options: {
      columnPath?: Array<string | number | Date>;
      rowPath?: Array<string | number | Date>;
      dataIndex?: number;
      maxRowCount?: number;
      customColumns?: Array<string>;
    }): DataSource;
    /**
     * [descr:PivotGridDataSource.dispose()]
     */
    dispose(): void;
    /**
     * [descr:PivotGridDataSource.expandAll(id)]
     */
    expandAll(id: number | string): void;
    /**
     * [descr:PivotGridDataSource.expandHeaderItem(area, path)]
     */
    expandHeaderItem(area: string, path: Array<any>): void;
    /**
     * [descr:PivotGridDataSource.field(id)]
     */
    field(id: number | string): any;
    /**
     * [descr:PivotGridDataSource.field(id, options)]
     */
    field(id: number | string, options: any): void;
    /**
     * [descr:PivotGridDataSource.fields()]
     */
    fields(): Array<DevExpress.data.PivotGridDataSource.Field>;
    /**
     * [descr:PivotGridDataSource.fields(fields)]
     */
    fields(fields: Array<DevExpress.data.PivotGridDataSource.Field>): void;
    /**
     * [descr:PivotGridDataSource.filter()]
     */
    filter(): any;
    /**
     * [descr:PivotGridDataSource.filter(filterExpr)]
     */
    filter(filterExpr: any): void;
    /**
     * [descr:PivotGridDataSource.getAreaFields(area, collectGroups)]
     */
    getAreaFields(
      area: string,
      collectGroups: boolean
    ): Array<DevExpress.data.PivotGridDataSource.Field>;
    /**
     * [descr:PivotGridDataSource.getData()]
     */
    getData(): any;
    /**
     * [descr:PivotGridDataSource.isLoading()]
     */
    isLoading(): boolean;
    /**
     * [descr:PivotGridDataSource.load()]
     */
    load(): DevExpress.core.utils.DxPromise<any>;
    /**
     * [descr:PivotGridDataSource.off(eventName)]
     */
    off(eventName: DevExpress.data.PivotGridDataSource.EventName): this;
    /**
     * [descr:PivotGridDataSource.off(eventName, eventHandler)]
     */
    off(
      eventName: DevExpress.data.PivotGridDataSource.EventName,
      eventHandler: Function
    ): this;
    /**
     * [descr:PivotGridDataSource.on(eventName, eventHandler)]
     */
    on(
      eventName: DevExpress.data.PivotGridDataSource.EventName,
      eventHandler: Function
    ): this;
    /**
     * [descr:PivotGridDataSource.on(events)]
     */
    on(
      events: {
        [key in DevExpress.data.PivotGridDataSource.EventName]?: Function;
      }
    ): this;
    /**
     * [descr:PivotGridDataSource.reload()]
     */
    reload(): DevExpress.core.utils.DxPromise<any>;
    /**
     * [descr:PivotGridDataSource.state()]
     */
    state(): any;
    /**
     * [descr:PivotGridDataSource.state(state)]
     */
    state(state: any): void;
  }
  module PivotGridDataSource {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    type EventName =
      | 'changed'
      | 'fieldsPrepared'
      | 'loadError'
      | 'loadingChanged';
    /**
     * [descr:Options]
     */
    export interface Options {
      /**
       * [descr:Options.fields]
       */
      fields?: Array<Field>;
      /**
       * [descr:Options.filter]
       */
      filter?: string | Array<any> | Function;
      /**
       * [descr:Options.onChanged]
       */
      onChanged?: Function;
      /**
       * [descr:Options.onFieldsPrepared]
       */
      onFieldsPrepared?: (fields: Array<Field>) => void;
      /**
       * [descr:Options.onLoadError]
       */
      onLoadError?: (error: any) => void;
      /**
       * [descr:Options.onLoadingChanged]
       */
      onLoadingChanged?: (isLoading: boolean) => void;
      /**
       * [descr:Options.paginate]
       */
      paginate?: boolean;
      /**
       * [descr:Options.remoteOperations]
       */
      remoteOperations?: boolean;
      /**
       * [descr:Options.retrieveFields]
       */
      retrieveFields?: boolean;
      /**
       * [descr:Options.store]
       */
      store?:
        | Store
        | DevExpress.data.Store.Options
        | XmlaStore
        | XmlaStoreOptions
        | Array<{
            /**
             * [descr:Options.store.type]
             */
            type?: 'array' | 'local' | 'odata' | 'xmla';
          }>
        | {
            /**
             * [descr:Options.store.type]
             */
            type?: 'array' | 'local' | 'odata' | 'xmla';
          };
    }
  }
  /**
   * @deprecated Use DevExpress.data.PivotGridDataSource.Field instead
   */
  export type PivotGridDataSourceField =
    DevExpress.data.PivotGridDataSource.Field;
  /**
   * [descr:Utils.query(array)]
   */
  export function query(array: Array<any>): Query;
  /**
   * [descr:Utils.query(url, queryOptions)]
   */
  export function query(url: string, queryOptions: any): Query;
  /**
   * [descr:Query]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface Query {
    /**
     * [descr:Query.aggregate(seed, step, finalize)]
     */
    aggregate(
      seed: any,
      step: Function,
      finalize: Function
    ): DevExpress.core.utils.DxPromise<any>;
    /**
     * [descr:Query.aggregate(step)]
     */
    aggregate(step: Function): DevExpress.core.utils.DxPromise<any>;
    /**
     * [descr:Query.avg()]
     */
    avg(): DevExpress.core.utils.DxPromise<number>;
    /**
     * [descr:Query.avg(getter)]
     */
    avg(getter: any): DevExpress.core.utils.DxPromise<number>;
    /**
     * [descr:Query.count()]
     */
    count(): DevExpress.core.utils.DxPromise<number>;
    /**
     * [descr:Query.enumerate()]
     */
    enumerate(): DevExpress.core.utils.DxPromise<any>;
    /**
     * [descr:Query.filter(criteria)]
     */
    filter(criteria: Array<any>): Query;
    /**
     * [descr:Query.filter(predicate)]
     */
    filter(predicate: Function): Query;
    /**
     * [descr:Query.groupBy(getter)]
     */
    groupBy(getter: any): Query;
    /**
     * [descr:Query.max()]
     */
    max(): DevExpress.core.utils.DxPromise<number | Date>;
    /**
     * [descr:Query.max(getter)]
     */
    max(getter: any): DevExpress.core.utils.DxPromise<number | Date>;
    /**
     * [descr:Query.min()]
     */
    min(): DevExpress.core.utils.DxPromise<number | Date>;
    /**
     * [descr:Query.min(getter)]
     */
    min(getter: any): DevExpress.core.utils.DxPromise<number | Date>;
    /**
     * [descr:Query.select(getter)]
     */
    select(getter: any): Query;
    /**
     * [descr:Query.slice(skip, take)]
     */
    slice(skip: number, take?: number): Query;
    /**
     * [descr:Query.sortBy(getter)]
     */
    sortBy(getter: any): Query;
    /**
     * [descr:Query.sortBy(getter, desc)]
     */
    sortBy(getter: any, desc: boolean): Query;
    /**
     * [descr:Query.sum()]
     */
    sum(): DevExpress.core.utils.DxPromise<number>;
    /**
     * [descr:Query.sum(getter)]
     */
    sum(getter: any): DevExpress.core.utils.DxPromise<number>;
    /**
     * [descr:Query.thenBy(getter)]
     */
    thenBy(getter: any): Query;
    /**
     * [descr:Query.thenBy(getter, desc)]
     */
    thenBy(getter: any, desc: boolean): Query;
    /**
     * [descr:Query.toArray()]
     */
    toArray(): Array<any>;
  }
  /**
   * [descr:SearchOperation]
   */
  export type SearchOperation =
    | '='
    | '<>'
    | '>'
    | '>='
    | '<'
    | '<='
    | 'startswith'
    | 'endswith'
    | 'contains'
    | 'notcontains';
  /**
   * [descr:SelectDescriptor]
   */
  export type SelectDescriptor<T> =
    | string
    | Array<string>
    | ((source: T) => any);
  /**
   * [descr:Utils.setErrorHandler]
   */
  export function setErrorHandler(handler: (e: Error) => void): void;
  /**
   * [descr:SortDescriptor]
   */
  export type SortDescriptor<T> = GroupDescriptor<T>;
  /**
   * [descr:Store]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class Store<TItem = any, TKey = any> {
    constructor(options?: DevExpress.data.Store.Options<TItem, TKey>);
    /**
     * [descr:Store.byKey(key)]
     */
    byKey(
      key: TKey,
      extraOptions?: LoadOptions<TItem>
    ): DevExpress.core.utils.DxPromise<TItem>;
    /**
     * [descr:Store.insert(values)]
     */
    insert(values: TItem): DevExpress.core.utils.DxPromise<TItem>;
    /**
     * [descr:Store.key()]
     */
    key(): string | Array<string>;
    /**
     * [descr:Store.keyOf(obj)]
     */
    keyOf(obj: TItem): TKey;
    /**
     * [descr:Store.load()]
     */
    load(): DevExpress.core.utils.DxPromise<Array<TItem>>;
    /**
     * [descr:Store.load(options)]
     */
    load(
      options: LoadOptions<TItem>
    ): DevExpress.core.utils.DxPromise<Array<TItem>>;
    /**
     * [descr:Store.off(eventName)]
     */
    off(eventName: DevExpress.data.Store.EventName): this;
    /**
     * [descr:Store.off(eventName, eventHandler)]
     */
    off(
      eventName: DevExpress.data.Store.EventName,
      eventHandler: Function
    ): this;
    /**
     * [descr:Store.on(eventName, eventHandler)]
     */
    on(
      eventName: DevExpress.data.Store.EventName,
      eventHandler: Function
    ): this;
    /**
     * [descr:Store.on(events)]
     */
    on(events: { [key in DevExpress.data.Store.EventName]?: Function }): this;
    /**
     * [descr:Store.push(changes)]
     */
    push(
      changes: Array<{
        type: 'insert' | 'update' | 'remove';
        data?: DevExpress.core.DeepPartial<TItem>;
        key?: TKey;
        index?: number;
      }>
    ): void;
    /**
     * [descr:Store.remove(key)]
     */
    remove(key: TKey): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:Store.totalCount(options)]
     */
    totalCount(obj: {
      filter?: FilterDescriptor | Array<FilterDescriptor>;
      group?: GroupDescriptor<TItem> | Array<GroupDescriptor<TItem>>;
    }): DevExpress.core.utils.DxPromise<number>;
    /**
     * [descr:Store.update(key, values)]
     */
    update(
      key: TKey,
      values: DevExpress.core.DeepPartial<TItem>
    ): DevExpress.core.utils.DxPromise<TItem>;
  }
  module Store {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    type EventName =
      | 'loaded'
      | 'loading'
      | 'inserted'
      | 'inserting'
      | 'updated'
      | 'updating'
      | 'push'
      | 'removed'
      | 'removing'
      | 'modified'
      | 'modifying';
    /**
     * [descr:Options]
     */
    export interface Options<TItem = any, TKey = any> {
      /**
       * [descr:Options.errorHandler]
       */
      errorHandler?: Function;
      /**
       * [descr:Options.key]
       */
      key?: string | Array<string>;
      /**
       * [descr:Options.onInserted]
       */
      onInserted?: (values: TItem, key: TKey) => void;
      /**
       * [descr:Options.onInserting]
       */
      onInserting?: (values: TItem) => void;
      /**
       * [descr:Options.onLoaded]
       */
      onLoaded?: (
        result: Array<TItem>,
        loadOptions: LoadOptions<TItem>
      ) => void;
      /**
       * [descr:Options.onLoading]
       */
      onLoading?: (loadOptions: LoadOptions<TItem>) => void;
      /**
       * [descr:Options.onModified]
       */
      onModified?: Function;
      /**
       * [descr:Options.onModifying]
       */
      onModifying?: Function;
      /**
       * [descr:Options.onPush]
       */
      onPush?: (changes: Array<TItem>) => void;
      /**
       * [descr:Options.onRemoved]
       */
      onRemoved?: (key: TKey) => void;
      /**
       * [descr:Options.onRemoving]
       */
      onRemoving?: (key: TKey) => void;
      /**
       * [descr:Options.onUpdated]
       */
      onUpdated?: (key: TKey, values: TItem) => void;
      /**
       * [descr:Options.onUpdating]
       */
      onUpdating?: (key: TKey, values: TItem) => void;
    }
  }
  /**
   * [descr:SummaryDescriptor]
   */
  export type SummaryDescriptor<T> =
    | KeySelector<T>
    | (BaseGroupDescriptor<T> & {
        summaryType?: 'sum' | 'avg' | 'min' | 'max' | 'count';
      });
  /**
   * [descr:XmlaStore]
   */
  export class XmlaStore {
    constructor(options?: XmlaStoreOptions);
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface XmlaStoreOptions {
    /**
     * [descr:XmlaStoreOptions.beforeSend]
     */
    beforeSend?: (options: {
      url?: string;
      method?: string;
      headers?: any;
      xhrFields?: any;
      data?: string;
      dataType?: string;
    }) => void;
    /**
     * [descr:XmlaStoreOptions.catalog]
     */
    catalog?: string;
    /**
     * [descr:XmlaStoreOptions.cube]
     */
    cube?: string;
    /**
     * [descr:XmlaStoreOptions.url]
     */
    url?: string;
  }
}
declare module DevExpress.data.PivotGridDataSource {
  /**
   * [descr:Field]
   */
  export interface Field {
    /**
     * [descr:PivotGridDataSourceOptions.fields.allowCrossGroupCalculation]
     */
    allowCrossGroupCalculation?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.allowExpandAll]
     */
    allowExpandAll?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.allowFiltering]
     */
    allowFiltering?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.allowSorting]
     */
    allowSorting?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.allowSortingBySummary]
     */
    allowSortingBySummary?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.area]
     */
    area?: 'column' | 'data' | 'filter' | 'row' | undefined;
    /**
     * [descr:PivotGridDataSourceOptions.fields.areaIndex]
     */
    areaIndex?: number;
    /**
     * [descr:PivotGridDataSourceOptions.fields.calculateCustomSummary]
     */
    calculateCustomSummary?: (options: {
      summaryProcess?: string;
      value?: any;
      totalValue?: any;
    }) => void;
    /**
     * [descr:PivotGridDataSourceOptions.fields.calculateSummaryValue]
     */
    calculateSummaryValue?: (e: DevExpress.ui.dxPivotGridSummaryCell) => number;
    /**
     * [descr:PivotGridDataSourceOptions.fields.caption]
     */
    caption?: string;
    /**
     * [descr:PivotGridDataSourceOptions.fields.customizeText]
     */
    customizeText?: (cellInfo: {
      value?: string | number | Date;
      valueText?: string;
    }) => string;
    /**
     * [descr:PivotGridDataSourceOptions.fields.dataField]
     */
    dataField?: string;
    /**
     * [descr:PivotGridDataSourceOptions.fields.dataType]
     */
    dataType?: 'date' | 'number' | 'string';
    /**
     * [descr:PivotGridDataSourceOptions.fields.displayFolder]
     */
    displayFolder?: string;
    /**
     * [descr:PivotGridDataSourceOptions.fields.expanded]
     */
    expanded?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.filterType]
     */
    filterType?: 'exclude' | 'include';
    /**
     * [descr:PivotGridDataSourceOptions.fields.filterValues]
     */
    filterValues?: Array<any>;
    /**
     * [descr:PivotGridDataSourceOptions.fields.format]
     */
    format?: DevExpress.ui.Format;
    /**
     * [descr:PivotGridDataSourceOptions.fields.groupIndex]
     */
    groupIndex?: number;
    /**
     * [descr:PivotGridDataSourceOptions.fields.groupInterval]
     */
    groupInterval?: 'day' | 'dayOfWeek' | 'month' | 'quarter' | 'year' | number;
    /**
     * [descr:PivotGridDataSourceOptions.fields.groupName]
     */
    groupName?: string;
    /**
     * [descr:PivotGridDataSourceOptions.fields.headerFilter]
     */
    headerFilter?: { allowSearch?: boolean; height?: number; width?: number };
    /**
     * [descr:PivotGridDataSourceOptions.fields.isMeasure]
     */
    isMeasure?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.name]
     */
    name?: string;
    /**
     * [descr:PivotGridDataSourceOptions.fields.runningTotal]
     */
    runningTotal?: 'column' | 'row';
    /**
     * [descr:PivotGridDataSourceOptions.fields.selector]
     */
    selector?: Function;
    /**
     * [descr:PivotGridDataSourceOptions.fields.showGrandTotals]
     */
    showGrandTotals?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.showTotals]
     */
    showTotals?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.showValues]
     */
    showValues?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.sortBy]
     */
    sortBy?: 'displayText' | 'value' | 'none';
    /**
     * [descr:PivotGridDataSourceOptions.fields.sortBySummaryField]
     */
    sortBySummaryField?: string;
    /**
     * [descr:PivotGridDataSourceOptions.fields.sortBySummaryPath]
     */
    sortBySummaryPath?: Array<number | string>;
    /**
     * [descr:PivotGridDataSourceOptions.fields.sortOrder]
     */
    sortOrder?: 'asc' | 'desc';
    /**
     * [descr:PivotGridDataSourceOptions.fields.sortingMethod]
     */
    sortingMethod?: (
      a: { value?: string | number; children?: Array<any> },
      b: { value?: string | number; children?: Array<any> }
    ) => number;
    /**
     * [descr:PivotGridDataSourceOptions.fields.summaryDisplayMode]
     */
    summaryDisplayMode?:
      | 'absoluteVariation'
      | 'percentOfColumnGrandTotal'
      | 'percentOfColumnTotal'
      | 'percentOfGrandTotal'
      | 'percentOfRowGrandTotal'
      | 'percentOfRowTotal'
      | 'percentVariation';
    /**
     * [descr:PivotGridDataSourceOptions.fields.summaryType]
     */
    summaryType?: 'avg' | 'count' | 'custom' | 'max' | 'min' | 'sum' | string;
    /**
     * [descr:PivotGridDataSourceOptions.fields.visible]
     */
    visible?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.width]
     */
    width?: number;
    /**
     * [descr:PivotGridDataSourceOptions.fields.wordWrapEnabled]
     */
    wordWrapEnabled?: boolean;
  }
}
declare module DevExpress.data.utils {
  /**
   * [descr:Utils.compileGetter(expr)]
   */
  export function compileGetter(expr: string | Array<string>): Function;
  /**
   * [descr:Utils.compileSetter(expr)]
   */
  export function compileSetter(expr: string | Array<string>): Function;
}
declare module DevExpress.data.utils.odata {
  /**
   * [descr:Utils.keyConverters]
   */
  export var keyConverters: any;
}
declare module DevExpress.events {
  export interface Cancelable {
    cancel?: boolean;
  }
  export interface ChangedOptionInfo {
    readonly name: string;
    readonly fullName: string;
    readonly value?: any;
    readonly previousValue?: any;
  }
  /* eslint-enable @typescript-eslint/no-empty-interface */
  /**
   * [descr:DxEvent]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type DxEvent = {} extends EventType ? EventObject : EventType;
  /**
   * [descr:event]
   * @deprecated [depNote:event]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type event = DxEvent;
  export interface EventInfo<T> {
    readonly component: T;
    readonly element: DevExpress.core.DxElement;
    readonly model?: any;
  }
  /**
   * [descr:EventObject]
   */
  export class EventObject {
    /**
     * [descr:EventObject.currentTarget]
     */
    currentTarget: Element;

    /**
     * [descr:EventObject.data]
     */
    data: any;

    /**
     * [descr:EventObject.delegateTarget]
     */
    delegateTarget: Element;

    /**
     * [descr:EventObject.target]
     */
    target: Element;
    /**
     * [descr:EventObject.isDefaultPrevented()]
     */
    isDefaultPrevented(): boolean;
    /**
     * [descr:EventObject.isImmediatePropagationStopped()]
     */
    isImmediatePropagationStopped(): boolean;
    /**
     * [descr:EventObject.isPropagationStopped()]
     */
    isPropagationStopped(): boolean;
    /**
     * [descr:EventObject.preventDefault()]
     */
    preventDefault(): void;
    /**
     * [descr:EventObject.stopImmediatePropagation()]
     */
    stopImmediatePropagation(): void;
    /**
     * [descr:EventObject.stopPropagation()]
     */
    stopPropagation(): void;
  }
  /**
   * [descr:handler(event, extraParameters)]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export function eventsHandler(event: DxEvent, extraParameters: any): boolean;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface EventType {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  interface EventType extends JQueryEventObject {
    cancel?: boolean;
  }
  export interface InitializedEventInfo<T> {
    readonly component?: T;
    readonly element?: DevExpress.core.DxElement;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface ItemInfo<TItemData = any> {
    readonly itemData?: TItemData;
    readonly itemElement: DevExpress.core.DxElement;
    readonly itemIndex: number;
  }
  export interface NativeEventInfo<T> {
    readonly component: T;
    readonly element: DevExpress.core.DxElement;
    readonly model?: any;
    readonly event?: DxEvent;
  }
  /**
   * [descr:events.off(element)]
   */
  export function off(element: Element | Array<Element>): void;
  /**
   * [descr:events.off(element, eventName)]
   */
  export function off(
    element: Element | Array<Element>,
    eventName: string
  ): void;
  /**
   * [descr:events.off(element, eventName, handler)]
   */
  export function off(
    element: Element | Array<Element>,
    eventName: string,
    handler: Function
  ): void;
  /**
   * [descr:events.off(element, eventName, selector)]
   */
  export function off(
    element: Element | Array<Element>,
    eventName: string,
    selector: string
  ): void;
  /**
   * [descr:events.off(element, eventName, selector, handler)]
   */
  export function off(
    element: Element | Array<Element>,
    eventName: string,
    selector: string,
    handler: Function
  ): void;
  /**
   * [descr:events.on(element, eventName, data, handler)]
   */
  export function on(
    element: Element | Array<Element>,
    eventName: string,
    data: any,
    handler: Function
  ): void;
  /**
   * [descr:events.on(element, eventName, handler)]
   */
  export function on(
    element: Element | Array<Element>,
    eventName: string,
    handler: Function
  ): void;
  /**
   * [descr:events.on(element, eventName, selector, data, handler)]
   */
  export function on(
    element: Element | Array<Element>,
    eventName: string,
    selector: string,
    data: any,
    handler: Function
  ): void;
  /**
   * [descr:events.on(element, eventName, selector, handler)]
   */
  export function on(
    element: Element | Array<Element>,
    eventName: string,
    selector: string,
    handler: Function
  ): void;
  /**
   * [descr:events.one(element, eventName, data, handler)]
   */
  export function one(
    element: Element | Array<Element>,
    eventName: string,
    data: any,
    handler: Function
  ): void;
  /**
   * [descr:events.one(element, eventName, handler)]
   */
  export function one(
    element: Element | Array<Element>,
    eventName: string,
    handler: Function
  ): void;
  /**
   * [descr:events.one(element, eventName, selector, data, handler)]
   */
  export function one(
    element: Element | Array<Element>,
    eventName: string,
    selector: string,
    data: any,
    handler: Function
  ): void;
  /**
   * [descr:events.one(element, eventName, selector, handler)]
   */
  export function one(
    element: Element | Array<Element>,
    eventName: string,
    selector: string,
    handler: Function
  ): void;
  /**
   * [descr:events.trigger(element, event)]
   */
  export function trigger(
    element: Element | Array<Element>,
    event: string | DxEvent
  ): void;
  /**
   * [descr:events.trigger(element, event, extraParameters)]
   */
  export function trigger(
    element: Element | Array<Element>,
    event: string | DxEvent,
    extraParameters: any
  ): void;
  /**
   * [descr:events.triggerHandler(element, event)]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export function triggerHandler(
    element: Element | Array<Element>,
    event: string | DxEvent
  ): void;
  /**
   * [descr:events.triggerHandler(element, event, extraParameters)]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export function triggerHandler(
    element: Element | Array<Element>,
    event: string | DxEvent,
    extraParameters: any
  ): void;
}
declare module DevExpress.excelExporter {
  /**
   * [descr:CellAddress]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface CellAddress {
    /**
     * [descr:CellAddress.row]
     */
    row?: number;
    /**
     * [descr:CellAddress.column]
     */
    column?: number;
  }
  /**
   * [descr:CellRange]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface CellRange {
    /**
     * [descr:CellRange.from]
     */
    from?: CellAddress;
    /**
     * [descr:CellRange.to]
     */
    to?: CellAddress;
  }
  /**
   * [descr:DataGridCell]
   */
  export interface DataGridCell {
    /**
     * [descr:DataGridCell.column]
     */
    column?: DevExpress.ui.dxDataGrid.Column;
    /**
     * [descr:DataGridCell.data]
     */
    data?: any;
    /**
     * [descr:DataGridCell.groupIndex]
     */
    groupIndex?: number;
    /**
     * [descr:DataGridCell.groupSummaryItems]
     */
    groupSummaryItems?: Array<{
      /**
       * [descr:DataGridCell.groupSummaryItems.name]
       */
      name?: string;
      /**
       * [descr:DataGridCell.groupSummaryItems.value]
       */
      value?: any;
    }>;
    /**
     * [descr:DataGridCell.rowType]
     */
    rowType?: string;
    /**
     * [descr:DataGridCell.totalSummaryItemName]
     */
    totalSummaryItemName?: string;
    /**
     * [descr:DataGridCell.value]
     */
    value?: any;
  }
  /**
   * [descr:ExcelExportBaseProps]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface ExcelExportBaseProps {
    /**
     * [descr:ExcelExportBaseProps.worksheet]
     */
    worksheet?: object;
    /**
     * [descr:ExcelExportBaseProps.topLeftCell]
     */
    topLeftCell?: CellAddress | string;
    /**
     * [descr:ExcelExportBaseProps.keepColumnWidths]
     */
    keepColumnWidths?: boolean;
    /**
     * [descr:ExcelExportBaseProps.loadPanel]
     */
    loadPanel?: ExportLoadPanel;
  }
  /**
   * [descr:ExcelExportDataGridProps]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface ExcelExportDataGridProps extends ExcelExportBaseProps {
    /**
     * [descr:ExcelExportDataGridProps.component]
     */
    component?: DevExpress.ui.dxDataGrid;
    /**
     * [descr:ExcelExportDataGridProps.selectedRowsOnly]
     */
    selectedRowsOnly?: boolean;
    /**
     * [descr:ExcelExportDataGridProps.autoFilterEnabled]
     */
    autoFilterEnabled?: boolean;
    /**
     * [descr:ExcelExportDataGridProps.customizeCell]
     */
    customizeCell?: (options: {
      gridCell?: DataGridCell;
      excelCell?: any;
    }) => void;
  }
  /**
   * [descr:ExcelExportPivotGridProps]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface ExcelExportPivotGridProps extends ExcelExportBaseProps {
    /**
     * [descr:ExcelExportPivotGridProps.component]
     */
    component?: DevExpress.ui.dxPivotGrid;
    /**
     * [descr:ExcelExportPivotGridProps.mergeRowFieldValues]
     */
    mergeRowFieldValues?: boolean;
    /**
     * [descr:ExcelExportPivotGridProps.mergeColumnFieldValues]
     */
    mergeColumnFieldValues?: boolean;
    /**
     * [descr:ExcelExportPivotGridProps.customizeCell]
     */
    customizeCell?: (options: {
      pivotCell?: PivotGridCell;
      excelCell?: any;
    }) => void;
  }
  /**
   * @deprecated Use PivotGridCell instead
   */
  export type ExcelPivotGridCell = PivotGridCell;
  /**
   * [descr:excelExporter.exportDataGrid(options)]
   */
  export function exportDataGrid(
    options: ExcelExportDataGridProps
  ): DevExpress.core.utils.DxPromise<CellRange>;
  /**
   * [descr:excelExporter.exportPivotGrid(options)]
   */
  export function exportPivotGrid(
    options: ExcelExportPivotGridProps
  ): DevExpress.core.utils.DxPromise<CellRange>;
  /**
   * [descr:PivotGridCell]
   */
  export interface PivotGridCell extends DevExpress.ui.dxPivotGrid.Cell {
    /**
     * [descr:PivotGridCell.area]
     */
    area?: string;
    /**
     * [descr:PivotGridCell.rowIndex]
     */
    rowIndex?: number;
    /**
     * [descr:PivotGridCell.columnIndex]
     */
    columnIndex?: number;
  }
}
declare module DevExpress.exporter {
  /**
   * [descr:ExcelFont]
   * @deprecated [depNote:ExcelFont]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface ExcelFont {
    /**
     * [descr:ExcelFont.bold]
     */
    bold?: boolean;
    /**
     * [descr:ExcelFont.color]
     */
    color?: string;
    /**
     * [descr:ExcelFont.italic]
     */
    italic?: boolean;
    /**
     * [descr:ExcelFont.name]
     */
    name?: string;
    /**
     * [descr:ExcelFont.size]
     */
    size?: number;
    /**
     * [descr:ExcelFont.underline]
     */
    underline?:
      | 'double'
      | 'doubleAccounting'
      | 'none'
      | 'single'
      | 'singleAccounting';
  }
}
declare module DevExpress.fileManagement {
  /**
   * [descr:CustomFileSystemProvider]
   */
  export class CustomFileSystemProvider extends FileSystemProviderBase {
    constructor(options?: Options);
  }
  /**
   * [descr:FileSystemError]
   */
  export class FileSystemError {
    constructor(
      errorCode?: number,
      fileSystemItem?: FileSystemItem,
      errorText?: string
    );
    /**
     * [descr:FileSystemError.fileSystemItem]
     */
    fileSystemItem?: FileSystemItem;

    /**
     * [descr:FileSystemError.errorCode]
     */
    errorCode?: number;

    /**
     * [descr:FileSystemError.errorText]
     */
    errorText?: string;
  }
  /**
   * [descr:FileSystemItem]
   */
  export class FileSystemItem {
    constructor(path: string, isDirectory: boolean, pathKeys?: Array<string>);

    /**
     * [descr:FileSystemItem.path]
     */
    path: string;

    /**
     * [descr:FileSystemItem.pathKeys]
     */
    pathKeys: Array<string>;

    /**
     * [descr:FileSystemItem.key]
     */
    key: string;

    /**
     * [descr:FileSystemItem.name]
     */
    name: string;

    /**
     * [descr:FileSystemItem.dateModified]
     */
    dateModified: Date;

    /**
     * [descr:FileSystemItem.size]
     */
    size: number;

    /**
     * [descr:FileSystemItem.isDirectory]
     */
    isDirectory: boolean;

    /**
     * [descr:FileSystemItem.hasSubDirectories]
     */
    hasSubDirectories: boolean;

    /**
     * [descr:FileSystemItem.thumbnail]
     */
    thumbnail: string;

    /**
     * [descr:FileSystemItem.dataItem]
     */
    dataItem: any;

    /**
     * [descr:FileSystemItem.getFileExtension()]
     */
    getFileExtension(): string;
  }
  /**
   * [descr:FileSystemProviderBase]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class FileSystemProviderBase {
    constructor(options?: FileSystemProviderBaseOptions);
    /**
     * [descr:FileSystemProviderBase.getItems()]
     */
    getItems(
      parentDirectory: FileSystemItem
    ): DevExpress.core.utils.DxPromise<Array<FileSystemItem>>;

    /**
     * [descr:FileSystemProviderBase.renameItem()]
     */
    renameItem(
      item: FileSystemItem,
      newName: string
    ): DevExpress.core.utils.DxPromise<any>;

    /**
     * [descr:FileSystemProviderBase.createDirectory()]
     */
    createDirectory(
      parentDirectory: FileSystemItem,
      name: string
    ): DevExpress.core.utils.DxPromise<any>;

    /**
     * [descr:FileSystemProviderBase.deleteItems()]
     */
    deleteItems(
      items: Array<FileSystemItem>
    ): Array<DevExpress.core.utils.DxPromise<any>>;

    /**
     * [descr:FileSystemProviderBase.moveItems()]
     */
    moveItems(
      items: Array<FileSystemItem>,
      destinationDirectory: FileSystemItem
    ): Array<DevExpress.core.utils.DxPromise<any>>;

    /**
     * [descr:FileSystemProviderBase.copyItems()]
     */
    copyItems(
      items: Array<FileSystemItem>,
      destinationDirectory: FileSystemItem
    ): Array<DevExpress.core.utils.DxPromise<any>>;

    /**
     * [descr:FileSystemProviderBase.uploadFileChunk()]
     */
    uploadFileChunk(
      fileData: File,
      uploadInfo: UploadInfo,
      destinationDirectory: FileSystemItem
    ): DevExpress.core.utils.DxPromise<any>;

    /**
     * [descr:FileSystemProviderBase.abortFileUpload()]
     */
    abortFileUpload(
      fileData: File,
      uploadInfo: UploadInfo,
      destinationDirectory: FileSystemItem
    ): DevExpress.core.utils.DxPromise<any>;

    /**
     * [descr:FileSystemProviderBase.downloadItems()]
     */
    downloadItems(items: Array<FileSystemItem>): void;

    /**
     * [descr:FileSystemProviderBase.getItemsContent()]
     */
    getItemsContent(
      items: Array<FileSystemItem>
    ): DevExpress.core.utils.DxPromise<any>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface FileSystemProviderBaseOptions<T = FileSystemProviderBase> {
    /**
     * [descr:FileSystemProviderBaseOptions.dateModifiedExpr]
     */
    dateModifiedExpr?: string | Function;
    /**
     * [descr:FileSystemProviderBaseOptions.isDirectoryExpr]
     */
    isDirectoryExpr?: string | Function;
    /**
     * [descr:FileSystemProviderBaseOptions.keyExpr]
     */
    keyExpr?: string | Function;
    /**
     * [descr:FileSystemProviderBaseOptions.nameExpr]
     */
    nameExpr?: string | Function;
    /**
     * [descr:FileSystemProviderBaseOptions.sizeExpr]
     */
    sizeExpr?: string | Function;
    /**
     * [descr:FileSystemProviderBaseOptions.thumbnailExpr]
     */
    thumbnailExpr?: string | Function;
  }
  /**
   * [descr:ObjectFileSystemProvider]
   */
  export class ObjectFileSystemProvider extends FileSystemProviderBase {
    constructor(
      options?: DevExpress.fileManagement.ObjectFileSystemProvider.Options
    );
  }
  module ObjectFileSystemProvider {
    /**
     * [descr:Options]
     */
    export interface Options
      extends FileSystemProviderBaseOptions<ObjectFileSystemProvider> {
      /**
       * [descr:Options.contentExpr]
       */
      contentExpr?: string | Function;
      /**
       * [descr:Options.data]
       */
      data?: Array<any>;
      /**
       * [descr:Options.itemsExpr]
       */
      itemsExpr?: string | Function;
    }
  }
  /**
   * [descr:Options]
   */
  export interface Options
    extends FileSystemProviderBaseOptions<CustomFileSystemProvider> {
    /**
     * [descr:Options.abortFileUpload]
     */
    abortFileUpload?: (
      file: File,
      uploadInfo: UploadInfo,
      destinationDirectory: FileSystemItem
    ) => PromiseLike<any> | any;

    /**
     * [descr:Options.copyItem]
     */
    copyItem?: (
      item: FileSystemItem,
      destinationDirectory: FileSystemItem
    ) => PromiseLike<any> | any;

    /**
     * [descr:Options.createDirectory]
     */
    createDirectory?: (
      parentDirectory: FileSystemItem,
      name: string
    ) => PromiseLike<any> | any;

    /**
     * [descr:Options.deleteItem]
     */
    deleteItem?: (item: FileSystemItem) => PromiseLike<any> | any;

    /**
     * [descr:Options.downloadItems]
     */
    downloadItems?: (items: Array<FileSystemItem>) => void;

    /**
     * [descr:Options.getItems]
     */
    getItems?: (
      parentDirectory: FileSystemItem
    ) => PromiseLike<Array<any>> | Array<any>;

    /**
     * [descr:Options.getItemsContent]
     */
    getItemsContent?: (items: Array<FileSystemItem>) => PromiseLike<any> | any;

    /**
     * [descr:Options.hasSubDirectoriesExpr]
     */
    hasSubDirectoriesExpr?: string | Function;

    /**
     * [descr:Options.moveItem]
     */
    moveItem?: (
      item: FileSystemItem,
      destinationDirectory: FileSystemItem
    ) => PromiseLike<any> | any;

    /**
     * [descr:Options.renameItem]
     */
    renameItem?: (
      item: FileSystemItem,
      newName: string
    ) => PromiseLike<any> | any;

    /**
     * [descr:Options.uploadFileChunk]
     */
    uploadFileChunk?: (
      file: File,
      uploadInfo: UploadInfo,
      destinationDirectory: FileSystemItem
    ) => PromiseLike<any> | any;
  }
  /**
   * [descr:RemoteFileSystemProvider]
   */
  export class RemoteFileSystemProvider extends FileSystemProviderBase {
    constructor(
      options?: DevExpress.fileManagement.RemoteFileSystemProvider.Options
    );
  }
  module RemoteFileSystemProvider {
    /**
     * [descr:Options]
     */
    export interface Options
      extends FileSystemProviderBaseOptions<RemoteFileSystemProvider> {
      /**
       * [descr:Options.beforeAjaxSend]
       */
      beforeAjaxSend?: (options: {
        headers?: any;
        xhrFields?: any;
        formData?: any;
      }) => void;
      /**
       * [descr:Options.beforeSubmit]
       */
      beforeSubmit?: (options: { formData?: any }) => void;
      /**
       * [descr:Options.endpointUrl]
       */
      endpointUrl?: string;
      /**
       * [descr:Options.hasSubDirectoriesExpr]
       */
      hasSubDirectoriesExpr?: string | Function;
      /**
       * [descr:Options.requestHeaders]
       */
      requestHeaders?: any;
    }
  }
  /**
   * [descr:UploadInfo]
   */
  export interface UploadInfo {
    /**
     * [descr:UploadInfo.bytesUploaded]
     */
    bytesUploaded: number;

    /**
     * [descr:UploadInfo.chunkCount]
     */
    chunkCount: number;

    /**
     * [descr:UploadInfo.customData]
     */
    customData: any;

    /**
     * [descr:UploadInfo.chunkBlob]
     */
    chunkBlob: Blob;

    /**
     * [descr:UploadInfo.chunkIndex]
     */
    chunkIndex: number;
  }
}
declare module DevExpress.localization {
  /**
   * [descr:localization.formatDate(value, format)]
   */
  export function formatDate(value: Date, format: DevExpress.ui.Format): string;
  /**
   * [descr:localization.formatMessage(key, value)]
   */
  export function formatMessage(key: string, ...values: Array<string>): string;
  /**
   * [descr:localization.formatNumber(value, format)]
   */
  export function formatNumber(
    value: number,
    format: DevExpress.ui.Format
  ): string;
  /**
   * [descr:localization.loadMessages(messages)]
   */
  export function loadMessages(messages: any): void;
  /**
   * [descr:localization.locale()]
   */
  export function locale(): string;
  /**
   * [descr:localization.locale(locale)]
   */
  export function locale(locale: string): void;
  /**
   * [descr:localization.parseDate(text, format)]
   */
  export function parseDate(text: string, format: DevExpress.ui.Format): Date;
  /**
   * [descr:localization.parseNumber(text, format)]
   */
  export function parseNumber(
    text: string,
    format: DevExpress.ui.Format
  ): number;
}
declare module DevExpress.pdfExporter {
  /**
   * [descr:pdfExporter.exportDataGrid(options)]
   */
  export function exportDataGrid(
    options: PdfExportDataGridProps
  ): DevExpress.core.utils.DxPromise<void>;
  /**
   * [descr:pdfExporter.exportGantt(options)]
   */
  export function exportGantt(
    options: PdfExportGanttProps
  ): DevExpress.core.utils.DxPromise<any>;
  /**
   * [descr:PdfDataGridCell]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface PdfDataGridCell {
    /**
     * [descr:PdfDataGridCell.column]
     */
    column?: DevExpress.ui.dxDataGrid.Column;
    /**
     * [descr:PdfDataGridCell.data]
     */
    data?: any;
    /**
     * [descr:PdfDataGridCell.groupIndex]
     */
    groupIndex?: number;
    /**
     * [descr:PdfDataGridCell.groupSummaryItems]
     */
    groupSummaryItems?: Array<{
      /**
       * [descr:PdfDataGridCell.groupSummaryItems.name]
       */
      name?: string;
      /**
       * [descr:PdfDataGridCell.groupSummaryItems.value]
       */
      value?: any;
    }>;
    /**
     * [descr:PdfDataGridCell.rowType]
     */
    rowType?: string;
    /**
     * [descr:PdfDataGridCell.totalSummaryItemName]
     */
    totalSummaryItemName?: string;
    /**
     * [descr:PdfDataGridCell.value]
     */
    value?: any;
  }
  /**
   * [descr:PdfExportDataGridProps]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface PdfExportDataGridProps {
    /**
     * [descr:PdfExportDataGridProps.jsPDFDocument]
     */
    jsPDFDocument?: object;
    /**
     * [descr:PdfExportDataGridProps.autoTableOptions]
     */
    autoTableOptions?: object;
    /**
     * [descr:PdfExportDataGridProps.component]
     */
    component?: DevExpress.ui.dxDataGrid;
    /**
     * [descr:PdfExportDataGridProps.selectedRowsOnly]
     */
    selectedRowsOnly?: boolean;
    /**
     * [descr:PdfExportDataGridProps.keepColumnWidths]
     */
    keepColumnWidths?: boolean;
    /**
     * [descr:PdfExportDataGridProps.customizeCell]
     */
    customizeCell?: (options: {
      gridCell?: PdfDataGridCell;
      pdfCell?: any;
    }) => void;
    /**
     * [descr:PdfExportDataGridProps.loadPanel]
     */
    loadPanel?: ExportLoadPanel;
  }
  /**
   * [descr:PdfExportGanttProps]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface PdfExportGanttProps {
    /**
     * [descr:PdfExportGanttProps.createDocumentMethod]
     */
    createDocumentMethod?: (options: any) => object;
    /**
     * [descr:PdfExportGanttProps.jsPDFDocument]
     */
    jsPDFDocument?: object;
    /**
     * [descr:PdfExportGanttProps.component]
     */
    component?: DevExpress.ui.dxGantt;
    /**
     * [descr:PdfExportGanttProps.format]
     */
    format?: string | object;
    /**
     * [descr:PdfExportGanttProps.landscape]
     */
    landscape?: boolean;
    /**
     * [descr:PdfExportGanttProps.fileName]
     */
    fileName?: string;
    /**
     * [descr:PdfExportGanttProps.margins]
     */
    margins?: object;
    /**
     * [descr:PdfExportGanttProps.exportMode]
     */
    exportMode?: 'all' | 'treeList' | 'chart';
    /**
     * [descr:PdfExportGanttProps.dateRange]
     */
    dateRange?: 'all' | 'visible' | object;
  }
}
declare module DevExpress.ui {
  /**
   * [descr:AsyncRule]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface AsyncRule {
    /**
     * [descr:AsyncRule.ignoreEmptyValue]
     */
    ignoreEmptyValue?: boolean;
    /**
     * [descr:AsyncRule.message]
     */
    message?: string;
    /**
     * [descr:AsyncRule.reevaluate]
     */
    reevaluate?: boolean;
    /**
     * [descr:AsyncRule.type]
     */
    type: 'async';
    /**
     * [descr:AsyncRule.validationCallback]
     */
    validationCallback?: (options: ValidationCallbackData) => PromiseLike<any>;
  }
  /**
   * [descr:ColCountResponsible]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface ColCountResponsible {
    /**
     * [descr:ColCountResponsible.lg]
     */
    lg?: number;
    /**
     * [descr:ColCountResponsible.md]
     */
    md?: number;
    /**
     * [descr:ColCountResponsible.sm]
     */
    sm?: number;
    /**
     * [descr:ColCountResponsible.xs]
     */
    xs?: number;
  }
  /**
   * [descr:CollectionWidget]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class CollectionWidget<
    TProperties extends CollectionWidgetOptions<any, TItem, TKey>,
    TItem extends DevExpress.ui.CollectionWidget.ItemLike = any,
    TKey = any
  > extends Widget<TProperties> {
    getDataSource(): DevExpress.data.DataSource<TItem, TKey>;
  }
  module CollectionWidget {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    type ItemLike = string | CollectionWidgetItem | any;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface SelectionChangedInfo<TItem extends ItemLike = any> {
      readonly addedItems: Array<TItem>;
      readonly removedItems: Array<TItem>;
    }
  }
  /**
   * [descr:CollectionWidgetItem]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface CollectionWidgetItem {
    /**
     * [descr:CollectionWidgetItem.disabled]
     */
    disabled?: boolean;
    /**
     * [descr:CollectionWidgetItem.html]
     */
    html?: string;
    /**
     * [descr:CollectionWidgetItem.template]
     */
    template?:
      | DevExpress.core.template
      | ((
          itemData: this,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:CollectionWidgetItem.text]
     */
    text?: string;
    /**
     * [descr:CollectionWidgetItem.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface CollectionWidgetOptions<
    TComponent extends CollectionWidget<any, TItem, TKey> | any,
    TItem extends DevExpress.ui.CollectionWidget.ItemLike = any,
    TKey = any
  > extends WidgetOptions<TComponent> {
    /**
     * [descr:CollectionWidgetOptions.dataSource]
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<TItem, TKey>;
    /**
     * [descr:CollectionWidgetOptions.itemHoldTimeout]
     */
    itemHoldTimeout?: number;
    /**
     * [descr:CollectionWidgetOptions.itemTemplate]
     */
    itemTemplate?:
      | DevExpress.core.template
      | ((
          itemData: TItem,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:CollectionWidgetOptions.items]
     */
    items?: Array<TItem>;
    /**
     * [descr:CollectionWidgetOptions.keyExpr]
     */
    keyExpr?: string | Function;
    /**
     * [descr:CollectionWidgetOptions.noDataText]
     */
    noDataText?: string;
    /**
     * [descr:CollectionWidgetOptions.onItemClick]
     */
    onItemClick?:
      | ((
          e: DevExpress.events.NativeEventInfo<TComponent> &
            DevExpress.events.ItemInfo<TItem>
        ) => void)
      | string;
    /**
     * [descr:CollectionWidgetOptions.onItemContextMenu]
     */
    onItemContextMenu?: (
      e: DevExpress.events.NativeEventInfo<TComponent> &
        DevExpress.events.ItemInfo<TItem>
    ) => void;
    /**
     * [descr:CollectionWidgetOptions.onItemHold]
     */
    onItemHold?: (
      e: DevExpress.events.NativeEventInfo<TComponent> &
        DevExpress.events.ItemInfo<TItem>
    ) => void;
    /**
     * [descr:CollectionWidgetOptions.onItemRendered]
     */
    onItemRendered?: (
      e: DevExpress.events.NativeEventInfo<TComponent> &
        DevExpress.events.ItemInfo<TItem>
    ) => void;
    /**
     * [descr:CollectionWidgetOptions.onSelectionChanged]
     */
    onSelectionChanged?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.CollectionWidget.SelectionChangedInfo<TItem>
    ) => void;
    /**
     * [descr:CollectionWidgetOptions.selectedIndex]
     */
    selectedIndex?: number;
    /**
     * [descr:CollectionWidgetOptions.selectedItem]
     */
    selectedItem?: TItem;
    /**
     * [descr:CollectionWidgetOptions.selectedItemKeys]
     */
    selectedItemKeys?: Array<TKey>;
    /**
     * [descr:CollectionWidgetOptions.selectedItems]
     */
    selectedItems?: Array<TItem>;
  }
  /**
   * [descr:CompareRule]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface CompareRule {
    /**
     * [descr:CompareRule.comparisonTarget]
     */
    comparisonTarget?: () => any;
    /**
     * [descr:CompareRule.comparisonType]
     */
    comparisonType?: '!=' | '!==' | '<' | '<=' | '==' | '===' | '>' | '>=';
    /**
     * [descr:CompareRule.ignoreEmptyValue]
     */
    ignoreEmptyValue?: boolean;
    /**
     * [descr:CompareRule.message]
     */
    message?: string;
    /**
     * [descr:CompareRule.type]
     */
    type: 'compare';
  }
  export interface CustomDialogOptions {
    title?: string;
    messageHtml?: string;
    buttons?: Array<DevExpress.ui.dxButton.Properties>;
    showTitle?: boolean;
    message?: string;
    dragEnabled?: boolean;
  }
  /**
   * [descr:CustomRule]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface CustomRule {
    /**
     * [descr:CustomRule.ignoreEmptyValue]
     */
    ignoreEmptyValue?: boolean;
    /**
     * [descr:CustomRule.message]
     */
    message?: string;
    /**
     * [descr:CustomRule.reevaluate]
     */
    reevaluate?: boolean;
    /**
     * [descr:CustomRule.type]
     */
    type: 'custom';
    /**
     * [descr:CustomRule.validationCallback]
     */
    validationCallback?: (options: ValidationCallbackData) => boolean;
  }
  /**
   * [descr:DataChange]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface DataChange<TRowData = any, TKey = any> {
    /**
     * [descr:DataChange.key]
     */
    key: TKey;
    /**
     * [descr:DataChange.type]
     */
    type: 'insert' | 'update' | 'remove';
    /**
     * [descr:DataChange.data]
     */
    data: DevExpress.core.DeepPartial<TRowData>;
    /**
     * [descr:DataChange.insertAfterKey]
     */
    insertAfterKey?: TKey;
    /**
     * [descr:DataChange.insertBeforeKey]
     */
    insertBeforeKey?: TKey;
  }
  /**
   * [descr:DataExpressionMixin]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class DataExpressionMixin {
    constructor(options?: DataExpressionMixinOptions);
    getDataSource(): DevExpress.data.DataSource;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface DataExpressionMixinOptions<T = DataExpressionMixin> {
    /**
     * [descr:DataExpressionMixinOptions.dataSource]
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<
      CollectionWidgetItem | any
    >;
    /**
     * [descr:DataExpressionMixinOptions.displayExpr]
     */
    displayExpr?: string | ((item: any) => string);
    /**
     * [descr:DataExpressionMixinOptions.itemTemplate]
     */
    itemTemplate?:
      | DevExpress.core.template
      | ((
          itemData: any,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:DataExpressionMixinOptions.items]
     */
    items?: Array<CollectionWidgetItem | any>;
    /**
     * [descr:DataExpressionMixinOptions.value]
     */
    value?: any;
    /**
     * [descr:DataExpressionMixinOptions.valueExpr]
     */
    valueExpr?: string | ((item: any) => string | number | boolean);
  }
  /**
   * [descr:DraggableBase]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface DraggableBase {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface DraggableBaseOptions<TComponent>
    extends DOMComponentOptions<TComponent> {
    /**
     * [descr:DraggableBaseOptions.autoScroll]
     */
    autoScroll?: boolean;
    /**
     * [descr:DraggableBaseOptions.boundary]
     */
    boundary?: string | DevExpress.core.UserDefinedElement;
    /**
     * [descr:DraggableBaseOptions.container]
     */
    container?: string | DevExpress.core.UserDefinedElement;
    /**
     * [descr:DraggableBaseOptions.cursorOffset]
     */
    cursorOffset?:
      | string
      | {
          /**
           * [descr:DraggableBaseOptions.cursorOffset.x]
           */
          x?: number;
          /**
           * [descr:DraggableBaseOptions.cursorOffset.y]
           */
          y?: number;
        };
    /**
     * [descr:DraggableBaseOptions.data]
     */
    data?: any;
    /**
     * [descr:DraggableBaseOptions.dragDirection]
     */
    dragDirection?: 'both' | 'horizontal' | 'vertical';
    /**
     * [descr:DraggableBaseOptions.group]
     */
    group?: string;
    /**
     * [descr:DraggableBaseOptions.handle]
     */
    handle?: string;
    /**
     * [descr:DraggableBaseOptions.scrollSensitivity]
     */
    scrollSensitivity?: number;
    /**
     * [descr:DraggableBaseOptions.scrollSpeed]
     */
    scrollSpeed?: number;
  }
  /**
   * [descr:dxAccordion]
   */
  export class dxAccordion extends CollectionWidget<DevExpress.ui.dxAccordion.Properties> {
    /**
     * [descr:dxAccordion.collapseItem(index)]
     */
    collapseItem(index: number): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxAccordion.expandItem(index)]
     */
    expandItem(index: number): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxAccordion.updateDimensions()]
     */
    updateDimensions(): DevExpress.core.utils.DxPromise<void>;
  }
  module dxAccordion {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxAccordion>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxAccordion>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxAccordion>;
    export type ItemClickEvent =
      DevExpress.events.NativeEventInfo<dxAccordion> &
        DevExpress.events.ItemInfo;
    export type ItemContextMenuEvent =
      DevExpress.events.NativeEventInfo<dxAccordion> &
        DevExpress.events.ItemInfo;
    export type ItemHoldEvent = DevExpress.events.NativeEventInfo<dxAccordion> &
      DevExpress.events.ItemInfo;
    export type ItemRenderedEvent =
      DevExpress.events.NativeEventInfo<dxAccordion> &
        DevExpress.events.ItemInfo;
    export type ItemTitleClickEvent =
      DevExpress.events.NativeEventInfo<dxAccordion> &
        DevExpress.events.ItemInfo;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxAccordion> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends CollectionWidgetOptions<dxAccordion> {
      /**
       * [descr:Properties.animationDuration]
       */
      animationDuration?: number;
      /**
       * [descr:Properties.collapsible]
       */
      collapsible?: boolean;
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<
        string | Item | any
      >;
      /**
       * [descr:Properties.deferRendering]
       */
      deferRendering?: boolean;
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.height]
       */
      height?: number | string | (() => number | string);
      /**
       * [descr:Properties.hoverStateEnabled]
       */
      hoverStateEnabled?: boolean;
      /**
       * [descr:Properties.itemTemplate]
       */
      itemTemplate?:
        | DevExpress.core.template
        | ((
            itemData: any,
            itemIndex: number,
            itemElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.itemTitleTemplate]
       */
      itemTitleTemplate?:
        | DevExpress.core.template
        | ((
            itemData: any,
            itemIndex: number,
            itemElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.items]
       */
      items?: Array<string | Item | any>;
      /**
       * [descr:Properties.multiple]
       */
      multiple?: boolean;
      /**
       * [descr:Properties.onItemTitleClick]
       */
      onItemTitleClick?: ((e: ItemTitleClickEvent) => void) | string;
      /**
       * [descr:Properties.repaintChangesOnly]
       */
      repaintChangesOnly?: boolean;
      /**
       * [descr:Properties.selectedIndex]
       */
      selectedIndex?: number;
    }
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxAccordion> &
        DevExpress.ui.CollectionWidget.SelectionChangedInfo;
  }
  /**
   * [descr:dxActionSheet]
   */
  export class dxActionSheet extends CollectionWidget<DevExpress.ui.dxActionSheet.Properties> {
    /**
     * [descr:dxActionSheet.hide()]
     */
    hide(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxActionSheet.show()]
     */
    show(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxActionSheet.toggle(showing)]
     */
    toggle(showing: boolean): DevExpress.core.utils.DxPromise<void>;
  }
  module dxActionSheet {
    export type CancelClickEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxActionSheet>;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxActionSheet>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxActionSheet>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxActionSheet>;
    export type ItemClickEvent =
      DevExpress.events.NativeEventInfo<dxActionSheet> &
        DevExpress.events.ItemInfo;
    export type ItemContextMenuEvent =
      DevExpress.events.NativeEventInfo<dxActionSheet> &
        DevExpress.events.ItemInfo;
    export type ItemHoldEvent =
      DevExpress.events.NativeEventInfo<dxActionSheet> &
        DevExpress.events.ItemInfo;
    export type ItemRenderedEvent =
      DevExpress.events.NativeEventInfo<dxActionSheet> &
        DevExpress.events.ItemInfo;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxActionSheet> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends CollectionWidgetOptions<dxActionSheet> {
      /**
       * [descr:Properties.cancelText]
       */
      cancelText?: string;
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<
        string | Item | any
      >;
      /**
       * [descr:Properties.items]
       */
      items?: Array<string | Item | any>;
      /**
       * [descr:Properties.onCancelClick]
       */
      onCancelClick?: ((e: CancelClickEvent) => void) | string;
      /**
       * [descr:Properties.showCancelButton]
       */
      showCancelButton?: boolean;
      /**
       * [descr:Properties.showTitle]
       */
      showTitle?: boolean;
      /**
       * [descr:Properties.target]
       */
      target?: string | DevExpress.core.UserDefinedElement;
      /**
       * [descr:Properties.title]
       */
      title?: string;
      /**
       * [descr:Properties.usePopover]
       */
      usePopover?: boolean;
      /**
       * [descr:Properties.visible]
       */
      visible?: boolean;
    }
  }
  /**
   * [descr:dxAutocomplete]
   */
  export class dxAutocomplete extends dxDropDownList<DevExpress.ui.dxAutocomplete.Properties> {}
  module dxAutocomplete {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<dxAutocomplete>;
    export type ClosedEvent = DevExpress.events.EventInfo<dxAutocomplete>;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxAutocomplete>;
    export type CopyEvent = DevExpress.events.NativeEventInfo<dxAutocomplete>;
    export type CutEvent = DevExpress.events.NativeEventInfo<dxAutocomplete>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxAutocomplete>;
    export type DropDownButtonTemplateData =
      DevExpress.ui.dxDropDownEditor.DropDownButtonTemplateDataModel;
    export type EnterKeyEvent =
      DevExpress.events.NativeEventInfo<dxAutocomplete>;
    export type FocusInEvent =
      DevExpress.events.NativeEventInfo<dxAutocomplete>;
    export type FocusOutEvent =
      DevExpress.events.NativeEventInfo<dxAutocomplete>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxAutocomplete>;
    export type InputEvent = DevExpress.events.NativeEventInfo<dxAutocomplete>;
    export type ItemClickEvent =
      DevExpress.events.NativeEventInfo<dxAutocomplete> &
        DevExpress.events.ItemInfo;
    export type KeyDownEvent =
      DevExpress.events.NativeEventInfo<dxAutocomplete>;
    export type KeyPressEvent =
      DevExpress.events.NativeEventInfo<dxAutocomplete>;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<dxAutocomplete>;
    export type OpenedEvent = DevExpress.events.EventInfo<dxAutocomplete>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxAutocomplete> &
        DevExpress.events.ChangedOptionInfo;
    export type PasteEvent = DevExpress.events.NativeEventInfo<dxAutocomplete>;
    /**
     * [descr:Properties]
     */
    export interface Properties extends dxDropDownListOptions<dxAutocomplete> {
      /**
       * [descr:Properties.maxItemCount]
       */
      maxItemCount?: number;
      /**
       * [descr:Properties.minSearchLength]
       */
      minSearchLength?: number;
      /**
       * [descr:Properties.showDropDownButton]
       */
      showDropDownButton?: boolean;
      /**
       * [descr:Properties.value]
       */
      value?: string;

      /**
       * [descr:Properties.dropDownOptions]
       */
      dropDownOptions?: DevExpress.ui.dxPopup.Properties;
    }
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxAutocomplete> &
        DevExpress.ui.dxDropDownList.SelectionChangedInfo;
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxAutocomplete> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxBox]
   */
  export class dxBox extends CollectionWidget<DevExpress.ui.dxBox.Properties> {}
  module dxBox {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxBox>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxBox>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxBox>;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<dxBox> &
      DevExpress.events.ItemInfo;
    export type ItemContextMenuEvent =
      DevExpress.events.NativeEventInfo<dxBox> & DevExpress.events.ItemInfo;
    export type ItemHoldEvent = DevExpress.events.NativeEventInfo<dxBox> &
      DevExpress.events.ItemInfo;
    export type ItemRenderedEvent = DevExpress.events.NativeEventInfo<dxBox> &
      DevExpress.events.ItemInfo;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxBox> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends CollectionWidgetOptions<dxBox> {
      /**
       * [descr:Properties.align]
       */
      align?: 'center' | 'end' | 'space-around' | 'space-between' | 'start';
      /**
       * [descr:Properties.crossAlign]
       */
      crossAlign?: 'center' | 'end' | 'start' | 'stretch';
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<
        string | Item | any
      >;
      /**
       * [descr:Properties.direction]
       */
      direction?: 'col' | 'row';
      /**
       * [descr:Properties.items]
       */
      items?: Array<string | Item | any>;
    }
  }
  /**
   * [descr:dxButton]
   */
  export class dxButton extends Widget<DevExpress.ui.dxButton.Properties> {}
  module dxButton {
    export type ClickEvent = DevExpress.events.NativeEventInfo<dxButton> & {
      validationGroup?: any;
    };
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxButton>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxButton>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxButton>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxButton> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends WidgetOptions<dxButton> {
      /**
       * [descr:Properties.activeStateEnabled]
       */
      activeStateEnabled?: boolean;
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.hoverStateEnabled]
       */
      hoverStateEnabled?: boolean;
      /**
       * [descr:Properties.icon]
       */
      icon?: string;
      /**
       * [descr:Properties.onClick]
       */
      onClick?: (e: ClickEvent) => void;
      /**
       * [descr:Properties.stylingMode]
       */
      stylingMode?: 'text' | 'outlined' | 'contained';
      /**
       * [descr:Properties.template]
       */
      template?:
        | DevExpress.core.template
        | ((
            data: TemplateData,
            contentElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.text]
       */
      text?: string;
      /**
       * [descr:Properties.type]
       */
      type?: 'back' | 'danger' | 'default' | 'normal' | 'success';
      /**
       * [descr:Properties.useSubmitBehavior]
       */
      useSubmitBehavior?: boolean;
      /**
       * [descr:Properties.validationGroup]
       */
      validationGroup?: string;
    }
    export type TemplateData = {
      readonly text?: string;
      readonly icon?: string;
    };
  }
  /**
   * [descr:dxButtonGroup]
   */
  export class dxButtonGroup extends Widget<DevExpress.ui.dxButtonGroup.Properties> {}
  module dxButtonGroup {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxButtonGroup>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxButtonGroup>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxButtonGroup>;
    export type ItemClickEvent =
      DevExpress.events.NativeEventInfo<dxButtonGroup> &
        DevExpress.events.ItemInfo;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxButtonGroup> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends WidgetOptions<dxButtonGroup> {
      /**
       * [descr:Properties.buttonTemplate]
       */
      buttonTemplate?:
        | DevExpress.core.template
        | ((
            buttonData: any,
            buttonContent: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.hoverStateEnabled]
       */
      hoverStateEnabled?: boolean;
      /**
       * [descr:Properties.items]
       */
      items?: Array<Item>;
      /**
       * [descr:Properties.keyExpr]
       */
      keyExpr?: string | Function;
      /**
       * [descr:Properties.onItemClick]
       */
      onItemClick?: (e: ItemClickEvent) => void;
      /**
       * [descr:Properties.onSelectionChanged]
       */
      onSelectionChanged?: (e: SelectionChangedEvent) => void;
      /**
       * [descr:Properties.selectedItemKeys]
       */
      selectedItemKeys?: Array<any>;
      /**
       * [descr:Properties.selectedItems]
       */
      selectedItems?: Array<any>;
      /**
       * [descr:Properties.selectionMode]
       */
      selectionMode?: 'multiple' | 'single' | 'none';
      /**
       * [descr:Properties.stylingMode]
       */
      stylingMode?: 'text' | 'outlined' | 'contained';
    }
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxButtonGroup> &
        DevExpress.ui.CollectionWidget.SelectionChangedInfo;
  }
  /**
   * [descr:dxCalendar]
   */
  export class dxCalendar extends Editor<DevExpress.ui.dxCalendar.Properties> {}
  module dxCalendar {
    export type CellTemplateData = {
      readonly date: Date;
      readonly view: string;
      readonly text?: string;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ComponentDisabledDate<T> {
      component: T;
      readonly date: Date;
      readonly view: string;
    }
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxCalendar>;
    export type DisabledDate = ComponentDisabledDate<dxCalendar>;
    /**
     * [descr:Properties]
     */
    export interface Properties extends EditorOptions<dxCalendar> {
      /**
       * [descr:Properties.activeStateEnabled]
       */
      activeStateEnabled?: boolean;
      /**
       * [descr:Properties.cellTemplate]
       */
      cellTemplate?:
        | DevExpress.core.template
        | ((
            itemData: CellTemplateData,
            itemIndex: number,
            itemElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.dateSerializationFormat]
       */
      dateSerializationFormat?: string;
      /**
       * [descr:Properties.disabledDates]
       */
      disabledDates?: Array<Date> | ((data: DisabledDate) => boolean);
      /**
       * [descr:Properties.firstDayOfWeek]
       */
      firstDayOfWeek?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.hoverStateEnabled]
       */
      hoverStateEnabled?: boolean;
      /**
       * [descr:Properties.max]
       */
      max?: Date | number | string;
      /**
       * [descr:Properties.maxZoomLevel]
       */
      maxZoomLevel?: 'century' | 'decade' | 'month' | 'year';
      /**
       * [descr:Properties.min]
       */
      min?: Date | number | string;
      /**
       * [descr:Properties.minZoomLevel]
       */
      minZoomLevel?: 'century' | 'decade' | 'month' | 'year';
      /**
       * [descr:Properties.name]
       */
      name?: string;
      /**
       * [descr:Properties.showTodayButton]
       */
      showTodayButton?: boolean;
      /**
       * [descr:Properties.value]
       */
      value?: Date | number | string;
      /**
       * [descr:Properties.zoomLevel]
       */
      zoomLevel?: 'century' | 'decade' | 'month' | 'year';
    }
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxCalendar> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxCheckBox]
   */
  export class dxCheckBox extends Editor<dxCheckBoxOptions> {
    /**
     * [descr:dxCheckBox.blur()]
     */
    blur(): void;
  }
  module dxCheckBox {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxCheckBox>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxCheckBox>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxCheckBox>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxCheckBox> &
      DevExpress.events.ChangedOptionInfo;
    export type Properties = dxCheckBoxOptions;
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxCheckBox> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * @deprecated use Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxCheckBoxOptions extends EditorOptions<dxCheckBox> {
    /**
     * [descr:dxCheckBoxOptions.activeStateEnabled]
     */
    activeStateEnabled?: boolean;
    /**
     * [descr:dxCheckBoxOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxCheckBoxOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxCheckBoxOptions.iconSize]
     */
    iconSize?: number | string;
    /**
     * [descr:dxCheckBoxOptions.name]
     */
    name?: string;
    /**
     * [descr:dxCheckBoxOptions.text]
     */
    text?: string;
    /**
     * [descr:dxCheckBoxOptions.value]
     */
    value?: boolean | null | undefined;
  }
  /**
   * [descr:dxColorBox]
   */
  export class dxColorBox extends dxDropDownEditor<DevExpress.ui.dxColorBox.Properties> {}
  module dxColorBox {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<dxColorBox>;
    export type ClosedEvent = DevExpress.events.EventInfo<dxColorBox>;
    export type CopyEvent = DevExpress.events.NativeEventInfo<dxColorBox>;
    export type CutEvent = DevExpress.events.NativeEventInfo<dxColorBox>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxColorBox>;
    export type DropDownButtonTemplateData =
      DevExpress.ui.dxDropDownEditor.DropDownButtonTemplateDataModel;
    export type EnterKeyEvent = DevExpress.events.NativeEventInfo<dxColorBox>;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<dxColorBox>;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<dxColorBox>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxColorBox>;
    export type InputEvent = DevExpress.events.NativeEventInfo<dxColorBox>;
    export type KeyDownEvent = DevExpress.events.NativeEventInfo<dxColorBox>;
    export type KeyPressEvent = DevExpress.events.NativeEventInfo<dxColorBox>;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<dxColorBox>;
    export type OpenedEvent = DevExpress.events.EventInfo<dxColorBox>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxColorBox> &
      DevExpress.events.ChangedOptionInfo;
    export type PasteEvent = DevExpress.events.NativeEventInfo<dxColorBox>;
    /**
     * [descr:Properties]
     */
    export interface Properties extends dxDropDownEditorOptions<dxColorBox> {
      /**
       * [descr:Properties.applyButtonText]
       */
      applyButtonText?: string;
      /**
       * [descr:Properties.applyValueMode]
       */
      applyValueMode?: 'instantly' | 'useButtons';
      /**
       * [descr:Properties.cancelButtonText]
       */
      cancelButtonText?: string;
      /**
       * [descr:Properties.editAlphaChannel]
       */
      editAlphaChannel?: boolean;
      /**
       * [descr:Properties.fieldTemplate]
       */
      fieldTemplate?:
        | DevExpress.core.template
        | ((
            value: string,
            fieldElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.keyStep]
       */
      keyStep?: number;
      /**
       * [descr:Properties.value]
       */
      value?: string;

      /**
       * [descr:Properties.dropDownOptions]
       */
      dropDownOptions?: DevExpress.ui.dxPopup.Properties;
    }
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxColorBox> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxContextMenu]
   */
  export class dxContextMenu extends dxMenuBase<DevExpress.ui.dxContextMenu.Properties> {
    /**
     * [descr:dxContextMenu.hide()]
     */
    hide(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxContextMenu.show()]
     */
    show(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxContextMenu.toggle(showing)]
     */
    toggle(showing: boolean): DevExpress.core.utils.DxPromise<void>;
  }
  module dxContextMenu {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxContextMenu>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxContextMenu>;
    export type HiddenEvent = DevExpress.events.EventInfo<dxContextMenu>;
    export type HidingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxContextMenu>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxContextMenu>;
    export type ItemClickEvent =
      DevExpress.events.NativeEventInfo<dxContextMenu> &
        DevExpress.events.ItemInfo;
    export type ItemContextMenuEvent =
      DevExpress.events.NativeEventInfo<dxContextMenu> &
        DevExpress.events.ItemInfo;
    export type ItemRenderedEvent =
      DevExpress.events.NativeEventInfo<dxContextMenu> &
        DevExpress.events.ItemInfo;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxContextMenu> &
        DevExpress.events.ChangedOptionInfo;
    export type PositioningEvent =
      DevExpress.events.NativeEventInfo<dxContextMenu> & {
        readonly position: PositionConfig;
      };
    /**
     * [descr:Properties]
     */
    export interface Properties extends dxMenuBaseOptions<dxContextMenu> {
      /**
       * [descr:Properties.closeOnOutsideClick]
       */
      closeOnOutsideClick?:
        | boolean
        | ((event: DevExpress.events.DxEvent) => boolean);
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<Item>;
      /**
       * [descr:Properties.items]
       */
      items?: Array<Item>;
      /**
       * [descr:Properties.onHidden]
       */
      onHidden?: (e: HiddenEvent) => void;
      /**
       * [descr:Properties.onHiding]
       */
      onHiding?: (e: HidingEvent) => void;
      /**
       * [descr:Properties.onPositioning]
       */
      onPositioning?: (e: PositioningEvent) => void;
      /**
       * [descr:Properties.onShowing]
       */
      onShowing?: (e: ShowingEvent) => void;
      /**
       * [descr:Properties.onShown]
       */
      onShown?: (e: ShownEvent) => void;
      /**
       * [descr:Properties.position]
       */
      position?: PositionConfig;
      /**
       * [descr:Properties.showEvent]
       */
      showEvent?:
        | {
            /**
             * [descr:Properties.showEvent.delay]
             */
            delay?: number;
            /**
             * [descr:Properties.showEvent.name]
             */
            name?: string;
          }
        | string;
      /**
       * [descr:Properties.submenuDirection]
       */
      submenuDirection?: 'auto' | 'left' | 'right';
      /**
       * [descr:Properties.target]
       */
      target?: string | DevExpress.core.UserDefinedElement;
      /**
       * [descr:Properties.visible]
       */
      visible?: boolean;
    }
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxContextMenu> &
        DevExpress.ui.CollectionWidget.SelectionChangedInfo;
    export type ShowingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxContextMenu>;
    export type ShownEvent = DevExpress.events.EventInfo<dxContextMenu>;
  }
  /**
   * [descr:dxDataGrid]
   */
  export class dxDataGrid<TRowData = any, TKey = any>
    extends Widget<DevExpress.ui.dxDataGrid.Properties<TRowData, TKey>>
    implements GridBase<TRowData, TKey>
  {
    /**
     * [descr:dxDataGrid.addColumn(columnOptions)]
     */
    addColumn(
      columnOptions: DevExpress.ui.dxDataGrid.Column<TRowData, TKey> | string
    ): void;
    /**
     * [descr:dxDataGrid.addRow()]
     */
    addRow(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxDataGrid.clearGrouping()]
     */
    clearGrouping(): void;
    /**
     * [descr:dxDataGrid.collapseAll(groupIndex)]
     */
    collapseAll(groupIndex?: number): void;
    /**
     * [descr:dxDataGrid.collapseRow(key)]
     */
    collapseRow(key: TKey): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxDataGrid.expandAll(groupIndex)]
     */
    expandAll(groupIndex?: number): void;
    /**
     * [descr:dxDataGrid.expandRow(key)]
     */
    expandRow(key: TKey): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxDataGrid.exportToExcel(selectionOnly)]
     * @deprecated [depNote:dxDataGrid.exportToExcel(selectionOnly)]
     */
    exportToExcel(selectionOnly: boolean): void;
    /**
     * [descr:dxDataGrid.getSelectedRowKeys()]
     */
    getSelectedRowKeys(): Array<TKey> &
      DevExpress.core.utils.DxPromise<Array<TKey>>;
    /**
     * [descr:dxDataGrid.getSelectedRowsData()]
     */
    getSelectedRowsData(): Array<TRowData> &
      DevExpress.core.utils.DxPromise<Array<TRowData>>;
    /**
     * [descr:dxDataGrid.getTotalSummaryValue(summaryItemName)]
     */
    getTotalSummaryValue(summaryItemName: string): any;
    /**
     * [descr:dxDataGrid.getVisibleColumns()]
     */
    getVisibleColumns(): Array<DevExpress.ui.dxDataGrid.Column<TRowData, TKey>>;
    /**
     * [descr:dxDataGrid.getVisibleColumns(headerLevel)]
     */
    getVisibleColumns(
      headerLevel: number
    ): Array<DevExpress.ui.dxDataGrid.Column<TRowData, TKey>>;
    /**
     * [descr:dxDataGrid.getVisibleRows()]
     */
    getVisibleRows(): Array<DevExpress.ui.dxDataGrid.Row<TRowData, TKey>>;
    /**
     * [descr:dxDataGrid.isRowExpanded(key)]
     */
    isRowExpanded(key: TKey): boolean;
    /**
     * [descr:dxDataGrid.isRowSelected(data)]
     */
    isRowSelected(data: TRowData): boolean;
    isRowSelected(key: TKey): boolean;
    /**
     * [descr:dxDataGrid.totalCount()]
     */
    totalCount(): number;

    beginCustomLoading(messageText: string): void;
    byKey(key: TKey): DevExpress.core.utils.DxPromise<TRowData>;
    cancelEditData(): void;
    cellValue(rowIndex: number, dataField: string): any;
    cellValue(rowIndex: number, dataField: string, value: any): void;
    cellValue(rowIndex: number, visibleColumnIndex: number): any;
    cellValue(rowIndex: number, visibleColumnIndex: number, value: any): void;
    clearFilter(): void;
    clearFilter(filterName: string): void;
    clearSelection(): void;
    clearSorting(): void;
    closeEditCell(): void;
    collapseAdaptiveDetailRow(): void;
    columnCount(): number;
    columnOption(id: number | string): any;
    columnOption(id: number | string, optionName: string): any;
    columnOption(
      id: number | string,
      optionName: string,
      optionValue: any
    ): void;
    columnOption(id: number | string, options: any): void;
    deleteColumn(id: number | string): void;
    deleteRow(rowIndex: number): void;
    deselectAll(): DevExpress.core.utils.DxPromise<void>;
    deselectRows(
      keys: Array<TKey>
    ): DevExpress.core.utils.DxPromise<Array<TRowData>>;
    editCell(rowIndex: number, dataField: string): void;
    editCell(rowIndex: number, visibleColumnIndex: number): void;
    editRow(rowIndex: number): void;
    endCustomLoading(): void;
    expandAdaptiveDetailRow(key: TKey): void;
    filter(): any;
    filter(filterExpr: any): void;
    focus(): void;
    focus(element: DevExpress.core.UserDefinedElement): void;
    getCellElement(
      rowIndex: number,
      dataField: string
    ): DevExpress.core.DxElement | undefined;
    getCellElement(
      rowIndex: number,
      visibleColumnIndex: number
    ): DevExpress.core.DxElement | undefined;
    getCombinedFilter(): any;
    getCombinedFilter(returnDataField: boolean): any;
    getDataSource(): DevExpress.data.DataSource<TRowData, TKey>;
    getKeyByRowIndex(rowIndex: number): TKey | undefined;
    getRowElement(
      rowIndex: number
    ): DevExpress.core.UserDefinedElementsArray | undefined;
    getRowIndexByKey(key: TKey): number;
    getScrollable(): dxScrollable;
    getVisibleColumnIndex(id: number | string): number;
    hasEditData(): boolean;
    hideColumnChooser(): void;
    isAdaptiveDetailRowExpanded(key: TKey): boolean;
    isRowFocused(key: TKey): boolean;
    keyOf(obj: TRowData): TKey;
    navigateToRow(key: TKey): DevExpress.core.utils.DxPromise<void>;
    pageCount(): number;
    pageIndex(): number;
    pageIndex(newIndex: number): DevExpress.core.utils.DxPromise<void>;
    pageSize(): number;
    pageSize(value: number): void;
    refresh(): DevExpress.core.utils.DxPromise<void>;
    refresh(changesOnly: boolean): DevExpress.core.utils.DxPromise<void>;
    repaintRows(rowIndexes: Array<number>): void;
    saveEditData(): DevExpress.core.utils.DxPromise<void>;
    searchByText(text: string): void;
    selectAll(): DevExpress.core.utils.DxPromise<void>;
    selectRows(
      keys: Array<TKey>,
      preserve: boolean
    ): DevExpress.core.utils.DxPromise<Array<TRowData>>;
    selectRowsByIndexes(
      indexes: Array<number>
    ): DevExpress.core.utils.DxPromise<Array<TRowData>>;
    showColumnChooser(): void;
    state(): any;
    state(state: any): void;
    undeleteRow(rowIndex: number): void;
    updateDimensions(): void;
  }
  module dxDataGrid {
    export type AdaptiveDetailRowPreparingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      AdaptiveDetailRowPreparingInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface AdaptiveDetailRowPreparingInfo {
      readonly formOptions: any;
    }
    export type CellClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly value?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly cellElement: DevExpress.core.DxElement;
      readonly row: Row<TRowData, TKey>;
    };
    export type CellDblClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly value?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly cellElement: DevExpress.core.DxElement;
      readonly row: Row<TRowData, TKey>;
    };
    export type CellHoverChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly eventType: string;
      readonly data: TRowData;
      readonly key: TKey;
      readonly value?: any;
      readonly text: string;
      readonly displayValue?: any;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly rowType: string;
      readonly cellElement: DevExpress.core.DxElement;
      readonly row: Row<TRowData, TKey>;
    };
    export type CellPreparedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly value?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly row: Row<TRowData, TKey>;
      readonly isSelected?: boolean;
      readonly isExpanded?: boolean;
      readonly isNewRow?: boolean;
      readonly cellElement: DevExpress.core.DxElement;
      readonly watch?: Function;
      readonly oldValue?: any;
    };
    /**
     * [descr:Column]
     */
    export interface Column<TRowData = any, TKey = any>
      extends ColumnBase<TRowData> {
      /**
       * [descr:dxDataGridColumn.allowExporting]
       */
      allowExporting?: boolean;
      /**
       * [descr:dxDataGridColumn.allowGrouping]
       */
      allowGrouping?: boolean;
      /**
       * [descr:dxDataGridColumn.autoExpandGroup]
       */
      autoExpandGroup?: boolean;
      /**
       * [descr:dxDataGridColumn.buttons]
       */
      buttons?: Array<
        | 'cancel'
        | 'delete'
        | 'edit'
        | 'save'
        | 'undelete'
        | ColumnButton<TRowData, TKey>
      >;
      /**
       * [descr:dxDataGridColumn.calculateGroupValue]
       */
      calculateGroupValue?: string | ((rowData: TRowData) => any);
      /**
       * [descr:dxDataGridColumn.cellTemplate]
       */
      cellTemplate?:
        | DevExpress.core.template
        | ((
            cellElement: DevExpress.core.DxElement,
            cellInfo: ColumnCellTemplateData<TRowData, TKey>
          ) => any);
      /**
       * [descr:dxDataGridColumn.columns]
       */
      columns?: Array<Column<TRowData, TKey> | string>;
      /**
       * [descr:dxDataGridColumn.editCellTemplate]
       */
      editCellTemplate?:
        | DevExpress.core.template
        | ((
            cellElement: DevExpress.core.DxElement,
            cellInfo: ColumnEditCellTemplateData<TRowData, TKey>
          ) => any);
      /**
       * [descr:dxDataGridColumn.groupCellTemplate]
       */
      groupCellTemplate?:
        | DevExpress.core.template
        | ((
            cellElement: DevExpress.core.DxElement,
            cellInfo: ColumnGroupCellTemplateData<TRowData, TKey>
          ) => any);
      /**
       * [descr:dxDataGridColumn.groupIndex]
       */
      groupIndex?: number;
      /**
       * [descr:dxDataGridColumn.headerCellTemplate]
       */
      headerCellTemplate?:
        | DevExpress.core.template
        | ((
            columnHeader: DevExpress.core.DxElement,
            headerInfo: ColumnHeaderCellTemplateData<TRowData, TKey>
          ) => any);
      /**
       * [descr:dxDataGridColumn.showWhenGrouped]
       */
      showWhenGrouped?: boolean;
      /**
       * [descr:dxDataGridColumn.type]
       */
      type?:
        | 'adaptive'
        | 'buttons'
        | 'detailExpand'
        | 'groupExpand'
        | 'selection'
        | 'drag';
    }
    /**
     * [descr:GridBaseColumn]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ColumnBase<TRowData = any> {
      /**
       * [descr:GridBaseColumn.alignment]
       */
      alignment?: 'center' | 'left' | 'right';
      /**
       * [descr:GridBaseColumn.allowEditing]
       */
      allowEditing?: boolean;
      /**
       * [descr:GridBaseColumn.allowFiltering]
       */
      allowFiltering?: boolean;
      /**
       * [descr:GridBaseColumn.allowFixing]
       */
      allowFixing?: boolean;
      /**
       * [descr:GridBaseColumn.allowHeaderFiltering]
       */
      allowHeaderFiltering?: boolean;
      /**
       * [descr:GridBaseColumn.allowHiding]
       */
      allowHiding?: boolean;
      /**
       * [descr:GridBaseColumn.allowReordering]
       */
      allowReordering?: boolean;
      /**
       * [descr:GridBaseColumn.allowResizing]
       */
      allowResizing?: boolean;
      /**
       * [descr:GridBaseColumn.allowSearch]
       */
      allowSearch?: boolean;
      /**
       * [descr:GridBaseColumn.allowSorting]
       */
      allowSorting?: boolean;
      /**
       * [descr:GridBaseColumn.calculateCellValue]
       */
      calculateCellValue?: (rowData: TRowData) => any;
      /**
       * [descr:GridBaseColumn.calculateDisplayValue]
       */
      calculateDisplayValue?: string | ((rowData: TRowData) => any);
      /**
       * [descr:GridBaseColumn.calculateFilterExpression]
       */
      calculateFilterExpression?: (
        filterValue: any,
        selectedFilterOperation: string,
        target: string
      ) => string | Array<any> | Function;
      /**
       * [descr:GridBaseColumn.calculateSortValue]
       */
      calculateSortValue?: string | ((rowData: TRowData) => any);
      /**
       * [descr:GridBaseColumn.caption]
       */
      caption?: string;
      /**
       * [descr:GridBaseColumn.cssClass]
       */
      cssClass?: string;
      /**
       * [descr:GridBaseColumn.customizeText]
       */
      customizeText?: (cellInfo: ColumnCustomizeTextArg) => string;
      /**
       * [descr:GridBaseColumn.dataField]
       */
      dataField?: string;
      /**
       * [descr:GridBaseColumn.dataType]
       */
      dataType?:
        | 'string'
        | 'number'
        | 'date'
        | 'boolean'
        | 'object'
        | 'datetime';
      /**
       * [descr:GridBaseColumn.editorOptions]
       */
      editorOptions?: any;
      /**
       * [descr:GridBaseColumn.encodeHtml]
       */
      encodeHtml?: boolean;
      /**
       * [descr:GridBaseColumn.falseText]
       */
      falseText?: string;
      /**
       * [descr:GridBaseColumn.filterOperations]
       */
      filterOperations?: Array<
        | '='
        | '<>'
        | '<'
        | '<='
        | '>'
        | '>='
        | 'contains'
        | 'endswith'
        | 'isblank'
        | 'isnotblank'
        | 'notcontains'
        | 'startswith'
        | 'between'
        | 'anyof'
        | 'noneof'
      >;
      /**
       * [descr:GridBaseColumn.filterType]
       */
      filterType?: 'exclude' | 'include';
      /**
       * [descr:GridBaseColumn.filterValue]
       */
      filterValue?: any;
      /**
       * [descr:GridBaseColumn.filterValues]
       */
      filterValues?: Array<any>;
      /**
       * [descr:GridBaseColumn.fixed]
       */
      fixed?: boolean;
      /**
       * [descr:GridBaseColumn.fixedPosition]
       */
      fixedPosition?: 'left' | 'right';
      /**
       * [descr:GridBaseColumn.formItem]
       */
      formItem?: DevExpress.ui.dxForm.SimpleItem;
      /**
       * [descr:GridBaseColumn.format]
       */
      format?: Format;
      /**
       * [descr:GridBaseColumn.headerFilter]
       */
      headerFilter?: ColumnHeaderFilter;
      /**
       * [descr:GridBaseColumn.hidingPriority]
       */
      hidingPriority?: number;
      /**
       * [descr:GridBaseColumn.isBand]
       */
      isBand?: boolean;
      /**
       * [descr:GridBaseColumn.lookup]
       */
      lookup?: ColumnLookup;
      /**
       * [descr:GridBaseColumn.minWidth]
       */
      minWidth?: number;
      /**
       * [descr:GridBaseColumn.name]
       */
      name?: string;
      /**
       * [descr:GridBaseColumn.ownerBand]
       */
      ownerBand?: number;
      /**
       * [descr:GridBaseColumn.renderAsync]
       */
      renderAsync?: boolean;
      /**
       * [descr:GridBaseColumn.selectedFilterOperation]
       */
      selectedFilterOperation?:
        | '<'
        | '<='
        | '<>'
        | '='
        | '>'
        | '>='
        | 'between'
        | 'contains'
        | 'endswith'
        | 'notcontains'
        | 'startswith';
      /**
       * [descr:GridBaseColumn.setCellValue]
       */
      setCellValue?: (
        newData: DevExpress.core.DeepPartial<TRowData>,
        value: any,
        currentRowData: TRowData
      ) => void | PromiseLike<void>;
      /**
       * [descr:GridBaseColumn.showEditorAlways]
       */
      showEditorAlways?: boolean;
      /**
       * [descr:GridBaseColumn.showInColumnChooser]
       */
      showInColumnChooser?: boolean;
      /**
       * [descr:GridBaseColumn.sortIndex]
       */
      sortIndex?: number;
      /**
       * [descr:GridBaseColumn.sortOrder]
       */
      sortOrder?: 'asc' | 'desc';
      /**
       * [descr:GridBaseColumn.sortingMethod]
       */
      sortingMethod?: (value1: any, value2: any) => number;
      /**
       * [descr:GridBaseColumn.trueText]
       */
      trueText?: string;
      /**
       * [descr:GridBaseColumn.validationRules]
       */
      validationRules?: Array<
        | RequiredRule
        | NumericRule
        | RangeRule
        | StringLengthRule
        | CustomRule
        | CompareRule
        | PatternRule
        | EmailRule
        | AsyncRule
      >;
      /**
       * [descr:GridBaseColumn.visible]
       */
      visible?: boolean;
      /**
       * [descr:GridBaseColumn.visibleIndex]
       */
      visibleIndex?: number;
      /**
       * [descr:GridBaseColumn.width]
       */
      width?: number | string;
    }
    /**
     * [descr:ColumnButton]
     */
    export interface ColumnButton<TRowData = any, TKey = any>
      extends ColumnButtonBase {
      /**
       * [descr:dxDataGridColumnButton.name]
       */
      name?: 'cancel' | 'delete' | 'edit' | 'save' | 'undelete' | string;
      /**
       * [descr:dxDataGridColumnButton.onClick]
       */
      onClick?: (e: ColumnButtonClickEvent<TRowData, TKey>) => void;
      /**
       * [descr:dxDataGridColumnButton.template]
       */
      template?:
        | DevExpress.core.template
        | ((
            cellElement: DevExpress.core.DxElement,
            cellInfo: ColumnButtonTemplateData<TRowData, TKey>
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:dxDataGridColumnButton.visible]
       */
      visible?:
        | boolean
        | ((options: {
            component?: dxDataGrid<TRowData, TKey>;
            row?: Row<TRowData, TKey>;
            column?: Column<TRowData, TKey>;
          }) => boolean);
      /**
       * [descr:dxDataGridColumnButton.disabled]
       */
      disabled?:
        | boolean
        | ((options: {
            component?: dxDataGrid<TRowData, TKey>;
            row?: Row<TRowData, TKey>;
            column?: Column<TRowData, TKey>;
          }) => boolean);
    }
    /**
     * [descr:GridBaseColumnButton]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ColumnButtonBase {
      /**
       * [descr:GridBaseColumnButton.cssClass]
       */
      cssClass?: string;
      /**
       * [descr:GridBaseColumnButton.hint]
       */
      hint?: string;
      /**
       * [descr:GridBaseColumnButton.icon]
       */
      icon?: string;
      /**
       * [descr:GridBaseColumnButton.text]
       */
      text?: string;
    }
    export type ColumnButtonClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxDataGrid<TRowData, TKey>> & {
      row?: Row<TRowData, TKey>;
      column?: Column<TRowData, TKey>;
    };
    export type ColumnButtonTemplateData<TRowData = any, TKey = any> = {
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly data?: TRowData;
      readonly key?: TKey;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly row: Row<TRowData, TKey>;
    };
    export type ColumnCellTemplateData<TRowData = any, TKey = any> = {
      readonly data?: TRowData;
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly value?: any;
      readonly oldValue?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly row: Row<TRowData, TKey>;
      readonly rowType: string;
      readonly watch?: Function;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ColumnChooser {
      /**
       * [descr:GridBaseOptions.columnChooser.allowSearch]
       */
      allowSearch?: boolean;
      /**
       * [descr:GridBaseOptions.columnChooser.emptyPanelText]
       */
      emptyPanelText?: string;
      /**
       * [descr:GridBaseOptions.columnChooser.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:GridBaseOptions.columnChooser.height]
       */
      height?: number;
      /**
       * [descr:GridBaseOptions.columnChooser.mode]
       */
      mode?: 'dragAndDrop' | 'select';
      /**
       * [descr:GridBaseOptions.columnChooser.searchTimeout]
       */
      searchTimeout?: number;
      /**
       * [descr:GridBaseOptions.columnChooser.title]
       */
      title?: string;
      /**
       * [descr:GridBaseOptions.columnChooser.width]
       */
      width?: number;
      /**
       * [descr:GridBaseOptions.columnChooser.sortOrder]
       */
      sortOrder?: 'asc' | 'desc';
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ColumnCustomizeTextArg {
      value?: string | number | Date;
      valueText?: string;
      target?: string;
      groupInterval?: string | number;
    }
    export type ColumnEditCellTemplateData<TRowData = any, TKey = any> = {
      readonly setValue?: any;
      readonly data?: TRowData;
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly value?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly row: Row<TRowData, TKey>;
      readonly rowType: string;
      readonly watch?: Function;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ColumnFixing {
      /**
       * [descr:GridBaseOptions.columnFixing.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:GridBaseOptions.columnFixing.texts]
       */
      texts?: ColumnFixingTexts;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ColumnFixingTexts {
      /**
       * [descr:GridBaseOptions.columnFixing.texts.fix]
       */
      fix?: string;
      /**
       * [descr:GridBaseOptions.columnFixing.texts.leftPosition]
       */
      leftPosition?: string;
      /**
       * [descr:GridBaseOptions.columnFixing.texts.rightPosition]
       */
      rightPosition?: string;
      /**
       * [descr:GridBaseOptions.columnFixing.texts.unfix]
       */
      unfix?: string;
    }
    export type ColumnGroupCellTemplateData<TRowData = any, TKey = any> = {
      readonly data?: TRowData;
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly value?: any;
      readonly text: string;
      readonly displayValue?: any;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly row: Row<TRowData, TKey>;
      readonly summaryItems: Array<any>;
      readonly groupContinuesMessage?: string;
      readonly groupContinuedMessage?: string;
    };
    export type ColumnHeaderCellTemplateData<TRowData = any, TKey = any> = {
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ColumnHeaderFilter {
      /**
       * [descr:GridBaseColumn.headerFilter.allowSearch]
       */
      allowSearch?: boolean;
      /**
       * [descr:GridBaseColumn.headerFilter.dataSource]
       */
      dataSource?:
        | DevExpress.ui.dxFilterBuilder.FilterLookupDataSource<any>
        | ((options: {
            component?: any;
            dataSource?: DevExpress.data.DataSource.Options;
          }) => void);
      /**
       * [descr:GridBaseColumn.headerFilter.groupInterval]
       */
      groupInterval?:
        | 'day'
        | 'hour'
        | 'minute'
        | 'month'
        | 'quarter'
        | 'second'
        | 'year'
        | number;
      /**
       * [descr:GridBaseColumn.headerFilter.height]
       */
      height?: number;
      /**
       * [descr:GridBaseColumn.headerFilter.searchMode]
       */
      searchMode?: 'contains' | 'startswith' | 'equals';
      /**
       * [descr:GridBaseColumn.headerFilter.width]
       */
      width?: number;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ColumnLookup {
      /**
       * [descr:GridBaseColumn.lookup.allowClearing]
       */
      allowClearing?: boolean;
      /**
       * [descr:GridBaseColumn.lookup.dataSource]
       */
      dataSource?:
        | DevExpress.ui.dxFilterBuilder.FilterLookupDataSource<any>
        | ((options: {
            data?: any;
            key?: any;
          }) => DevExpress.ui.dxFilterBuilder.FilterLookupDataSource<any>);
      /**
       * [descr:GridBaseColumn.lookup.displayExpr]
       */
      displayExpr?: string | ((data: any) => string);
      /**
       * [descr:GridBaseColumn.lookup.valueExpr]
       */
      valueExpr?: string;
      /**
       * [descr:GridBaseColumn.lookup.calculateCellValue]
       */
      calculateCellValue?: (rowData: any) => any;
    }
    export type ContentReadyEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>>;
    export type ContextMenuPreparingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      items?: Array<any>;
      readonly target: string;
      readonly targetElement: DevExpress.core.DxElement;
      readonly columnIndex: number;
      readonly column?: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly row?: Row<TRowData, TKey>;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface CustomSummaryInfo<TRowData = any, TKey = any> {
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly name?: string;
      readonly summaryProcess: string;
      readonly value?: any;
      totalValue?: any;
      readonly groupIndex?: number;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface DataChangeInfo<TRowData = any, TKey = any> {
      readonly changes: Array<DataChange<TRowData, TKey>>;
    }
    export type DataErrorOccurredEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      DataErrorOccurredInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface DataErrorOccurredInfo {
      readonly error?: Error;
    }
    export type DataRowTemplateData<TRowData = any, TKey = any> = {
      readonly key: TKey;
      readonly data: TRowData;
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly values: Array<any>;
      readonly rowIndex: number;
      readonly columns: Array<Column<TRowData, TKey>>;
      readonly isSelected?: boolean;
      readonly isExpanded?: boolean;
    };
    export type DisposingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface DragDropInfo {
      readonly dropInsideItem: boolean;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface DragReorderInfo {
      readonly dropInsideItem: boolean;
      promise?: PromiseLike<void>;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface DragStartEventInfo<
      T extends GridBase<TRowData, TKey>,
      TRowData = any,
      TKey = any
    > {
      readonly component: T;
      readonly event: DevExpress.events.DxEvent;
      itemData?: TRowData;
      readonly itemElement: DevExpress.core.DxElement;
      readonly fromIndex: number;
      readonly fromData?: any;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    type dxDataGridDefaultToolbarItemName =
      | 'addRowButton'
      | 'applyFilterButton'
      | 'columnChooserButton'
      | 'exportButton'
      | 'groupPanel'
      | 'revertButton'
      | 'saveButton'
      | 'searchPanel';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface dxDataGridSortByGroupSummaryInfoItem {
      /**
       * [descr:dxDataGridOptions.sortByGroupSummaryInfo.groupColumn]
       */
      groupColumn?: string;
      /**
       * [descr:dxDataGridOptions.sortByGroupSummaryInfo.sortOrder]
       */
      sortOrder?: 'asc' | 'desc';
      /**
       * [descr:dxDataGridOptions.sortByGroupSummaryInfo.summaryItem]
       */
      summaryItem?: string | number;
    }
    export type EditCanceledEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      DataChangeInfo<TRowData, TKey>;
    export type EditCancelingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      DataChangeInfo<TRowData, TKey>;
    export type Editing<TRowData = any, TKey = any> = EditingBase<
      TRowData,
      TKey
    > & {
      /**
       * [descr:dxDataGridOptions.editing.allowAdding]
       */
      allowAdding?: boolean;
      /**
       * [descr:dxDataGridOptions.editing.allowDeleting]
       */
      allowDeleting?:
        | boolean
        | ((options: {
            component?: dxDataGrid<TRowData, TKey>;
            row?: Row<TRowData, TKey>;
          }) => boolean);
      /**
       * [descr:dxDataGridOptions.editing.allowUpdating]
       */
      allowUpdating?:
        | boolean
        | ((options: {
            component?: dxDataGrid<TRowData, TKey>;
            row?: Row<TRowData, TKey>;
          }) => boolean);
      /**
       * [descr:dxDataGridOptions.editing.texts]
       */
      texts?: any;
      /**
       * [descr:dxDataGridOptions.editing.newRowPosition]
       */
      newRowPosition?:
        | 'first'
        | 'last'
        | 'pageBottom'
        | 'pageTop'
        | 'viewportBottom'
        | 'viewportTop';
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface EditingBase<TRowData = any, TKey = any> {
      /**
       * [descr:GridBaseOptions.editing.confirmDelete]
       */
      confirmDelete?: boolean;
      /**
       * [descr:GridBaseOptions.editing.changes]
       */
      changes?: Array<DataChange<TRowData, TKey>>;
      /**
       * [descr:GridBaseOptions.editing.editColumnName]
       */
      editColumnName?: string;
      /**
       * [descr:GridBaseOptions.editing.editRowKey]
       */
      editRowKey?: TKey;
      /**
       * [descr:GridBaseOptions.editing.form]
       */
      form?: DevExpress.ui.dxForm.Properties;
      /**
       * [descr:GridBaseOptions.editing.mode]
       */
      mode?: 'batch' | 'cell' | 'row' | 'form' | 'popup';
      /**
       * [descr:GridBaseOptions.editing.popup]
       */
      popup?: DevExpress.ui.dxPopup.Properties;
      /**
       * [descr:GridBaseOptions.editing.refreshMode]
       */
      refreshMode?: 'full' | 'reshape' | 'repaint';
      /**
       * [descr:GridBaseOptions.editing.selectTextOnEditStart]
       */
      selectTextOnEditStart?: boolean;
      /**
       * [descr:GridBaseOptions.editing.startEditAction]
       */
      startEditAction?: 'click' | 'dblClick';
      /**
       * [descr:GridBaseOptions.editing.texts]
       */
      texts?: EditingTextsBase;
      /**
       * [descr:GridBaseOptions.editing.useIcons]
       */
      useIcons?: boolean;
    }
    export type EditingStartEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
        readonly data: TRowData;
        readonly key: TKey;
        readonly column?: Column<TRowData, TKey>;
      };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface EditingTextsBase {
      /**
       * [descr:GridBaseOptions.editing.texts.addRow]
       */
      addRow?: string;
      /**
       * [descr:GridBaseOptions.editing.texts.cancelAllChanges]
       */
      cancelAllChanges?: string;
      /**
       * [descr:GridBaseOptions.editing.texts.cancelRowChanges]
       */
      cancelRowChanges?: string;
      /**
       * [descr:GridBaseOptions.editing.texts.confirmDeleteMessage]
       */
      confirmDeleteMessage?: string;
      /**
       * [descr:GridBaseOptions.editing.texts.confirmDeleteTitle]
       */
      confirmDeleteTitle?: string;
      /**
       * [descr:GridBaseOptions.editing.texts.deleteRow]
       */
      deleteRow?: string;
      /**
       * [descr:GridBaseOptions.editing.texts.editRow]
       */
      editRow?: string;
      /**
       * [descr:GridBaseOptions.editing.texts.saveAllChanges]
       */
      saveAllChanges?: string;
      /**
       * [descr:GridBaseOptions.editing.texts.saveRowChanges]
       */
      saveRowChanges?: string;
      /**
       * [descr:GridBaseOptions.editing.texts.undeleteRow]
       */
      undeleteRow?: string;
      /**
       * [descr:GridBaseOptions.editing.texts.validationCancelChanges]
       */
      validationCancelChanges?: string;
    }
    export type EditorPreparedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly parentType: string;
      readonly value?: any;
      readonly setValue?: any;
      readonly updateValueTimeout?: number;
      readonly width?: number;
      readonly disabled: boolean;
      readonly rtlEnabled: boolean;
      readonly editorElement: DevExpress.core.DxElement;
      readonly readOnly: boolean;
      readonly dataField?: string;
      readonly row?: Row<TRowData, TKey>;
    };
    export type EditorPreparingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly parentType: string;
      readonly value?: any;
      readonly setValue?: any;
      readonly updateValueTimeout?: number;
      readonly width?: number;
      readonly disabled: boolean;
      readonly rtlEnabled: boolean;
      cancel: boolean;
      readonly editorElement: DevExpress.core.DxElement;
      readonly readOnly: boolean;
      editorName: string;
      editorOptions: any;
      readonly dataField?: string;
      readonly row?: Row<TRowData, TKey>;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ExcelCellInfo<TRowData = any, TKey = any> {
      readonly component: dxDataGrid<TRowData, TKey>;
      horizontalAlignment?:
        | 'center'
        | 'centerContinuous'
        | 'distributed'
        | 'fill'
        | 'general'
        | 'justify'
        | 'left'
        | 'right';
      verticalAlignment?:
        | 'bottom'
        | 'center'
        | 'distributed'
        | 'justify'
        | 'top';
      wrapTextEnabled?: boolean;
      backgroundColor?: string;
      fillPatternType?:
        | 'darkDown'
        | 'darkGray'
        | 'darkGrid'
        | 'darkHorizontal'
        | 'darkTrellis'
        | 'darkUp'
        | 'darkVertical'
        | 'gray0625'
        | 'gray125'
        | 'lightDown'
        | 'lightGray'
        | 'lightGrid'
        | 'lightHorizontal'
        | 'lightTrellis'
        | 'lightUp'
        | 'lightVertical'
        | 'mediumGray'
        | 'none'
        | 'solid';
      fillPatternColor?: string;
      font?: DevExpress.exporter.ExcelFont;
      readonly value?: string | number | Date;
      numberFormat?: string;
      gridCell?: DevExpress.excelExporter.DataGridCell;
    }
    export type ExplicitTypes<TRowData, TKey> = {
      AdaptiveDetailRowPreparingEvent: AdaptiveDetailRowPreparingEvent<
        TRowData,
        TKey
      >;
      CellClickEvent: CellClickEvent<TRowData, TKey>;
      CellDblClickEvent: CellDblClickEvent<TRowData, TKey>;
      CellHoverChangedEvent: CellHoverChangedEvent<TRowData, TKey>;
      CellPreparedEvent: CellPreparedEvent<TRowData, TKey>;
      Column: Column<TRowData, TKey>;
      ColumnButton: ColumnButton<TRowData, TKey>;
      ColumnButtonClickEvent: ColumnButtonClickEvent<TRowData, TKey>;
      ColumnButtonTemplateData: ColumnButtonTemplateData<TRowData, TKey>;
      ColumnCellTemplateData: ColumnCellTemplateData<TRowData, TKey>;
      ColumnEditCellTemplateData: ColumnEditCellTemplateData<TRowData, TKey>;
      ColumnGroupCellTemplateData: ColumnGroupCellTemplateData<TRowData, TKey>;
      ColumnHeaderCellTemplateData: ColumnHeaderCellTemplateData<
        TRowData,
        TKey
      >;
      ContentReadyEvent: ContentReadyEvent<TRowData, TKey>;
      ContextMenuPreparingEvent: ContextMenuPreparingEvent<TRowData, TKey>;
      DataErrorOccurredEvent: DataErrorOccurredEvent<TRowData, TKey>;
      DisposingEvent: DisposingEvent<TRowData, TKey>;
      EditCanceledEvent: EditCanceledEvent<TRowData, TKey>;
      EditCancelingEvent: EditCancelingEvent<TRowData, TKey>;
      Editing: Editing<TRowData, TKey>;
      EditingStartEvent: EditingStartEvent<TRowData, TKey>;
      EditorPreparedEvent: EditorPreparedEvent<TRowData, TKey>;
      EditorPreparingEvent: EditorPreparingEvent<TRowData, TKey>;
      Export: Export<TRowData, TKey>;
      ExportedEvent: ExportedEvent<TRowData, TKey>;
      ExportingEvent: ExportingEvent<TRowData, TKey>;
      FileSavingEvent: FileSavingEvent<TRowData, TKey>;
      FocusedCellChangedEvent: FocusedCellChangedEvent<TRowData, TKey>;
      FocusedCellChangingEvent: FocusedCellChangingEvent<TRowData, TKey>;
      FocusedRowChangedEvent: FocusedRowChangedEvent<TRowData, TKey>;
      FocusedRowChangingEvent: FocusedRowChangingEvent<TRowData, TKey>;
      InitializedEvent: InitializedEvent<TRowData, TKey>;
      InitNewRowEvent: InitNewRowEvent<TRowData, TKey>;
      KeyDownEvent: KeyDownEvent<TRowData, TKey>;
      MasterDetailTemplateData: MasterDetailTemplateData<TRowData, TKey>;
      OptionChangedEvent: OptionChangedEvent<TRowData, TKey>;
      Properties: Properties<TRowData, TKey>;
      Row: Row<TRowData, TKey>;
      RowClickEvent: RowClickEvent<TRowData, TKey>;
      RowCollapsedEvent: RowCollapsedEvent<TRowData, TKey>;
      RowCollapsingEvent: RowCollapsingEvent<TRowData, TKey>;
      RowDblClickEvent: RowDblClickEvent<TRowData, TKey>;
      RowDraggingAddEvent: RowDraggingAddEvent<TRowData, TKey>;
      RowDraggingChangeEvent: RowDraggingChangeEvent<TRowData, TKey>;
      RowDraggingEndEvent: RowDraggingEndEvent<TRowData, TKey>;
      RowDraggingMoveEvent: RowDraggingMoveEvent<TRowData, TKey>;
      RowDraggingRemoveEvent: RowDraggingRemoveEvent<TRowData, TKey>;
      RowDraggingReorderEvent: RowDraggingReorderEvent<TRowData, TKey>;
      RowDraggingStartEvent: RowDraggingStartEvent<TRowData, TKey>;
      RowDraggingTemplateData: RowDraggingTemplateData<TRowData>;
      RowExpandedEvent: RowExpandedEvent<TRowData, TKey>;
      RowExpandingEvent: RowExpandingEvent<TRowData, TKey>;
      RowInsertedEvent: RowInsertedEvent<TRowData, TKey>;
      RowInsertingEvent: RowInsertingEvent<TRowData, TKey>;
      RowPreparedEvent: RowPreparedEvent<TRowData, TKey>;
      RowRemovedEvent: RowRemovedEvent<TRowData, TKey>;
      RowRemovingEvent: RowRemovingEvent<TRowData, TKey>;
      RowTemplateData: RowTemplateData<TRowData, TKey>;
      DataRowTemplateData: DataRowTemplateData<TRowData, TKey>;
      RowUpdatedEvent: RowUpdatedEvent<TRowData, TKey>;
      RowUpdatingEvent: RowUpdatingEvent<TRowData, TKey>;
      RowValidatingEvent: RowValidatingEvent<TRowData, TKey>;
      SavedEvent: SavedEvent<TRowData, TKey>;
      SavingEvent: SavingEvent<TRowData, TKey>;
      Scrolling: Scrolling;
      Selection: Selection;
      SelectionChangedEvent: SelectionChangedEvent<TRowData, TKey>;
      Summary: Summary<TRowData, TKey>;
      ToolbarPreparingEvent: ToolbarPreparingEvent<TRowData, TKey>;
    };
    export type Export<TRowData = any, TKey = any> = {
      /**
       * [descr:dxDataGridOptions.export.allowExportSelectedData]
       */
      allowExportSelectedData?: boolean;
      /**
       * [descr:dxDataGridOptions.export.customizeExcelCell]
       * @deprecated [depNote:dxDataGridOptions.export.customizeExcelCell]
       */
      customizeExcelCell?: (options: ExcelCellInfo<TRowData, TKey>) => void;
      /**
       * [descr:dxDataGridOptions.export.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:dxDataGridOptions.export.excelFilterEnabled]
       * @deprecated [depNote:dxDataGridOptions.export.excelFilterEnabled]
       */
      excelFilterEnabled?: boolean;
      /**
       * [descr:dxDataGridOptions.export.excelWrapTextEnabled]
       * @deprecated [depNote:dxDataGridOptions.export.excelWrapTextEnabled]
       */
      excelWrapTextEnabled?: boolean;
      /**
       * [descr:dxDataGridOptions.export.fileName]
       * @deprecated [depNote:dxDataGridOptions.export.fileName]
       */
      fileName?: string;
      /**
       * [descr:dxDataGridOptions.export.ignoreExcelErrors]
       * @deprecated [depNote:dxDataGridOptions.export.ignoreExcelErrors]
       */
      ignoreExcelErrors?: boolean;
      /**
       * [descr:dxDataGridOptions.export.proxyUrl]
       * @deprecated [depNote:dxDataGridOptions.export.proxyUrl]
       */
      proxyUrl?: string;
      /**
       * [descr:dxDataGridOptions.export.texts]
       */
      texts?: ExportTexts;
    };
    export type ExportedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>>;
    export type ExportingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
        fileName?: string;
      };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ExportTexts {
      /**
       * [descr:dxDataGridOptions.export.texts.exportAll]
       */
      exportAll?: string;
      /**
       * [descr:dxDataGridOptions.export.texts.exportSelectedRows]
       */
      exportSelectedRows?: string;
      /**
       * [descr:dxDataGridOptions.export.texts.exportTo]
       */
      exportTo?: string;
    }
    export type FileSavingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable & {
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly element: DevExpress.core.DxElement;
      fileName?: string;
      format?: string;
      readonly data: Blob;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface FilterPanel<
      T extends GridBase<TRowData, TKey>,
      TRowData = any,
      TKey = any
    > {
      /**
       * [descr:GridBaseOptions.filterPanel.customizeText]
       */
      customizeText?: (e: FilterPanelCustomizeTextArg<T>) => string;
      /**
       * [descr:GridBaseOptions.filterPanel.filterEnabled]
       */
      filterEnabled?: boolean;
      /**
       * [descr:GridBaseOptions.filterPanel.texts]
       */
      texts?: FilterPanelTexts;
      /**
       * [descr:GridBaseOptions.filterPanel.visible]
       */
      visible?: boolean;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface FilterPanelCustomizeTextArg<T> {
      readonly component: T;
      readonly filterValue: any;
      readonly text: string;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface FilterPanelTexts {
      /**
       * [descr:GridBaseOptions.filterPanel.texts.clearFilter]
       */
      clearFilter?: string;
      /**
       * [descr:GridBaseOptions.filterPanel.texts.createFilter]
       */
      createFilter?: string;
      /**
       * [descr:GridBaseOptions.filterPanel.texts.filterEnabledHint]
       */
      filterEnabledHint?: string;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface FilterRow {
      /**
       * [descr:GridBaseOptions.filterRow.applyFilter]
       */
      applyFilter?: 'auto' | 'onClick';
      /**
       * [descr:GridBaseOptions.filterRow.applyFilterText]
       */
      applyFilterText?: string;
      /**
       * [descr:GridBaseOptions.filterRow.betweenEndText]
       */
      betweenEndText?: string;
      /**
       * [descr:GridBaseOptions.filterRow.betweenStartText]
       */
      betweenStartText?: string;
      /**
       * [descr:GridBaseOptions.filterRow.operationDescriptions]
       */
      operationDescriptions?: FilterRowOperationDescriptions;
      /**
       * [descr:GridBaseOptions.filterRow.resetOperationText]
       */
      resetOperationText?: string;
      /**
       * [descr:GridBaseOptions.filterRow.showAllText]
       */
      showAllText?: string;
      /**
       * [descr:GridBaseOptions.filterRow.showOperationChooser]
       */
      showOperationChooser?: boolean;
      /**
       * [descr:GridBaseOptions.filterRow.visible]
       */
      visible?: boolean;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface FilterRowOperationDescriptions {
      /**
       * [descr:GridBaseOptions.filterRow.operationDescriptions.between]
       */
      between?: string;
      /**
       * [descr:GridBaseOptions.filterRow.operationDescriptions.contains]
       */
      contains?: string;
      /**
       * [descr:GridBaseOptions.filterRow.operationDescriptions.endsWith]
       */
      endsWith?: string;
      /**
       * [descr:GridBaseOptions.filterRow.operationDescriptions.equal]
       */
      equal?: string;
      /**
       * [descr:GridBaseOptions.filterRow.operationDescriptions.greaterThan]
       */
      greaterThan?: string;
      /**
       * [descr:GridBaseOptions.filterRow.operationDescriptions.greaterThanOrEqual]
       */
      greaterThanOrEqual?: string;
      /**
       * [descr:GridBaseOptions.filterRow.operationDescriptions.lessThan]
       */
      lessThan?: string;
      /**
       * [descr:GridBaseOptions.filterRow.operationDescriptions.lessThanOrEqual]
       */
      lessThanOrEqual?: string;
      /**
       * [descr:GridBaseOptions.filterRow.operationDescriptions.notContains]
       */
      notContains?: string;
      /**
       * [descr:GridBaseOptions.filterRow.operationDescriptions.notEqual]
       */
      notEqual?: string;
      /**
       * [descr:GridBaseOptions.filterRow.operationDescriptions.startsWith]
       */
      startsWith?: string;
    }
    export type FocusedCellChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly cellElement: DevExpress.core.DxElement;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly row?: Row<TRowData, TKey>;
      readonly column?: Column<TRowData, TKey>;
    };
    export type FocusedCellChangingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxDataGrid<TRowData, TKey>> & {
        readonly cellElement: DevExpress.core.DxElement;
        readonly prevColumnIndex: number;
        readonly prevRowIndex: number;
        newColumnIndex: number;
        newRowIndex: number;
        readonly rows: Array<Row<TRowData, TKey>>;
        readonly columns: Array<Column<TRowData, TKey>>;
        isHighlighted: boolean;
      };
    export type FocusedRowChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly rowElement: DevExpress.core.DxElement;
      readonly rowIndex: number;
      readonly row?: Row<TRowData, TKey>;
    };
    export type FocusedRowChangingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxDataGrid<TRowData, TKey>> & {
        readonly rowElement: DevExpress.core.DxElement;
        readonly prevRowIndex: number;
        newRowIndex: number;
        readonly rows: Array<Row<TRowData, TKey>>;
      };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface Grouping {
      /**
       * [descr:dxDataGridOptions.grouping.allowCollapsing]
       */
      allowCollapsing?: boolean;
      /**
       * [descr:dxDataGridOptions.grouping.autoExpandAll]
       */
      autoExpandAll?: boolean;
      /**
       * [descr:dxDataGridOptions.grouping.contextMenuEnabled]
       */
      contextMenuEnabled?: boolean;
      /**
       * [descr:dxDataGridOptions.grouping.expandMode]
       */
      expandMode?: 'buttonClick' | 'rowClick';
      /**
       * [descr:dxDataGridOptions.grouping.texts]
       */
      texts?: GroupingTexts;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface GroupingTexts {
      /**
       * [descr:dxDataGridOptions.grouping.texts.groupByThisColumn]
       */
      groupByThisColumn?: string;
      /**
       * [descr:dxDataGridOptions.grouping.texts.groupContinuedMessage]
       */
      groupContinuedMessage?: string;
      /**
       * [descr:dxDataGridOptions.grouping.texts.groupContinuesMessage]
       */
      groupContinuesMessage?: string;
      /**
       * [descr:dxDataGridOptions.grouping.texts.ungroup]
       */
      ungroup?: string;
      /**
       * [descr:dxDataGridOptions.grouping.texts.ungroupAll]
       */
      ungroupAll?: string;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface GroupPanel {
      /**
       * [descr:dxDataGridOptions.groupPanel.allowColumnDragging]
       */
      allowColumnDragging?: boolean;
      /**
       * [descr:dxDataGridOptions.groupPanel.emptyPanelText]
       */
      emptyPanelText?: string;
      /**
       * [descr:dxDataGridOptions.groupPanel.visible]
       */
      visible?: boolean | 'auto';
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface HeaderFilter {
      /**
       * [descr:GridBaseOptions.headerFilter.allowSearch]
       */
      allowSearch?: boolean;
      /**
       * [descr:GridBaseOptions.headerFilter.height]
       */
      height?: number;
      /**
       * [descr:GridBaseOptions.headerFilter.searchTimeout]
       */
      searchTimeout?: number;
      /**
       * [descr:GridBaseOptions.headerFilter.texts]
       */
      texts?: HeaderFilterTexts;
      /**
       * [descr:GridBaseOptions.headerFilter.visible]
       */
      visible?: boolean;
      /**
       * [descr:GridBaseOptions.headerFilter.width]
       */
      width?: number;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface HeaderFilterTexts {
      /**
       * [descr:GridBaseOptions.headerFilter.texts.cancel]
       */
      cancel?: string;
      /**
       * [descr:GridBaseOptions.headerFilter.texts.emptyValue]
       */
      emptyValue?: string;
      /**
       * [descr:GridBaseOptions.headerFilter.texts.ok]
       */
      ok?: string;
    }
    export type InitializedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<dxDataGrid<TRowData, TKey>>;
    export type InitNewRowEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      NewRowInfo<TRowData>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface KeyboardNavigation {
      /**
       * [descr:GridBaseOptions.keyboardNavigation.editOnKeyPress]
       */
      editOnKeyPress?: boolean;
      /**
       * [descr:GridBaseOptions.keyboardNavigation.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:GridBaseOptions.keyboardNavigation.enterKeyAction]
       */
      enterKeyAction?: 'startEdit' | 'moveFocus';
      /**
       * [descr:GridBaseOptions.keyboardNavigation.enterKeyDirection]
       */
      enterKeyDirection?: 'none' | 'column' | 'row';
    }
    export type KeyDownEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxDataGrid<TRowData, TKey>> &
      KeyDownInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface KeyDownInfo {
      handled: boolean;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface LoadPanel {
      /**
       * [descr:GridBaseOptions.loadPanel.enabled]
       */
      enabled?: boolean | 'auto';
      /**
       * [descr:GridBaseOptions.loadPanel.height]
       */
      height?: number;
      /**
       * [descr:GridBaseOptions.loadPanel.indicatorSrc]
       */
      indicatorSrc?: string;
      /**
       * [descr:GridBaseOptions.loadPanel.shading]
       */
      shading?: boolean;
      /**
       * [descr:GridBaseOptions.loadPanel.shadingColor]
       */
      shadingColor?: string;
      /**
       * [descr:GridBaseOptions.loadPanel.showIndicator]
       */
      showIndicator?: boolean;
      /**
       * [descr:GridBaseOptions.loadPanel.showPane]
       */
      showPane?: boolean;
      /**
       * [descr:GridBaseOptions.loadPanel.text]
       */
      text?: string;
      /**
       * [descr:GridBaseOptions.loadPanel.width]
       */
      width?: number;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface MasterDetail<TRowData = any, TKey = any> {
      /**
       * [descr:dxDataGridOptions.masterDetail.autoExpandAll]
       */
      autoExpandAll?: boolean;
      /**
       * [descr:dxDataGridOptions.masterDetail.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:dxDataGridOptions.masterDetail.template]
       */
      template?:
        | DevExpress.core.template
        | ((
            detailElement: DevExpress.core.DxElement,
            detailInfo: MasterDetailTemplateData<TRowData, TKey>
          ) => any);
    }
    export type MasterDetailTemplateData<TRowData = any, TKey = any> = {
      readonly key: TKey;
      readonly data: TRowData;
      readonly watch?: Function;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface NewRowInfo<TRowData = any> {
      data: TRowData;
      promise?: PromiseLike<void>;
    }
    export type OptionChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface Pager {
      /**
       * [descr:GridBaseOptions.pager.allowedPageSizes]
       */
      allowedPageSizes?: Array<number | 'all'> | 'auto';
      /**
       * [descr:GridBaseOptions.pager.displayMode]
       */
      displayMode?: 'adaptive' | 'compact' | 'full';
      /**
       * [descr:GridBaseOptions.pager.infoText]
       */
      infoText?: string;
      /**
       * [descr:GridBaseOptions.pager.showInfo]
       */
      showInfo?: boolean;
      /**
       * [descr:GridBaseOptions.pager.showNavigationButtons]
       */
      showNavigationButtons?: boolean;
      /**
       * [descr:GridBaseOptions.pager.showPageSizeSelector]
       */
      showPageSizeSelector?: boolean;
      /**
       * [descr:GridBaseOptions.pager.visible]
       */
      visible?: boolean | 'auto';
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface PagingBase {
      /**
       * [descr:GridBaseOptions.paging.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:GridBaseOptions.paging.pageIndex]
       */
      pageIndex?: number;
      /**
       * [descr:GridBaseOptions.paging.pageSize]
       */
      pageSize?: number;
    }
    /**
     * [descr:Properties]
     */
    export interface Properties<TRowData = any, TKey = any>
      extends GridBaseOptions<dxDataGrid<TRowData, TKey>, TRowData, TKey> {
      /**
       * [descr:Properties.columns]
       */
      columns?: Array<Column<TRowData, TKey> | string>;
      /**
       * [descr:Properties.customizeColumns]
       */
      customizeColumns?: (columns: Array<Column<TRowData, TKey>>) => void;
      /**
       * [descr:Properties.customizeExportData]
       * @deprecated [depNote:Properties.customizeExportData]
       */
      customizeExportData?: (
        columns: Array<Column<TRowData, TKey>>,
        rows: Array<Row<TRowData, TKey>>
      ) => void;
      /**
       * [descr:Properties.editing]
       */
      editing?: Editing<TRowData, TKey>;
      /**
       * [descr:Properties.export]
       */
      export?: Export<TRowData, TKey>;
      /**
       * [descr:Properties.groupPanel]
       */
      groupPanel?: GroupPanel;
      /**
       * [descr:Properties.grouping]
       */
      grouping?: Grouping;
      /**
       * [descr:Properties.keyExpr]
       */
      keyExpr?: string | Array<string>;
      /**
       * [descr:Properties.masterDetail]
       */
      masterDetail?: MasterDetail<TRowData, TKey>;
      /**
       * [descr:Properties.onCellClick]
       */
      onCellClick?: (e: CellClickEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onCellDblClick]
       */
      onCellDblClick?: (e: CellDblClickEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onCellHoverChanged]
       */
      onCellHoverChanged?: (e: CellHoverChangedEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onCellPrepared]
       */
      onCellPrepared?: (e: CellPreparedEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onContextMenuPreparing]
       */
      onContextMenuPreparing?: (
        e: ContextMenuPreparingEvent<TRowData, TKey>
      ) => void;
      /**
       * [descr:Properties.onEditingStart]
       */
      onEditingStart?: (e: EditingStartEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onEditorPrepared]
       */
      onEditorPrepared?: (options: EditorPreparedEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onEditorPreparing]
       */
      onEditorPreparing?: (e: EditorPreparingEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onExported]
       * @deprecated [depNote:Properties.onExported]
       */
      onExported?: (e: ExportedEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onExporting]
       */
      onExporting?: (e: ExportingEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onFileSaving]
       * @deprecated [depNote:Properties.onFileSaving]
       */
      onFileSaving?: (e: FileSavingEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onFocusedCellChanged]
       */
      onFocusedCellChanged?: (
        e: FocusedCellChangedEvent<TRowData, TKey>
      ) => void;
      /**
       * [descr:Properties.onFocusedCellChanging]
       */
      onFocusedCellChanging?: (
        e: FocusedCellChangingEvent<TRowData, TKey>
      ) => void;
      /**
       * [descr:Properties.onFocusedRowChanged]
       */
      onFocusedRowChanged?: (e: FocusedRowChangedEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onFocusedRowChanging]
       */
      onFocusedRowChanging?: (
        e: FocusedRowChangingEvent<TRowData, TKey>
      ) => void;
      /**
       * [descr:Properties.onRowClick]
       */
      onRowClick?: (e: RowClickEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onRowDblClick]
       */
      onRowDblClick?: (e: RowDblClickEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onRowPrepared]
       */
      onRowPrepared?: (e: RowPreparedEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.remoteOperations]
       */
      remoteOperations?:
        | boolean
        | {
            /**
             * [descr:Properties.remoteOperations.filtering]
             */
            filtering?: boolean;
            /**
             * [descr:Properties.remoteOperations.groupPaging]
             */
            groupPaging?: boolean;
            /**
             * [descr:Properties.remoteOperations.grouping]
             */
            grouping?: boolean;
            /**
             * [descr:Properties.remoteOperations.paging]
             */
            paging?: boolean;
            /**
             * [descr:Properties.remoteOperations.sorting]
             */
            sorting?: boolean;
            /**
             * [descr:Properties.remoteOperations.summary]
             */
            summary?: boolean;
          }
        | 'auto';
      /**
       * [descr:Properties.rowTemplate]
       */
      rowTemplate?:
        | DevExpress.core.template
        | ((
            rowElement: DevExpress.core.DxElement,
            rowInfo: RowTemplateData<TRowData, TKey>
          ) => any);
      /**
       * [descr:Properties.dataRowTemplate]
       */
      dataRowTemplate?:
        | DevExpress.core.template
        | ((
            rowElement: DevExpress.core.DxElement,
            rowInfo: DataRowTemplateData<TRowData, TKey>
          ) => any);
      /**
       * [descr:Properties.scrolling]
       */
      scrolling?: Scrolling;
      /**
       * [descr:Properties.selection]
       */
      selection?: Selection;
      /**
       * [descr:Properties.selectionFilter]
       */
      selectionFilter?: string | Array<any> | Function;
      /**
       * [descr:Properties.sortByGroupSummaryInfo]
       */
      sortByGroupSummaryInfo?: Array<dxDataGridSortByGroupSummaryInfoItem>;
      /**
       * [descr:Properties.summary]
       */
      summary?: Summary<TRowData, TKey>;
      /**
       * [descr:Properties.toolbar]
       */
      toolbar?: dxDataGridToolbar;
    }
    /**
     * [descr:dxDataGridRowObject]
     */
    export interface Row<TRowData = any, TKey = any> {
      /**
       * [descr:dxDataGridRowObject.data]
       */
      readonly data: TRowData;
      /**
       * [descr:dxDataGridRowObject.groupIndex]
       */
      readonly groupIndex?: number;
      /**
       * [descr:dxDataGridRowObject.isEditing]
       */
      readonly isEditing?: boolean;
      /**
       * [descr:dxDataGridRowObject.isExpanded]
       */
      readonly isExpanded?: boolean;
      /**
       * [descr:dxDataGridRowObject.isNewRow]
       */
      readonly isNewRow?: boolean;
      /**
       * [descr:dxDataGridRowObject.isSelected]
       */
      readonly isSelected?: boolean;
      /**
       * [descr:dxDataGridRowObject.key]
       */
      readonly key: TKey;
      /**
       * [descr:dxDataGridRowObject.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:dxDataGridRowObject.rowType]
       */
      readonly rowType: string;
      /**
       * [descr:dxDataGridRowObject.values]
       */
      readonly values: Array<any>;
    }
    export type RowClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly values: Array<any>;
      readonly columns: Array<Column<TRowData, TKey>>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly isSelected?: boolean;
      readonly isExpanded?: boolean;
      readonly isNewRow?: boolean;
      readonly groupIndex?: number;
      readonly rowElement: DevExpress.core.DxElement;
      readonly handled: boolean;
    };
    export type RowCollapsedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowKeyInfo<TKey>;
    export type RowCollapsingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowKeyInfo<TKey>;
    export type RowDblClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly values: Array<any>;
      readonly columns: Array<Column<TRowData, TKey>>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly isSelected?: boolean;
      readonly isExpanded?: boolean;
      readonly isNewRow?: boolean;
      readonly groupIndex?: number;
      readonly rowElement: DevExpress.core.DxElement;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface RowDragging<
      T extends GridBase<TRowData, TKey>,
      TRowData = any,
      TKey = any
    > {
      /**
       * [descr:GridBaseOptions.rowDragging.allowDropInsideItem]
       */
      allowDropInsideItem?: boolean;
      /**
       * [descr:GridBaseOptions.rowDragging.allowReordering]
       */
      allowReordering?: boolean;
      /**
       * [descr:GridBaseOptions.rowDragging.autoScroll]
       */
      autoScroll?: boolean;
      /**
       * [descr:GridBaseOptions.rowDragging.boundary]
       */
      boundary?: string | DevExpress.core.UserDefinedElement;
      /**
       * [descr:GridBaseOptions.rowDragging.container]
       */
      container?: string | DevExpress.core.UserDefinedElement;
      /**
       * [descr:GridBaseOptions.rowDragging.cursorOffset]
       */
      cursorOffset?:
        | string
        | {
            /**
             * [descr:GridBaseOptions.rowDragging.cursorOffset.x]
             */
            x?: number;
            /**
             * [descr:GridBaseOptions.rowDragging.cursorOffset.y]
             */
            y?: number;
          };
      /**
       * [descr:GridBaseOptions.rowDragging.data]
       */
      data?: any;
      /**
       * [descr:GridBaseOptions.rowDragging.dragDirection]
       */
      dragDirection?: 'both' | 'horizontal' | 'vertical';
      /**
       * [descr:GridBaseOptions.rowDragging.dragTemplate]
       */
      dragTemplate?:
        | DevExpress.core.template
        | ((
            dragInfo: RowDraggingTemplateData<TRowData>,
            containerElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:GridBaseOptions.rowDragging.dropFeedbackMode]
       */
      dropFeedbackMode?: 'push' | 'indicate';
      /**
       * [descr:GridBaseOptions.rowDragging.filter]
       */
      filter?: string;
      /**
       * [descr:GridBaseOptions.rowDragging.group]
       */
      group?: string;
      /**
       * [descr:GridBaseOptions.rowDragging.handle]
       */
      handle?: string;
      /**
       * [descr:GridBaseOptions.rowDragging.onAdd]
       */
      onAdd?: (
        e: RowDraggingEventInfo<T, TRowData, TKey> & DragDropInfo
      ) => void;
      /**
       * [descr:GridBaseOptions.rowDragging.onDragChange]
       */
      onDragChange?: (
        e: DevExpress.events.Cancelable &
          RowDraggingEventInfo<T, TRowData, TKey> &
          DragDropInfo
      ) => void;
      /**
       * [descr:GridBaseOptions.rowDragging.onDragEnd]
       */
      onDragEnd?: (
        e: DevExpress.events.Cancelable &
          RowDraggingEventInfo<T, TRowData, TKey> &
          DragDropInfo
      ) => void;
      /**
       * [descr:GridBaseOptions.rowDragging.onDragMove]
       */
      onDragMove?: (
        e: DevExpress.events.Cancelable &
          RowDraggingEventInfo<T, TRowData, TKey> &
          DragDropInfo
      ) => void;
      /**
       * [descr:GridBaseOptions.rowDragging.onDragStart]
       */
      onDragStart?: (
        e: DevExpress.events.Cancelable & DragStartEventInfo<T, TRowData, TKey>
      ) => void;
      /**
       * [descr:GridBaseOptions.rowDragging.onRemove]
       */
      onRemove?: (e: RowDraggingEventInfo<T, TRowData, TKey>) => void;
      /**
       * [descr:GridBaseOptions.rowDragging.onReorder]
       */
      onReorder?: (
        e: RowDraggingEventInfo<dxDataGrid<TRowData, TKey>, TRowData, TKey> &
          DragReorderInfo
      ) => void;
      /**
       * [descr:GridBaseOptions.rowDragging.scrollSensitivity]
       */
      scrollSensitivity?: number;
      /**
       * [descr:GridBaseOptions.rowDragging.scrollSpeed]
       */
      scrollSpeed?: number;
      /**
       * [descr:GridBaseOptions.rowDragging.showDragIcons]
       */
      showDragIcons?: boolean;
    }
    export type RowDraggingAddEvent<
      TRowData = any,
      TKey = any
    > = RowDraggingEventInfo<dxDataGrid<TRowData, TKey>, TRowData, TKey> &
      DragDropInfo;
    export type RowDraggingChangeEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      RowDraggingEventInfo<dxDataGrid<TRowData, TKey>, TRowData, TKey> &
      DragDropInfo;
    export type RowDraggingEndEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      RowDraggingEventInfo<dxDataGrid<TRowData, TKey>, TRowData, TKey> &
      DragDropInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface RowDraggingEventInfo<
      T extends GridBase<TRowData, TKey>,
      TRowData = any,
      TKey = any
    > {
      readonly component: T;
      readonly event: DevExpress.events.DxEvent;
      readonly itemData?: TRowData;
      readonly itemElement: DevExpress.core.DxElement;
      readonly fromIndex: number;
      readonly toIndex: number;
      readonly fromComponent: dxSortable | dxDraggable;
      readonly toComponent: dxSortable | dxDraggable;
      readonly fromData?: any;
      readonly toData?: any;
    }
    export type RowDraggingMoveEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      RowDraggingEventInfo<dxDataGrid<TRowData, TKey>, TRowData, TKey> &
      DragDropInfo;
    export type RowDraggingRemoveEvent<
      TRowData = any,
      TKey = any
    > = RowDraggingEventInfo<dxDataGrid<TRowData, TKey>, TRowData, TKey>;
    export type RowDraggingReorderEvent<
      TRowData = any,
      TKey = any
    > = RowDraggingEventInfo<dxDataGrid<TRowData, TKey>, TRowData, TKey> &
      DragReorderInfo;
    export type RowDraggingStartEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DragStartEventInfo<dxDataGrid<TRowData, TKey>, TRowData, TKey>;
    export type RowDraggingTemplateData<TRowData = any> =
      RowDraggingTemplateDataModel<TRowData>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface RowDraggingTemplateDataModel<TRowData = any> {
      readonly itemData: TRowData;
      readonly itemElement: DevExpress.core.DxElement;
    }
    export type RowExpandedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowKeyInfo<TKey>;
    export type RowExpandingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowKeyInfo<TKey>;
    export type RowInsertedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowInsertedInfo<TRowData, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface RowInsertedInfo<TRowData = any, TKey = any> {
      readonly data: TRowData;
      readonly key: TKey;
      readonly error: Error;
    }
    export type RowInsertingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowInsertingInfo<TRowData>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface RowInsertingInfo<TRowData = any> {
      data: TRowData;
      cancel: boolean | PromiseLike<void>;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface RowKeyInfo<TKey = any> {
      readonly key: TKey;
    }
    export type RowPreparedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly values: Array<any>;
      readonly columns: Array<Column<TRowData, TKey>>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly groupIndex?: number;
      readonly isSelected?: boolean;
      readonly isExpanded?: boolean;
      readonly isNewRow?: boolean;
      readonly rowElement: DevExpress.core.DxElement;
    };
    export type RowRemovedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowRemovedInfo<TRowData, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface RowRemovedInfo<TRowData = any, TKey = any> {
      readonly data: TRowData;
      readonly key: TKey;
      readonly error: Error;
    }
    export type RowRemovingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowRemovingInfo<TRowData, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface RowRemovingInfo<TRowData = any, TKey = any> {
      readonly data: TRowData;
      readonly key: TKey;
      cancel: boolean | PromiseLike<void>;
    }
    export type RowTemplateData<TRowData = any, TKey = any> = {
      readonly key: TKey;
      readonly data: TRowData;
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly values: Array<any>;
      readonly rowIndex: number;
      readonly columns: Array<Column<TRowData, TKey>>;
      readonly isSelected?: boolean;
      readonly rowType: string;
      readonly groupIndex?: number;
      readonly isExpanded?: boolean;
    };
    export type RowUpdatedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowUpdatedInfo<TRowData, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface RowUpdatedInfo<TRowData = any, TKey = any> {
      readonly data: TRowData;
      readonly key: TKey;
      readonly error: Error;
    }
    export type RowUpdatingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowUpdatingInfo<TRowData, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface RowUpdatingInfo<TRowData = any, TKey = any> {
      readonly oldData: TRowData;
      newData: DevExpress.core.DeepPartial<TRowData>;
      readonly key: TKey;
      cancel: boolean | PromiseLike<void>;
    }
    export type RowValidatingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      RowValidatingInfo<TRowData, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface RowValidatingInfo<TRowData = any, TKey = any> {
      readonly brokenRules: Array<
        | RequiredRule
        | NumericRule
        | RangeRule
        | StringLengthRule
        | CustomRule
        | CompareRule
        | PatternRule
        | EmailRule
        | AsyncRule
      >;
      isValid: boolean;
      readonly key: TKey;
      readonly newData: DevExpress.core.DeepPartial<TRowData>;
      readonly oldData: TRowData;
      errorText: string;
      promise?: PromiseLike<void>;
    }
    export type SavedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      DataChangeInfo<TRowData, TKey>;
    export type SavingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      SavingInfo<TRowData, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface SavingInfo<TRowData = any, TKey = any> {
      changes: Array<DataChange<TRowData, TKey>>;
      promise?: PromiseLike<void>;
      cancel: boolean;
    }
    export type Scrolling = ScrollingBase & {
      /**
       * [descr:dxDataGridOptions.scrolling.mode]
       */
      mode?: 'infinite' | 'standard' | 'virtual';
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ScrollingBase {
      /**
       * [descr:GridBaseOptions.scrolling.columnRenderingMode]
       */
      columnRenderingMode?: 'standard' | 'virtual';
      /**
       * [descr:GridBaseOptions.scrolling.preloadEnabled]
       */
      preloadEnabled?: boolean;
      /**
       * [descr:GridBaseOptions.scrolling.rowRenderingMode]
       */
      rowRenderingMode?: 'standard' | 'virtual';
      /**
       * [descr:GridBaseOptions.scrolling.scrollByContent]
       */
      scrollByContent?: boolean;
      /**
       * [descr:GridBaseOptions.scrolling.scrollByThumb]
       */
      scrollByThumb?: boolean;
      /**
       * [descr:GridBaseOptions.scrolling.showScrollbar]
       */
      showScrollbar?: 'always' | 'never' | 'onHover' | 'onScroll';
      /**
       * [descr:GridBaseOptions.scrolling.useNative]
       */
      useNative?: boolean | 'auto';
      /**
       * [descr:GridBaseOptions.scrolling.renderAsync]
       */
      renderAsync?: boolean;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface SearchPanel {
      /**
       * [descr:GridBaseOptions.searchPanel.highlightCaseSensitive]
       */
      highlightCaseSensitive?: boolean;
      /**
       * [descr:GridBaseOptions.searchPanel.highlightSearchText]
       */
      highlightSearchText?: boolean;
      /**
       * [descr:GridBaseOptions.searchPanel.placeholder]
       */
      placeholder?: string;
      /**
       * [descr:GridBaseOptions.searchPanel.searchVisibleColumnsOnly]
       */
      searchVisibleColumnsOnly?: boolean;
      /**
       * [descr:GridBaseOptions.searchPanel.text]
       */
      text?: string;
      /**
       * [descr:GridBaseOptions.searchPanel.visible]
       */
      visible?: boolean;
      /**
       * [descr:GridBaseOptions.searchPanel.width]
       */
      width?: number;
    }
    export type Selection = SelectionBase & {
      /**
       * [descr:dxDataGridOptions.selection.deferred]
       */
      deferred?: boolean;
      /**
       * [descr:dxDataGridOptions.selection.selectAllMode]
       */
      selectAllMode?: 'allPages' | 'page';
      /**
       * [descr:dxDataGridOptions.selection.showCheckBoxesMode]
       */
      showCheckBoxesMode?: 'always' | 'none' | 'onClick' | 'onLongTap';
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface SelectionBase {
      /**
       * [descr:GridBaseOptions.selection.allowSelectAll]
       */
      allowSelectAll?: boolean;
      /**
       * [descr:GridBaseOptions.selection.mode]
       */
      mode?: 'multiple' | 'none' | 'single';
    }
    export type SelectionChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      SelectionChangedInfo<TRowData, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface SelectionChangedInfo<TRowData = any, TKey = any> {
      readonly currentSelectedRowKeys: Array<TKey>;
      readonly currentDeselectedRowKeys: Array<TKey>;
      readonly selectedRowKeys: Array<TKey>;
      readonly selectedRowsData: Array<TRowData>;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface Sorting {
      /**
       * [descr:GridBaseOptions.sorting.ascendingText]
       */
      ascendingText?: string;
      /**
       * [descr:GridBaseOptions.sorting.clearText]
       */
      clearText?: string;
      /**
       * [descr:GridBaseOptions.sorting.descendingText]
       */
      descendingText?: string;
      /**
       * [descr:GridBaseOptions.sorting.mode]
       */
      mode?: 'multiple' | 'none' | 'single';
      /**
       * [descr:GridBaseOptions.sorting.showSortIndexes]
       */
      showSortIndexes?: boolean;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface StateStoring {
      /**
       * [descr:GridBaseOptions.stateStoring.customLoad]
       */
      customLoad?: () => PromiseLike<any>;
      /**
       * [descr:GridBaseOptions.stateStoring.customSave]
       */
      customSave?: (gridState: any) => any;
      /**
       * [descr:GridBaseOptions.stateStoring.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:GridBaseOptions.stateStoring.savingTimeout]
       */
      savingTimeout?: number;
      /**
       * [descr:GridBaseOptions.stateStoring.storageKey]
       */
      storageKey?: string;
      /**
       * [descr:GridBaseOptions.stateStoring.type]
       */
      type?: 'custom' | 'localStorage' | 'sessionStorage';
    }
    export interface Summary<TRowData = any, TKey = any> {
      /**
       * [descr:dxDataGridOptions.summary.calculateCustomSummary]
       */
      calculateCustomSummary?: (
        options: CustomSummaryInfo<TRowData, TKey>
      ) => void;
      /**
       * [descr:dxDataGridOptions.summary.groupItems]
       */
      groupItems?: Array<SummaryGroupItem>;
      /**
       * [descr:dxDataGridOptions.summary.recalculateWhileEditing]
       */
      recalculateWhileEditing?: boolean;
      /**
       * [descr:dxDataGridOptions.summary.skipEmptyValues]
       */
      skipEmptyValues?: boolean;
      /**
       * [descr:dxDataGridOptions.summary.texts]
       */
      texts?: SummaryTexts;
      /**
       * [descr:dxDataGridOptions.summary.totalItems]
       */
      totalItems?: Array<SummaryTotalItem>;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface SummaryGroupItem {
      /**
       * [descr:dxDataGridOptions.summary.groupItems.alignByColumn]
       */
      alignByColumn?: boolean;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.column]
       */
      column?: string;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.customizeText]
       */
      customizeText?: (itemInfo: SummaryItemTextInfo) => string;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.displayFormat]
       */
      displayFormat?: string;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.name]
       */
      name?: string;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.showInColumn]
       */
      showInColumn?: string;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.showInGroupFooter]
       */
      showInGroupFooter?: boolean;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.skipEmptyValues]
       */
      skipEmptyValues?: boolean;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.summaryType]
       */
      summaryType?: 'avg' | 'count' | 'custom' | 'max' | 'min' | 'sum' | string;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.valueFormat]
       */
      valueFormat?: Format;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface SummaryItemTextInfo {
      readonly value?: string | number | Date;
      readonly valueText: string;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface SummaryTexts {
      /**
       * [descr:dxDataGridOptions.summary.texts.avg]
       */
      avg?: string;
      /**
       * [descr:dxDataGridOptions.summary.texts.avgOtherColumn]
       */
      avgOtherColumn?: string;
      /**
       * [descr:dxDataGridOptions.summary.texts.count]
       */
      count?: string;
      /**
       * [descr:dxDataGridOptions.summary.texts.max]
       */
      max?: string;
      /**
       * [descr:dxDataGridOptions.summary.texts.maxOtherColumn]
       */
      maxOtherColumn?: string;
      /**
       * [descr:dxDataGridOptions.summary.texts.min]
       */
      min?: string;
      /**
       * [descr:dxDataGridOptions.summary.texts.minOtherColumn]
       */
      minOtherColumn?: string;
      /**
       * [descr:dxDataGridOptions.summary.texts.sum]
       */
      sum?: string;
      /**
       * [descr:dxDataGridOptions.summary.texts.sumOtherColumn]
       */
      sumOtherColumn?: string;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface SummaryTotalItem {
      /**
       * [descr:dxDataGridOptions.summary.totalItems.alignment]
       */
      alignment?: 'center' | 'left' | 'right';
      /**
       * [descr:dxDataGridOptions.summary.totalItems.column]
       */
      column?: string;
      /**
       * [descr:dxDataGridOptions.summary.totalItems.cssClass]
       */
      cssClass?: string;
      /**
       * [descr:dxDataGridOptions.summary.totalItems.customizeText]
       */
      customizeText?: (itemInfo: SummaryItemTextInfo) => string;
      /**
       * [descr:dxDataGridOptions.summary.totalItems.displayFormat]
       */
      displayFormat?: string;
      /**
       * [descr:dxDataGridOptions.summary.totalItems.name]
       */
      name?: string;
      /**
       * [descr:dxDataGridOptions.summary.totalItems.showInColumn]
       */
      showInColumn?: string;
      /**
       * [descr:dxDataGridOptions.summary.totalItems.skipEmptyValues]
       */
      skipEmptyValues?: boolean;
      /**
       * [descr:dxDataGridOptions.summary.totalItems.summaryType]
       */
      summaryType?: 'avg' | 'count' | 'custom' | 'max' | 'min' | 'sum' | string;
      /**
       * [descr:dxDataGridOptions.summary.totalItems.valueFormat]
       */
      valueFormat?: Format;
    }
    export type ToolbarPreparingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxDataGrid<TRowData, TKey>> &
      ToolbarPreparingInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ToolbarPreparingInfo {
      toolbarOptions: DevExpress.ui.dxToolbar.Properties;
    }
  }
  /**
   * @deprecated Use DevExpress.ui.dxDataGrid.Editing instead
   */
  export type dxDataGridEditing<
    TRowData,
    TKey = any
  > = DevExpress.ui.dxDataGrid.Editing<TRowData, TKey>;
  /**
   * @deprecated Use DevExpress.ui.dxDataGrid.Scrolling instead
   */
  export type dxDataGridScrolling = DevExpress.ui.dxDataGrid.Scrolling;
  /**
   * @deprecated Use DevExpress.ui.dxDataGrid.Selection instead
   */
  export type dxDataGridSelection = DevExpress.ui.dxDataGrid.Selection;
  /**
   * [descr:dxDataGridToolbar]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDataGridToolbar {
    /**
     * [descr:dxDataGridToolbar.items]
     */
    items?: Array<
      | DevExpress.ui.dxDataGrid.dxDataGridDefaultToolbarItemName
      | dxDataGridToolbarItem
    >;
    /**
     * [descr:dxDataGridToolbar.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxDataGridToolbar.disabled]
     */
    disabled?: boolean;
  }
  /**
   * [descr:dxDataGridToolbarItem]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDataGridToolbarItem extends DevExpress.ui.dxToolbar.Item {
    /**
     * [descr:dxDataGridToolbarItem.name]
     */
    name?: DevExpress.ui.dxDataGrid.dxDataGridDefaultToolbarItemName | string;
    /**
     * [descr:dxDataGridToolbarItem.location]
     */
    location?: 'after' | 'before' | 'center';
  }
  /**
   * [descr:dxDateBox]
   */
  export class dxDateBox extends dxDropDownEditor<DevExpress.ui.dxDateBox.Properties> {
    /**
     * [descr:dxDateBox.close()]
     */
    close(): void;
    /**
     * [descr:dxDateBox.open()]
     */
    open(): void;
  }
  module dxDateBox {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<dxDateBox>;
    export type ClosedEvent = DevExpress.events.EventInfo<dxDateBox>;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxDateBox>;
    export type CopyEvent = DevExpress.events.NativeEventInfo<dxDateBox>;
    export type CutEvent = DevExpress.events.NativeEventInfo<dxDateBox>;
    export type DisabledDate =
      DevExpress.ui.dxCalendar.ComponentDisabledDate<dxDateBox>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxDateBox>;
    export type DropDownButtonTemplateData =
      DevExpress.ui.dxDropDownEditor.DropDownButtonTemplateDataModel;
    export type EnterKeyEvent = DevExpress.events.NativeEventInfo<dxDateBox>;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<dxDateBox>;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<dxDateBox>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxDateBox>;
    export type InputEvent = DevExpress.events.NativeEventInfo<dxDateBox>;
    export type KeyDownEvent = DevExpress.events.NativeEventInfo<dxDateBox>;
    export type KeyPressEvent = DevExpress.events.NativeEventInfo<dxDateBox>;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<dxDateBox>;
    export type OpenedEvent = DevExpress.events.EventInfo<dxDateBox>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxDateBox> &
      DevExpress.events.ChangedOptionInfo;
    export type PasteEvent = DevExpress.events.NativeEventInfo<dxDateBox>;
    /**
     * [descr:Properties]
     */
    export interface Properties extends dxDropDownEditorOptions<dxDateBox> {
      /**
       * [descr:Properties.adaptivityEnabled]
       */
      adaptivityEnabled?: boolean;
      /**
       * [descr:Properties.applyButtonText]
       */
      applyButtonText?: string;
      /**
       * [descr:Properties.calendarOptions]
       */
      calendarOptions?: DevExpress.ui.dxCalendar.Properties;
      /**
       * [descr:Properties.cancelButtonText]
       */
      cancelButtonText?: string;
      /**
       * [descr:Properties.dateOutOfRangeMessage]
       */
      dateOutOfRangeMessage?: string;
      /**
       * [descr:Properties.dateSerializationFormat]
       */
      dateSerializationFormat?: string;
      /**
       * [descr:Properties.disabledDates]
       */
      disabledDates?: Array<Date> | ((data: DisabledDate) => boolean);
      /**
       * [descr:Properties.displayFormat]
       */
      displayFormat?: Format;
      /**
       * [descr:Properties.interval]
       */
      interval?: number;
      /**
       * [descr:Properties.invalidDateMessage]
       */
      invalidDateMessage?: string;
      /**
       * [descr:Properties.max]
       */
      max?: Date | number | string;
      /**
       * [descr:Properties.min]
       */
      min?: Date | number | string;
      /**
       * [descr:Properties.pickerType]
       */
      pickerType?: 'calendar' | 'list' | 'native' | 'rollers';
      /**
       * [descr:Properties.placeholder]
       */
      placeholder?: string;
      /**
       * [descr:Properties.showAnalogClock]
       */
      showAnalogClock?: boolean;
      /**
       * [descr:Properties.type]
       */
      type?: 'date' | 'datetime' | 'time';
      /**
       * [descr:Properties.useMaskBehavior]
       */
      useMaskBehavior?: boolean;
      /**
       * [descr:Properties.value]
       */
      value?: Date | number | string;

      /**
       * [descr:Properties.dropDownOptions]
       */
      dropDownOptions?: DevExpress.ui.dxPopup.Properties;
    }
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxDateBox> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxDeferRendering]
   */
  export class dxDeferRendering extends Widget<DevExpress.ui.dxDeferRendering.Properties> {}
  module dxDeferRendering {
    export type ContentReadyEvent =
      DevExpress.events.EventInfo<dxDeferRendering>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxDeferRendering>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxDeferRendering>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxDeferRendering> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends WidgetOptions<dxDeferRendering> {
      /**
       * [descr:Properties.animation]
       */
      animation?: AnimationConfig;
      /**
       * [descr:Properties.onRendered]
       */
      onRendered?: (e: {
        component?: dxDeferRendering;
        element?: DevExpress.core.DxElement;
        model?: any;
      }) => void;
      /**
       * [descr:Properties.onShown]
       */
      onShown?: (e: {
        component?: dxDeferRendering;
        element?: DevExpress.core.DxElement;
        model?: any;
      }) => void;
      /**
       * [descr:Properties.renderWhen]
       */
      renderWhen?: PromiseLike<void> | boolean;
      /**
       * [descr:Properties.showLoadIndicator]
       */
      showLoadIndicator?: boolean;
      /**
       * [descr:Properties.staggerItemSelector]
       */
      staggerItemSelector?: string;
    }
    export type RenderedEvent = DevExpress.events.EventInfo<dxDeferRendering>;
    export type ShownEvent = DevExpress.events.EventInfo<dxDeferRendering>;
  }
  /**
   * [descr:dxDiagram]
   */
  export class dxDiagram extends Widget<DevExpress.ui.dxDiagram.Properties> {
    /**
     * [descr:dxDiagram.getNodeDataSource()]
     */
    getNodeDataSource(): DevExpress.data.DataSource;
    /**
     * [descr:dxDiagram.getEdgeDataSource()]
     */
    getEdgeDataSource(): DevExpress.data.DataSource;
    /**
     * [descr:dxDiagram.getItemByKey(key)]
     */
    getItemByKey(key: Object): DevExpress.ui.dxDiagram.Item;
    /**
     * [descr:dxDiagram.getItemById(id)]
     */
    getItemById(id: string): DevExpress.ui.dxDiagram.Item;
    /**
     * [descr:dxDiagram.getItems()]
     */
    getItems(): Array<DevExpress.ui.dxDiagram.Item>;
    /**
     * [descr:dxDiagram.getSelectedItems()]
     */
    getSelectedItems(): Array<DevExpress.ui.dxDiagram.Item>;
    /**
     * [descr:dxDiagram.setSelectedItems(items)]
     */
    setSelectedItems(items: Array<DevExpress.ui.dxDiagram.Item>): void;
    /**
     * [descr:dxDiagram.scrollToItem(item)]
     */
    scrollToItem(item: DevExpress.ui.dxDiagram.Item): void;
    /**
     * [descr:dxDiagram.export()]
     */
    export(): string;
    /**
     * [descr:dxDiagram.exportTo(format, callback)]
     */
    exportTo(format: 'svg' | 'png' | 'jpg', callback: Function): void;
    /**
     * [descr:dxDiagram.import(data, updateExistingItemsOnly)]
     */
    import(data: string, updateExistingItemsOnly?: boolean): void;
    /**
     * [descr:dxDiagram.updateToolbox()]
     */
    updateToolbox(): void;
    /**
     * [descr:dxDiagram.fitToContent()]
     */
    fitToContent(): void;
    /**
     * [descr:dxDiagram.fitToWidth()]
     */
    fitToWidth(): void;
  }
  module dxDiagram {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxDiagram>;
    export type CustomCommandEvent = {
      readonly component: dxDiagram;
      readonly element: DevExpress.core.DxElement;
      readonly name: string;
    };
    export type CustomShapeTemplateData = {
      readonly item: dxDiagramShape;
    };
    export type CustomShapeToolboxTemplateData = {
      readonly item: dxDiagramShape;
    };
    export type DisposingEvent = DevExpress.events.EventInfo<dxDiagram>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxDiagram>;
    export type ItemClickEvent = DevExpress.events.EventInfo<dxDiagram> & {
      readonly item: Item;
    };
    export type ItemDblClickEvent = DevExpress.events.EventInfo<dxDiagram> & {
      readonly item: Item;
    };
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxDiagram> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends WidgetOptions<dxDiagram> {
      /**
       * [descr:Properties.autoZoomMode]
       */
      autoZoomMode?: 'fitContent' | 'fitWidth' | 'disabled';
      /**
       * [descr:Properties.contextMenu]
       */
      contextMenu?: {
        /**
         * [descr:Properties.contextMenu.commands]
         */
        commands?: Array<
          | 'separator'
          | 'exportSvg'
          | 'exportPng'
          | 'exportJpg'
          | 'undo'
          | 'redo'
          | 'cut'
          | 'copy'
          | 'paste'
          | 'selectAll'
          | 'delete'
          | 'fontName'
          | 'fontSize'
          | 'bold'
          | 'italic'
          | 'underline'
          | 'lineStyle'
          | 'lineWidth'
          | 'textAlignLeft'
          | 'textAlignCenter'
          | 'textAlignRight'
          | 'lock'
          | 'unlock'
          | 'sendToBack'
          | 'bringToFront'
          | 'insertShapeImage'
          | 'editShapeImage'
          | 'deleteShapeImage'
          | 'connectorLineType'
          | 'connectorLineStart'
          | 'connectorLineEnd'
          | 'layoutTreeTopToBottom'
          | 'layoutTreeBottomToTop'
          | 'layoutTreeLeftToRight'
          | 'layoutTreeRightToLeft'
          | 'layoutLayeredTopToBottom'
          | 'layoutLayeredBottomToTop'
          | 'layoutLayeredLeftToRight'
          | 'layoutLayeredRightToLeft'
          | 'fullScreen'
          | 'zoomLevel'
          | 'showGrid'
          | 'snapToGrid'
          | 'gridSize'
          | 'units'
          | 'pageSize'
          | 'pageOrientation'
          | 'pageColor'
          | 'simpleView'
          | 'toolbox'
        >;
        /**
         * [descr:Properties.contextMenu.enabled]
         */
        enabled?: boolean;
      };
      /**
       * [descr:Properties.contextToolbox]
       */
      contextToolbox?: {
        /**
         * [descr:Properties.contextToolbox.category]
         */
        category?:
          | 'general'
          | 'flowchart'
          | 'orgChart'
          | 'containers'
          | 'custom'
          | string;
        /**
         * [descr:Properties.contextToolbox.displayMode]
         */
        displayMode?: 'icons' | 'texts';
        /**
         * [descr:Properties.contextToolbox.enabled]
         */
        enabled?: boolean;
        /**
         * [descr:Properties.contextToolbox.shapeIconsPerRow]
         */
        shapeIconsPerRow?: number;
        /**
         * [descr:Properties.contextToolbox.shapes]
         */
        shapes?:
          | Array<
              | 'text'
              | 'rectangle'
              | 'ellipse'
              | 'cross'
              | 'triangle'
              | 'diamond'
              | 'heart'
              | 'pentagon'
              | 'hexagon'
              | 'octagon'
              | 'star'
              | 'arrowLeft'
              | 'arrowTop'
              | 'arrowRight'
              | 'arrowBottom'
              | 'arrowNorthSouth'
              | 'arrowEastWest'
              | 'process'
              | 'decision'
              | 'terminator'
              | 'predefinedProcess'
              | 'document'
              | 'multipleDocuments'
              | 'manualInput'
              | 'preparation'
              | 'data'
              | 'database'
              | 'hardDisk'
              | 'internalStorage'
              | 'paperTape'
              | 'manualOperation'
              | 'delay'
              | 'storedData'
              | 'display'
              | 'merge'
              | 'connector'
              | 'or'
              | 'summingJunction'
              | 'verticalContainer'
              | 'horizontalContainer'
              | 'cardWithImageOnLeft'
              | 'cardWithImageOnTop'
              | 'cardWithImageOnRight'
            >
          | Array<string>;
        /**
         * [descr:Properties.contextToolbox.width]
         */
        width?: number;
      };
      /**
       * [descr:Properties.onCustomCommand]
       */
      onCustomCommand?: (e: CustomCommandEvent) => void;
      /**
       * [descr:Properties.customShapeTemplate]
       */
      customShapeTemplate?:
        | DevExpress.core.template
        | ((
            container: DevExpress.core.DxElement<SVGElement>,
            data: CustomShapeTemplateData
          ) => any);
      /**
       * [descr:Properties.customShapeToolboxTemplate]
       */
      customShapeToolboxTemplate?:
        | DevExpress.core.template
        | ((
            container: DevExpress.core.DxElement<SVGElement>,
            data: CustomShapeToolboxTemplateData
          ) => any);
      /**
       * [descr:Properties.customShapes]
       */
      customShapes?: Array<{
        /**
         * [descr:Properties.customShapes.allowEditImage]
         */
        allowEditImage?: boolean;
        /**
         * [descr:Properties.customShapes.allowEditText]
         */
        allowEditText?: boolean;
        /**
         * [descr:Properties.customShapes.allowResize]
         */
        allowResize?: boolean;
        /**
         * [descr:Properties.customShapes.backgroundImageHeight]
         */
        backgroundImageHeight?: number;
        /**
         * [descr:Properties.customShapes.backgroundImageLeft]
         */
        backgroundImageLeft?: number;
        /**
         * [descr:Properties.customShapes.backgroundImageTop]
         */
        backgroundImageTop?: number;
        /**
         * [descr:Properties.customShapes.backgroundImageUrl]
         */
        backgroundImageUrl?: string;
        /**
         * [descr:Properties.customShapes.backgroundImageToolboxUrl]
         */
        backgroundImageToolboxUrl?: string;
        /**
         * [descr:Properties.customShapes.backgroundImageWidth]
         */
        backgroundImageWidth?: number;
        /**
         * [descr:Properties.customShapes.baseType]
         */
        baseType?:
          | 'text'
          | 'rectangle'
          | 'ellipse'
          | 'cross'
          | 'triangle'
          | 'diamond'
          | 'heart'
          | 'pentagon'
          | 'hexagon'
          | 'octagon'
          | 'star'
          | 'arrowLeft'
          | 'arrowTop'
          | 'arrowRight'
          | 'arrowBottom'
          | 'arrowNorthSouth'
          | 'arrowEastWest'
          | 'process'
          | 'decision'
          | 'terminator'
          | 'predefinedProcess'
          | 'document'
          | 'multipleDocuments'
          | 'manualInput'
          | 'preparation'
          | 'data'
          | 'database'
          | 'hardDisk'
          | 'internalStorage'
          | 'paperTape'
          | 'manualOperation'
          | 'delay'
          | 'storedData'
          | 'display'
          | 'merge'
          | 'connector'
          | 'or'
          | 'summingJunction'
          | 'verticalContainer'
          | 'horizontalContainer'
          | 'cardWithImageOnLeft'
          | 'cardWithImageOnTop'
          | 'cardWithImageOnRight'
          | string;
        /**
         * [descr:Properties.customShapes.category]
         */
        category?: string;
        /**
         * [descr:Properties.customShapes.connectionPoints]
         */
        connectionPoints?: Array<{
          /**
           * [descr:Properties.customShapes.connectionPoints.x]
           */
          x?: number;
          /**
           * [descr:Properties.customShapes.connectionPoints.y]
           */
          y?: number;
        }>;
        /**
         * [descr:Properties.customShapes.defaultHeight]
         */
        defaultHeight?: number;
        /**
         * [descr:Properties.customShapes.defaultImageUrl]
         */
        defaultImageUrl?: string;
        /**
         * [descr:Properties.customShapes.defaultText]
         */
        defaultText?: string;
        /**
         * [descr:Properties.customShapes.defaultWidth]
         */
        defaultWidth?: number;
        /**
         * [descr:Properties.customShapes.imageHeight]
         */
        imageHeight?: number;
        /**
         * [descr:Properties.customShapes.imageLeft]
         */
        imageLeft?: number;
        /**
         * [descr:Properties.customShapes.imageTop]
         */
        imageTop?: number;
        /**
         * [descr:Properties.customShapes.imageWidth]
         */
        imageWidth?: number;
        /**
         * [descr:Properties.customShapes.keepRatioOnAutoSize]
         */
        keepRatioOnAutoSize?: boolean;
        /**
         * [descr:Properties.customShapes.maxHeight]
         */
        maxHeight?: number;
        /**
         * [descr:Properties.customShapes.maxWidth]
         */
        maxWidth?: number;
        /**
         * [descr:Properties.customShapes.minHeight]
         */
        minHeight?: number;
        /**
         * [descr:Properties.customShapes.minWidth]
         */
        minWidth?: number;
        /**
         * [descr:Properties.customShapes.template]
         */
        template?:
          | DevExpress.core.template
          | ((
              container: DevExpress.core.DxElement<SVGElement>,
              data: CustomShapeTemplateData
            ) => any);
        /**
         * [descr:Properties.customShapes.templateHeight]
         */
        templateHeight?: number;
        /**
         * [descr:Properties.customShapes.templateLeft]
         */
        templateLeft?: number;
        /**
         * [descr:Properties.customShapes.templateTop]
         */
        templateTop?: number;
        /**
         * [descr:Properties.customShapes.templateWidth]
         */
        templateWidth?: number;
        /**
         * [descr:Properties.customShapes.textHeight]
         */
        textHeight?: number;
        /**
         * [descr:Properties.customShapes.textLeft]
         */
        textLeft?: number;
        /**
         * [descr:Properties.customShapes.textTop]
         */
        textTop?: number;
        /**
         * [descr:Properties.customShapes.textWidth]
         */
        textWidth?: number;
        /**
         * [descr:Properties.customShapes.title]
         */
        title?: string;
        /**
         * [descr:Properties.customShapes.toolboxTemplate]
         */
        toolboxTemplate?:
          | DevExpress.core.template
          | ((
              container: DevExpress.core.DxElement<SVGElement>,
              data: CustomShapeToolboxTemplateData
            ) => any);
        /**
         * [descr:Properties.customShapes.toolboxWidthToHeightRatio]
         */
        toolboxWidthToHeightRatio?: number;
        /**
         * [descr:Properties.customShapes.type]
         */
        type?: string;
      }>;
      /**
       * [descr:Properties.defaultItemProperties]
       */
      defaultItemProperties?: {
        /**
         * [descr:Properties.defaultItemProperties.style]
         */
        style?: Object;
        /**
         * [descr:Properties.defaultItemProperties.textStyle]
         */
        textStyle?: Object;
        /**
         * [descr:Properties.defaultItemProperties.connectorLineType]
         */
        connectorLineType?: 'straight' | 'orthogonal';
        /**
         * [descr:Properties.defaultItemProperties.connectorLineStart]
         */
        connectorLineStart?:
          | 'none'
          | 'arrow'
          | 'outlinedTriangle'
          | 'filledTriangle';
        /**
         * [descr:Properties.defaultItemProperties.connectorLineEnd]
         */
        connectorLineEnd?:
          | 'none'
          | 'arrow'
          | 'outlinedTriangle'
          | 'filledTriangle';
        /**
         * [descr:Properties.defaultItemProperties.shapeMinWidth]
         */
        shapeMinWidth?: number;
        /**
         * [descr:Properties.defaultItemProperties.shapeMaxWidth]
         */
        shapeMaxWidth?: number;
        /**
         * [descr:Properties.defaultItemProperties.shapeMinHeight]
         */
        shapeMinHeight?: number;
        /**
         * [descr:Properties.defaultItemProperties.shapeMaxHeight]
         */
        shapeMaxHeight?: number;
      };
      /**
       * [descr:Properties.editing]
       */
      editing?: {
        /**
         * [descr:Properties.editing.allowAddShape]
         */
        allowAddShape?: boolean;
        /**
         * [descr:Properties.editing.allowDeleteShape]
         */
        allowDeleteShape?: boolean;
        /**
         * [descr:Properties.editing.allowDeleteConnector]
         */
        allowDeleteConnector?: boolean;
        /**
         * [descr:Properties.editing.allowChangeConnection]
         */
        allowChangeConnection?: boolean;
        /**
         * [descr:Properties.editing.allowChangeConnectorPoints]
         */
        allowChangeConnectorPoints?: boolean;
        /**
         * [descr:Properties.editing.allowChangeConnectorText]
         */
        allowChangeConnectorText?: boolean;
        /**
         * [descr:Properties.editing.allowChangeShapeText]
         */
        allowChangeShapeText?: boolean;
        /**
         * [descr:Properties.editing.allowResizeShape]
         */
        allowResizeShape?: boolean;
        /**
         * [descr:Properties.editing.allowMoveShape]
         */
        allowMoveShape?: boolean;
      };
      /**
       * [descr:Properties.edges]
       */
      edges?: {
        /**
         * [descr:Properties.edges.customDataExpr]
         */
        customDataExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.edges.dataSource]
         */
        dataSource?: DevExpress.data.DataSource.DataSourceLike<any>;
        /**
         * [descr:Properties.edges.fromExpr]
         */
        fromExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.edges.fromLineEndExpr]
         */
        fromLineEndExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.edges.fromPointIndexExpr]
         */
        fromPointIndexExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.edges.keyExpr]
         */
        keyExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.edges.lineTypeExpr]
         */
        lineTypeExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.edges.lockedExpr]
         */
        lockedExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.edges.pointsExpr]
         */
        pointsExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.edges.styleExpr]
         */
        styleExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.edges.textExpr]
         */
        textExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.edges.textStyleExpr]
         */
        textStyleExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.edges.toExpr]
         */
        toExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.edges.toLineEndExpr]
         */
        toLineEndExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.edges.toPointIndexExpr]
         */
        toPointIndexExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.edges.zIndexExpr]
         */
        zIndexExpr?: string | ((data: any, value?: any) => any);
      };
      /**
       * [descr:Properties.export]
       */
      export?: {
        /**
         * [descr:Properties.export.fileName]
         */
        fileName?: string;
        /**
         * [descr:Properties.export.proxyUrl]
         * @deprecated [depNote:Properties.export.proxyUrl]
         */
        proxyUrl?: string;
      };
      /**
       * [descr:Properties.fullScreen]
       */
      fullScreen?: boolean;
      /**
       * [descr:Properties.gridSize]
       */
      gridSize?:
        | number
        | {
            /**
             * [descr:Properties.gridSize.items]
             */
            items?: Array<number>;
            /**
             * [descr:Properties.gridSize.value]
             */
            value?: number;
          };
      /**
       * [descr:Properties.nodes]
       */
      nodes?: {
        /**
         * [descr:Properties.nodes.autoLayout]
         */
        autoLayout?:
          | 'off'
          | 'tree'
          | 'layered'
          | {
              /**
               * [descr:Properties.nodes.autoLayout.orientation]
               */
              orientation?: 'vertical' | 'horizontal';
              /**
               * [descr:Properties.nodes.autoLayout.type]
               */
              type?: 'off' | 'tree' | 'layered';
            };
        /**
         * [descr:Properties.nodes.autoSizeEnabled]
         */
        autoSizeEnabled?: boolean;
        /**
         * [descr:Properties.nodes.containerKeyExpr]
         */
        containerKeyExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.nodes.containerChildrenExpr]
         */
        containerChildrenExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.nodes.customDataExpr]
         */
        customDataExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.nodes.dataSource]
         */
        dataSource?: DevExpress.data.DataSource.DataSourceLike<any>;
        /**
         * [descr:Properties.nodes.heightExpr]
         */
        heightExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.nodes.imageUrlExpr]
         */
        imageUrlExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.nodes.itemsExpr]
         */
        itemsExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.nodes.keyExpr]
         */
        keyExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.nodes.leftExpr]
         */
        leftExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.nodes.lockedExpr]
         */
        lockedExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.nodes.parentKeyExpr]
         */
        parentKeyExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.nodes.styleExpr]
         */
        styleExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.nodes.textExpr]
         */
        textExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.nodes.textStyleExpr]
         */
        textStyleExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.nodes.topExpr]
         */
        topExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.nodes.typeExpr]
         */
        typeExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.nodes.widthExpr]
         */
        widthExpr?: string | ((data: any, value?: any) => any);
        /**
         * [descr:Properties.nodes.zIndexExpr]
         */
        zIndexExpr?: string | ((data: any, value?: any) => any);
      };
      /**
       * [descr:Properties.hasChanges]
       */
      hasChanges?: boolean;
      /**
       * [descr:Properties.onItemClick]
       */
      onItemClick?: (e: ItemClickEvent) => void;
      /**
       * [descr:Properties.onItemDblClick]
       */
      onItemDblClick?: (e: ItemDblClickEvent) => void;
      /**
       * [descr:Properties.onSelectionChanged]
       */
      onSelectionChanged?: (e: SelectionChangedEvent) => void;
      /**
       * [descr:Properties.onRequestEditOperation]
       */
      onRequestEditOperation?: (e: RequestEditOperationEvent) => void;
      /**
       * [descr:Properties.onRequestLayoutUpdate]
       */
      onRequestLayoutUpdate?: (e: RequestLayoutUpdateEvent) => void;
      /**
       * [descr:Properties.pageColor]
       */
      pageColor?: string;
      /**
       * [descr:Properties.pageOrientation]
       */
      pageOrientation?: 'portrait' | 'landscape';
      /**
       * [descr:Properties.pageSize]
       */
      pageSize?: {
        /**
         * [descr:Properties.pageSize.height]
         */
        height?: number;
        /**
         * [descr:Properties.pageSize.items]
         */
        items?: Array<{
          /**
           * [descr:Properties.pageSize.items.height]
           */
          height?: number;
          /**
           * [descr:Properties.pageSize.items.text]
           */
          text?: string;
          /**
           * [descr:Properties.pageSize.items.width]
           */
          width?: number;
        }>;
        /**
         * [descr:Properties.pageSize.width]
         */
        width?: number;
      };
      /**
       * [descr:Properties.propertiesPanel]
       */
      propertiesPanel?: {
        /**
         * [descr:Properties.propertiesPanel.tabs]
         */
        tabs?: Array<{
          /**
           * [descr:Properties.propertiesPanel.tabs.commands]
           */
          commands?: Array<
            | 'separator'
            | 'exportSvg'
            | 'exportPng'
            | 'exportJpg'
            | 'undo'
            | 'redo'
            | 'cut'
            | 'copy'
            | 'paste'
            | 'selectAll'
            | 'delete'
            | 'fontName'
            | 'fontSize'
            | 'bold'
            | 'italic'
            | 'underline'
            | 'fontColor'
            | 'lineStyle'
            | 'lineWidth'
            | 'lineColor'
            | 'fillColor'
            | 'textAlignLeft'
            | 'textAlignCenter'
            | 'textAlignRight'
            | 'lock'
            | 'unlock'
            | 'sendToBack'
            | 'bringToFront'
            | 'insertShapeImage'
            | 'editShapeImage'
            | 'deleteShapeImage'
            | 'connectorLineType'
            | 'connectorLineStart'
            | 'connectorLineEnd'
            | 'layoutTreeTopToBottom'
            | 'layoutTreeBottomToTop'
            | 'layoutTreeLeftToRight'
            | 'layoutTreeRightToLeft'
            | 'layoutLayeredTopToBottom'
            | 'layoutLayeredBottomToTop'
            | 'layoutLayeredLeftToRight'
            | 'layoutLayeredRightToLeft'
            | 'fullScreen'
            | 'zoomLevel'
            | 'showGrid'
            | 'snapToGrid'
            | 'gridSize'
            | 'units'
            | 'pageSize'
            | 'pageOrientation'
            | 'pageColor'
            | 'simpleView'
            | 'toolbox'
          >;
          /**
           * [descr:Properties.propertiesPanel.tabs.groups]
           */
          groups?: Array<{
            /**
             * [descr:Properties.propertiesPanel.tabs.groups.commands]
             */
            commands?: Array<
              | 'separator'
              | 'exportSvg'
              | 'exportPng'
              | 'exportJpg'
              | 'undo'
              | 'redo'
              | 'cut'
              | 'copy'
              | 'paste'
              | 'selectAll'
              | 'delete'
              | 'fontName'
              | 'fontSize'
              | 'bold'
              | 'italic'
              | 'underline'
              | 'fontColor'
              | 'lineStyle'
              | 'lineWidth'
              | 'lineColor'
              | 'fillColor'
              | 'textAlignLeft'
              | 'textAlignCenter'
              | 'textAlignRight'
              | 'lock'
              | 'unlock'
              | 'sendToBack'
              | 'bringToFront'
              | 'insertShapeImage'
              | 'editShapeImage'
              | 'deleteShapeImage'
              | 'connectorLineType'
              | 'connectorLineStart'
              | 'connectorLineEnd'
              | 'layoutTreeTopToBottom'
              | 'layoutTreeBottomToTop'
              | 'layoutTreeLeftToRight'
              | 'layoutTreeRightToLeft'
              | 'layoutLayeredTopToBottom'
              | 'layoutLayeredBottomToTop'
              | 'layoutLayeredLeftToRight'
              | 'layoutLayeredRightToLeft'
              | 'fullScreen'
              | 'zoomLevel'
              | 'showGrid'
              | 'snapToGrid'
              | 'gridSize'
              | 'units'
              | 'pageSize'
              | 'pageOrientation'
              | 'pageColor'
              | 'simpleView'
              | 'toolbox'
            >;
            /**
             * [descr:Properties.propertiesPanel.tabs.groups.title]
             */
            title?: string;
          }>;
          /**
           * [descr:Properties.propertiesPanel.tabs.title]
           */
          title?: string;
        }>;
        /**
         * [descr:Properties.propertiesPanel.visibility]
         */
        visibility?: 'auto' | 'visible' | 'collapsed' | 'disabled';
      };
      /**
       * [descr:Properties.readOnly]
       */
      readOnly?: boolean;
      /**
       * [descr:Properties.showGrid]
       */
      showGrid?: boolean;
      /**
       * [descr:Properties.simpleView]
       */
      simpleView?: boolean;
      /**
       * [descr:Properties.useNativeScrolling]
       */
      useNativeScrolling?: boolean;
      /**
       * [descr:Properties.snapToGrid]
       */
      snapToGrid?: boolean;
      /**
       * [descr:Properties.mainToolbar]
       */
      mainToolbar?: {
        /**
         * [descr:Properties.mainToolbar.commands]
         */
        commands?: Array<
          | 'separator'
          | 'exportSvg'
          | 'exportPng'
          | 'exportJpg'
          | 'undo'
          | 'redo'
          | 'cut'
          | 'copy'
          | 'paste'
          | 'selectAll'
          | 'delete'
          | 'fontName'
          | 'fontSize'
          | 'bold'
          | 'italic'
          | 'underline'
          | 'fontColor'
          | 'lineStyle'
          | 'lineWidth'
          | 'lineColor'
          | 'fillColor'
          | 'textAlignLeft'
          | 'textAlignCenter'
          | 'textAlignRight'
          | 'lock'
          | 'unlock'
          | 'sendToBack'
          | 'bringToFront'
          | 'insertShapeImage'
          | 'editShapeImage'
          | 'deleteShapeImage'
          | 'connectorLineType'
          | 'connectorLineStart'
          | 'connectorLineEnd'
          | 'layoutTreeTopToBottom'
          | 'layoutTreeBottomToTop'
          | 'layoutTreeLeftToRight'
          | 'layoutTreeRightToLeft'
          | 'layoutLayeredTopToBottom'
          | 'layoutLayeredBottomToTop'
          | 'layoutLayeredLeftToRight'
          | 'layoutLayeredRightToLeft'
          | 'fullScreen'
          | 'zoomLevel'
          | 'showGrid'
          | 'snapToGrid'
          | 'gridSize'
          | 'units'
          | 'pageSize'
          | 'pageOrientation'
          | 'pageColor'
          | 'simpleView'
          | 'toolbox'
        >;
        /**
         * [descr:Properties.mainToolbar.visible]
         */
        visible?: boolean;
      };
      /**
       * [descr:Properties.historyToolbar]
       */
      historyToolbar?: {
        /**
         * [descr:Properties.historyToolbar.commands]
         */
        commands?: Array<
          | 'separator'
          | 'exportSvg'
          | 'exportPng'
          | 'exportJpg'
          | 'undo'
          | 'redo'
          | 'cut'
          | 'copy'
          | 'paste'
          | 'selectAll'
          | 'delete'
          | 'fontName'
          | 'fontSize'
          | 'bold'
          | 'italic'
          | 'underline'
          | 'fontColor'
          | 'lineStyle'
          | 'lineWidth'
          | 'lineColor'
          | 'fillColor'
          | 'textAlignLeft'
          | 'textAlignCenter'
          | 'textAlignRight'
          | 'lock'
          | 'unlock'
          | 'sendToBack'
          | 'bringToFront'
          | 'insertShapeImage'
          | 'editShapeImage'
          | 'deleteShapeImage'
          | 'connectorLineType'
          | 'connectorLineStart'
          | 'connectorLineEnd'
          | 'layoutTreeTopToBottom'
          | 'layoutTreeBottomToTop'
          | 'layoutTreeLeftToRight'
          | 'layoutTreeRightToLeft'
          | 'layoutLayeredTopToBottom'
          | 'layoutLayeredBottomToTop'
          | 'layoutLayeredLeftToRight'
          | 'layoutLayeredRightToLeft'
          | 'fullScreen'
          | 'zoomLevel'
          | 'showGrid'
          | 'snapToGrid'
          | 'gridSize'
          | 'units'
          | 'pageSize'
          | 'pageOrientation'
          | 'pageColor'
          | 'simpleView'
          | 'toolbox'
        >;
        /**
         * [descr:Properties.historyToolbar.visible]
         */
        visible?: boolean;
      };
      /**
       * [descr:Properties.viewToolbar]
       */
      viewToolbar?: {
        /**
         * [descr:Properties.viewToolbar.commands]
         */
        commands?: Array<
          | 'separator'
          | 'exportSvg'
          | 'exportPng'
          | 'exportJpg'
          | 'undo'
          | 'redo'
          | 'cut'
          | 'copy'
          | 'paste'
          | 'selectAll'
          | 'delete'
          | 'fontName'
          | 'fontSize'
          | 'bold'
          | 'italic'
          | 'underline'
          | 'fontColor'
          | 'lineStyle'
          | 'lineWidth'
          | 'lineColor'
          | 'fillColor'
          | 'textAlignLeft'
          | 'textAlignCenter'
          | 'textAlignRight'
          | 'lock'
          | 'unlock'
          | 'sendToBack'
          | 'bringToFront'
          | 'insertShapeImage'
          | 'editShapeImage'
          | 'deleteShapeImage'
          | 'connectorLineType'
          | 'connectorLineStart'
          | 'connectorLineEnd'
          | 'layoutTreeTopToBottom'
          | 'layoutTreeBottomToTop'
          | 'layoutTreeLeftToRight'
          | 'layoutTreeRightToLeft'
          | 'layoutLayeredTopToBottom'
          | 'layoutLayeredBottomToTop'
          | 'layoutLayeredLeftToRight'
          | 'layoutLayeredRightToLeft'
          | 'fullScreen'
          | 'zoomLevel'
          | 'showGrid'
          | 'snapToGrid'
          | 'gridSize'
          | 'units'
          | 'pageSize'
          | 'pageOrientation'
          | 'pageColor'
          | 'simpleView'
          | 'toolbox'
        >;
        /**
         * [descr:Properties.viewToolbar.visible]
         */
        visible?: boolean;
      };
      /**
       * [descr:Properties.toolbox]
       */
      toolbox?: {
        /**
         * [descr:Properties.toolbox.groups]
         */
        groups?:
          | Array<{
              /**
               * [descr:Properties.toolbox.groups.category]
               */
              category?:
                | 'general'
                | 'flowchart'
                | 'orgChart'
                | 'containers'
                | 'custom'
                | string;
              /**
               * [descr:Properties.toolbox.groups.displayMode]
               */
              displayMode?: 'icons' | 'texts';
              /**
               * [descr:Properties.toolbox.groups.expanded]
               */
              expanded?: boolean;
              /**
               * [descr:Properties.toolbox.groups.shapes]
               */
              shapes?:
                | Array<
                    | 'text'
                    | 'rectangle'
                    | 'ellipse'
                    | 'cross'
                    | 'triangle'
                    | 'diamond'
                    | 'heart'
                    | 'pentagon'
                    | 'hexagon'
                    | 'octagon'
                    | 'star'
                    | 'arrowLeft'
                    | 'arrowTop'
                    | 'arrowRight'
                    | 'arrowBottom'
                    | 'arrowNorthSouth'
                    | 'arrowEastWest'
                    | 'process'
                    | 'decision'
                    | 'terminator'
                    | 'predefinedProcess'
                    | 'document'
                    | 'multipleDocuments'
                    | 'manualInput'
                    | 'preparation'
                    | 'data'
                    | 'database'
                    | 'hardDisk'
                    | 'internalStorage'
                    | 'paperTape'
                    | 'manualOperation'
                    | 'delay'
                    | 'storedData'
                    | 'display'
                    | 'merge'
                    | 'connector'
                    | 'or'
                    | 'summingJunction'
                    | 'verticalContainer'
                    | 'horizontalContainer'
                    | 'cardWithImageOnLeft'
                    | 'cardWithImageOnTop'
                    | 'cardWithImageOnRight'
                  >
                | Array<string>;
              /**
               * [descr:Properties.toolbox.groups.title]
               */
              title?: string;
            }>
          | Array<
              'general' | 'flowchart' | 'orgChart' | 'containers' | 'custom'
            >;
        /**
         * [descr:Properties.toolbox.shapeIconsPerRow]
         */
        shapeIconsPerRow?: number;
        /**
         * [descr:Properties.toolbox.showSearch]
         */
        showSearch?: boolean;
        /**
         * [descr:Properties.toolbox.visibility]
         */
        visibility?: 'auto' | 'visible' | 'collapsed' | 'disabled';
        /**
         * [descr:Properties.toolbox.width]
         */
        width?: number;
      };
      /**
       * [descr:Properties.units]
       */
      units?: 'in' | 'cm' | 'px';
      /**
       * [descr:Properties.viewUnits]
       */
      viewUnits?: 'in' | 'cm' | 'px';
      /**
       * [descr:Properties.zoomLevel]
       */
      zoomLevel?:
        | number
        | {
            /**
             * [descr:Properties.zoomLevel.items]
             */
            items?: Array<number>;
            /**
             * [descr:Properties.zoomLevel.value]
             */
            value?: number;
          };
    }
    export type RequestEditOperationEvent =
      DevExpress.events.EventInfo<dxDiagram> & {
        readonly operation:
          | 'addShape'
          | 'addShapeFromToolbox'
          | 'deleteShape'
          | 'deleteConnector'
          | 'changeConnection'
          | 'changeConnectorPoints';
        readonly args:
          | dxDiagramAddShapeArgs
          | dxDiagramAddShapeFromToolboxArgs
          | dxDiagramDeleteShapeArgs
          | dxDiagramDeleteConnectorArgs
          | dxDiagramChangeConnectionArgs
          | dxDiagramChangeConnectorPointsArgs
          | dxDiagramBeforeChangeShapeTextArgs
          | dxDiagramChangeShapeTextArgs
          | dxDiagramBeforeChangeConnectorTextArgs
          | dxDiagramChangeConnectorTextArgs
          | dxDiagramResizeShapeArgs
          | dxDiagramMoveShapeArgs;
        readonly reason: 'checkUIElementAvailability' | 'modelModification';
        allowed?: boolean;
      };
    export type RequestLayoutUpdateEvent =
      DevExpress.events.EventInfo<dxDiagram> & {
        readonly changes: any[];
        allowed?: boolean;
      };
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxDiagram> & {
        readonly items: Array<Item>;
      };
  }
  /**
   * [descr:dxDiagramAddShapeArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDiagramAddShapeArgs {
    /**
     * [descr:dxDiagramAddShapeArgs.shape]
     */
    shape?: dxDiagramShape;
    /**
     * [descr:dxDiagramAddShapeArgs.position]
     */
    position?: {
      /**
       * [descr:dxDiagramAddShapeArgs.position.x]
       */
      x?: number;
      /**
       * [descr:dxDiagramAddShapeArgs.position.y]
       */
      y?: number;
    };
  }
  /**
   * [descr:dxDiagramAddShapeFromToolboxArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDiagramAddShapeFromToolboxArgs {
    /**
     * [descr:dxDiagramAddShapeFromToolboxArgs.shapeType]
     */
    shapeType?:
      | 'text'
      | 'rectangle'
      | 'ellipse'
      | 'cross'
      | 'triangle'
      | 'diamond'
      | 'heart'
      | 'pentagon'
      | 'hexagon'
      | 'octagon'
      | 'star'
      | 'arrowLeft'
      | 'arrowTop'
      | 'arrowRight'
      | 'arrowBottom'
      | 'arrowNorthSouth'
      | 'arrowEastWest'
      | 'process'
      | 'decision'
      | 'terminator'
      | 'predefinedProcess'
      | 'document'
      | 'multipleDocuments'
      | 'manualInput'
      | 'preparation'
      | 'data'
      | 'database'
      | 'hardDisk'
      | 'internalStorage'
      | 'paperTape'
      | 'manualOperation'
      | 'delay'
      | 'storedData'
      | 'display'
      | 'merge'
      | 'connector'
      | 'or'
      | 'summingJunction'
      | 'verticalContainer'
      | 'horizontalContainer'
      | 'cardWithImageOnLeft'
      | 'cardWithImageOnTop'
      | 'cardWithImageOnRight'
      | string;
  }
  /**
   * [descr:dxDiagramBeforeChangeConnectorTextArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDiagramBeforeChangeConnectorTextArgs {
    /**
     * [descr:dxDiagramBeforeChangeConnectorTextArgs.connector]
     */
    connector?: dxDiagramConnector;
    /**
     * [descr:dxDiagramBeforeChangeConnectorTextArgs.index]
     */
    index?: number;
  }
  /**
   * [descr:dxDiagramBeforeChangeShapeTextArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDiagramBeforeChangeShapeTextArgs {
    /**
     * [descr:dxDiagramBeforeChangeShapeTextArgs.shape]
     */
    shape?: dxDiagramShape;
  }
  /**
   * [descr:dxDiagramChangeConnectionArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDiagramChangeConnectionArgs {
    /**
     * [descr:dxDiagramChangeConnectionArgs.newShape]
     */
    newShape?: dxDiagramShape;
    /**
     * [descr:dxDiagramChangeConnectionArgs.oldShape]
     */
    oldShape?: dxDiagramShape;
    /**
     * [descr:dxDiagramChangeConnectionArgs.connector]
     */
    connector?: dxDiagramConnector;
    /**
     * [descr:dxDiagramChangeConnectionArgs.connectionPointIndex]
     */
    connectionPointIndex?: number;
    /**
     * [descr:dxDiagramChangeConnectionArgs.connectorPosition]
     */
    connectorPosition?: 'start' | 'end';
  }
  /**
   * [descr:dxDiagramChangeConnectorPointsArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDiagramChangeConnectorPointsArgs {
    /**
     * [descr:dxDiagramChangeConnectorPointsArgs.connector]
     */
    connector?: dxDiagramConnector;
    /**
     * [descr:dxDiagramChangeConnectorPointsArgs.newPoints]
     */
    newPoints?: Array<{
      /**
       * [descr:dxDiagramChangeConnectorPointsArgs.newPoints.x]
       */
      x?: number;
      /**
       * [descr:dxDiagramChangeConnectorPointsArgs.newPoints.y]
       */
      y?: number;
    }>;
    /**
     * [descr:dxDiagramChangeConnectorPointsArgs.oldPoints]
     */
    oldPoints?: Array<{
      /**
       * [descr:dxDiagramChangeConnectorPointsArgs.oldPoints.x]
       */
      x?: number;
      /**
       * [descr:dxDiagramChangeConnectorPointsArgs.oldPoints.y]
       */
      y?: number;
    }>;
  }
  /**
   * [descr:dxDiagramChangeConnectorTextArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDiagramChangeConnectorTextArgs {
    /**
     * [descr:dxDiagramChangeConnectorTextArgs.connector]
     */
    connector?: dxDiagramConnector;
    /**
     * [descr:dxDiagramChangeConnectorTextArgs.index]
     */
    index?: number;
    /**
     * [descr:dxDiagramChangeConnectorTextArgs.text]
     */
    text?: string;
  }
  /**
   * [descr:dxDiagramChangeShapeTextArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDiagramChangeShapeTextArgs {
    /**
     * [descr:dxDiagramChangeShapeTextArgs.shape]
     */
    shape?: dxDiagramShape;
    /**
     * [descr:dxDiagramChangeShapeTextArgs.text]
     */
    text?: string;
  }
  /**
   * [descr:dxDiagramConnector]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDiagramConnector extends DevExpress.ui.dxDiagram.Item {
    /**
     * [descr:dxDiagramConnector.fromKey]
     */
    fromKey?: any;
    /**
     * [descr:dxDiagramConnector.fromId]
     */
    fromId?: string;
    /**
     * [descr:dxDiagramConnector.fromPointIndex]
     */
    fromPointIndex?: number;
    /**
     * [descr:dxDiagramConnector.points]
     */
    points?: Array<{
      /**
       * [descr:dxDiagramConnector.points.x]
       */
      x?: number;
      /**
       * [descr:dxDiagramConnector.points.y]
       */
      y?: number;
    }>;

    /**
     * [descr:dxDiagramConnector.texts]
     */
    texts?: Array<string>;
    /**
     * [descr:dxDiagramConnector.toKey]
     */
    toKey?: any;
    /**
     * [descr:dxDiagramConnector.toId]
     */
    toId?: string;
    /**
     * [descr:dxDiagramConnector.toPointIndex]
     */
    toPointIndex?: number;
  }
  /**
   * [descr:dxDiagramCustomCommand]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDiagramCustomCommand {
    /**
     * [descr:dxDiagramCustomCommand.name]
     */
    name?: string;
    /**
     * [descr:dxDiagramCustomCommand.text]
     */
    text?: string;
    /**
     * [descr:dxDiagramCustomCommand.icon]
     */
    icon?: string;
    /**
     * [descr:dxDiagramCustomCommand.items]
     */
    items?: Array<dxDiagramCustomCommand>;
  }
  /**
   * [descr:dxDiagramDeleteConnectorArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDiagramDeleteConnectorArgs {
    /**
     * [descr:dxDiagramDeleteConnectorArgs.connector]
     */
    connector?: dxDiagramConnector;
  }
  /**
   * [descr:dxDiagramDeleteShapeArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDiagramDeleteShapeArgs {
    /**
     * [descr:dxDiagramDeleteShapeArgs.shape]
     */
    shape?: dxDiagramShape;
  }
  /**
   * [descr:dxDiagramMoveShapeArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDiagramMoveShapeArgs {
    /**
     * [descr:dxDiagramMoveShapeArgs.shape]
     */
    shape?: dxDiagramShape;
    /**
     * [descr:dxDiagramMoveShapeArgs.newPosition]
     */
    newPosition?: {
      /**
       * [descr:dxDiagramMoveShapeArgs.newPosition.x]
       */
      x?: number;
      /**
       * [descr:dxDiagramMoveShapeArgs.newPosition.y]
       */
      y?: number;
    };
    /**
     * [descr:dxDiagramMoveShapeArgs.oldPosition]
     */
    oldPosition?: {
      /**
       * [descr:dxDiagramMoveShapeArgs.oldPosition.x]
       */
      x?: number;
      /**
       * [descr:dxDiagramMoveShapeArgs.oldPosition.y]
       */
      y?: number;
    };
  }
  /**
   * [descr:dxDiagramResizeShapeArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDiagramResizeShapeArgs {
    /**
     * [descr:dxDiagramResizeShapeArgs.shape]
     */
    shape?: dxDiagramShape;
    /**
     * [descr:dxDiagramResizeShapeArgs.newSize]
     */
    newSize?: {
      /**
       * [descr:dxDiagramResizeShapeArgs.newSize.height]
       */
      height?: number;
      /**
       * [descr:dxDiagramResizeShapeArgs.newSize.width]
       */
      width?: number;
    };
    /**
     * [descr:dxDiagramResizeShapeArgs.oldSize]
     */
    oldSize?: {
      /**
       * [descr:dxDiagramResizeShapeArgs.oldSize.height]
       */
      height?: number;
      /**
       * [descr:dxDiagramResizeShapeArgs.oldSize.width]
       */
      width?: number;
    };
  }
  /**
   * [descr:dxDiagramShape]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDiagramShape extends DevExpress.ui.dxDiagram.Item {
    /**
     * [descr:dxDiagramShape.text]
     */
    text?: string;
    /**
     * [descr:dxDiagramShape.type]
     */
    type?:
      | 'text'
      | 'rectangle'
      | 'ellipse'
      | 'cross'
      | 'triangle'
      | 'diamond'
      | 'heart'
      | 'pentagon'
      | 'hexagon'
      | 'octagon'
      | 'star'
      | 'arrowLeft'
      | 'arrowTop'
      | 'arrowRight'
      | 'arrowBottom'
      | 'arrowNorthSouth'
      | 'arrowEastWest'
      | 'process'
      | 'decision'
      | 'terminator'
      | 'predefinedProcess'
      | 'document'
      | 'multipleDocuments'
      | 'manualInput'
      | 'preparation'
      | 'data'
      | 'database'
      | 'hardDisk'
      | 'internalStorage'
      | 'paperTape'
      | 'manualOperation'
      | 'delay'
      | 'storedData'
      | 'display'
      | 'merge'
      | 'connector'
      | 'or'
      | 'summingJunction'
      | 'verticalContainer'
      | 'horizontalContainer'
      | 'cardWithImageOnLeft'
      | 'cardWithImageOnTop'
      | 'cardWithImageOnRight'
      | string;
    /**
     * [descr:dxDiagramShape.position]
     */
    position?: {
      /**
       * [descr:dxDiagramShape.position.x]
       */
      x?: number;
      /**
       * [descr:dxDiagramShape.position.y]
       */
      y?: number;
    };

    /**
     * [descr:dxDiagramShape.size]
     */
    size?: {
      /**
       * [descr:dxDiagramShape.size.height]
       */
      height?: number;
      /**
       * [descr:dxDiagramShape.size.width]
       */
      width?: number;
    };
    /**
     * [descr:dxDiagramShape.attachedConnectorIds]
     */
    attachedConnectorIds?: Array<String>;
    /**
     * [descr:dxDiagramShape.containerId]
     */
    containerId?: string;
    /**
     * [descr:dxDiagramShape.containerChildItemIds]
     */
    containerChildItemIds?: Array<String>;
    /**
     * [descr:dxDiagramShape.containerExpanded]
     */
    containerExpanded?: boolean;
  }
  /**
   * [descr:dxDraggable]
   */
  export class dxDraggable
    extends DOMComponent<DevExpress.ui.dxDraggable.Properties>
    implements DraggableBase {}
  module dxDraggable {
    export type DisposingEvent = DevExpress.events.EventInfo<dxDraggable>;
    export type DragEndEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxDraggable> & {
        readonly itemData?: any;
        readonly itemElement?: DevExpress.core.DxElement;
        readonly fromComponent: dxSortable | dxDraggable;
        readonly toComponent: dxSortable | dxDraggable;
        readonly fromData?: any;
        readonly toData?: any;
      };
    export type DragMoveEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxDraggable> & {
        readonly itemData?: any;
        readonly itemElement?: DevExpress.core.DxElement;
        readonly fromComponent: dxSortable | dxDraggable;
        readonly toComponent: dxSortable | dxDraggable;
        readonly fromData?: any;
        readonly toData?: any;
      };
    export type DragStartEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxDraggable> & {
        itemData?: any;
        readonly itemElement?: DevExpress.core.DxElement;
        readonly fromData?: any;
      };
    export type DragTemplateData = {
      readonly itemData?: any;
      readonly itemElement: DevExpress.core.DxElement;
    };
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxDraggable>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxDraggable> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends DraggableBaseOptions<dxDraggable> {
      /**
       * [descr:Properties.clone]
       */
      clone?: boolean;
      /**
       * [descr:Properties.dragTemplate]
       */
      dragTemplate?:
        | DevExpress.core.template
        | ((
            dragInfo: DragTemplateData,
            containerElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.onDragEnd]
       */
      onDragEnd?: (e: DragEndEvent) => void;
      /**
       * [descr:Properties.onDragMove]
       */
      onDragMove?: (e: DragMoveEvent) => void;
      /**
       * [descr:Properties.onDragStart]
       */
      onDragStart?: (e: DragStartEvent) => void;
    }
  }
  /**
   * [descr:dxDrawer]
   */
  export class dxDrawer extends Widget<DevExpress.ui.dxDrawer.Properties> {
    /**
     * [descr:dxDrawer.content()]
     */
    content(): DevExpress.core.DxElement;
    /**
     * [descr:dxDrawer.hide()]
     */
    hide(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxDrawer.show()]
     */
    show(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxDrawer.toggle()]
     */
    toggle(): DevExpress.core.utils.DxPromise<void>;
  }
  module dxDrawer {
    export type DisposingEvent = DevExpress.events.EventInfo<dxDrawer>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxDrawer>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxDrawer> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends WidgetOptions<dxDrawer> {
      /**
       * [descr:Properties.animationDuration]
       */
      animationDuration?: number;
      /**
       * [descr:Properties.animationEnabled]
       */
      animationEnabled?: boolean;
      /**
       * [descr:Properties.closeOnOutsideClick]
       */
      closeOnOutsideClick?:
        | boolean
        | ((event: DevExpress.events.DxEvent) => boolean);
      /**
       * [descr:Properties.maxSize]
       */
      maxSize?: number;
      /**
       * [descr:Properties.minSize]
       */
      minSize?: number;
      /**
       * [descr:Properties.opened]
       */
      opened?: boolean;
      /**
       * [descr:Properties.openedStateMode]
       */
      openedStateMode?: 'overlap' | 'shrink' | 'push';
      /**
       * [descr:Properties.position]
       */
      position?: 'left' | 'right' | 'top' | 'bottom' | 'before' | 'after';
      /**
       * [descr:Properties.revealMode]
       */
      revealMode?: 'slide' | 'expand';
      /**
       * [descr:Properties.shading]
       */
      shading?: boolean;
      /**
       * [descr:Properties.target]
       * @deprecated [depNote:Properties.target]
       */
      target?: string | DevExpress.core.UserDefinedElement;
      /**
       * [descr:Properties.template]
       */
      template?:
        | DevExpress.core.template
        | ((Element: DevExpress.core.DxElement) => any);
    }
  }
  /**
   * [descr:dxDropDownBox]
   */
  export class dxDropDownBox extends dxDropDownEditor<DevExpress.ui.dxDropDownBox.Properties> {
    getDataSource(): DevExpress.data.DataSource;
  }
  module dxDropDownBox {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<dxDropDownBox>;
    export type ClosedEvent = DevExpress.events.EventInfo<dxDropDownBox>;
    export type ContentTemplateData = {
      component: dxDropDownBox;
      readonly value?: any;
    };
    export type CopyEvent = DevExpress.events.NativeEventInfo<dxDropDownBox>;
    export type CutEvent = DevExpress.events.NativeEventInfo<dxDropDownBox>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxDropDownBox>;
    export type DropDownButtonTemplateData =
      DevExpress.ui.dxDropDownEditor.DropDownButtonTemplateDataModel;
    export type EnterKeyEvent =
      DevExpress.events.NativeEventInfo<dxDropDownBox>;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<dxDropDownBox>;
    export type FocusOutEvent =
      DevExpress.events.NativeEventInfo<dxDropDownBox>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxDropDownBox>;
    export type InputEvent = DevExpress.events.NativeEventInfo<dxDropDownBox>;
    export type KeyDownEvent = DevExpress.events.NativeEventInfo<dxDropDownBox>;
    export type KeyPressEvent =
      DevExpress.events.NativeEventInfo<dxDropDownBox>;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<dxDropDownBox>;
    export type OpenedEvent = DevExpress.events.EventInfo<dxDropDownBox>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxDropDownBox> &
        DevExpress.events.ChangedOptionInfo;
    export type PasteEvent = DevExpress.events.NativeEventInfo<dxDropDownBox>;
    /**
     * [descr:Properties]
     */
    export interface Properties
      extends DataExpressionMixinOptions<dxDropDownBox>,
        dxDropDownEditorOptions<dxDropDownBox> {
      /**
       * [descr:Properties.acceptCustomValue]
       */
      acceptCustomValue?: boolean;
      /**
       * [descr:Properties.contentTemplate]
       */
      contentTemplate?:
        | DevExpress.core.template
        | ((
            templateData: ContentTemplateData,
            contentElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<any>;
      /**
       * [descr:Properties.displayValueFormatter]
       */
      displayValueFormatter?: (value: string | Array<any>) => string;
      /**
       * [descr:Properties.fieldTemplate]
       */
      fieldTemplate?:
        | DevExpress.core.template
        | ((
            value: any,
            fieldElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.items]
       */
      items?: Array<any>;
      /**
       * [descr:Properties.openOnFieldClick]
       */
      openOnFieldClick?: boolean;
      /**
       * [descr:Properties.valueChangeEvent]
       */
      valueChangeEvent?: string;

      /**
       * [descr:Properties.dropDownOptions]
       */
      dropDownOptions?: DevExpress.ui.dxPopup.Properties;
    }
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxDropDownBox> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxDropDownButton]
   */
  export class dxDropDownButton extends Widget<DevExpress.ui.dxDropDownButton.Properties> {
    /**
     * [descr:dxDropDownButton.close()]
     */
    close(): DevExpress.core.utils.DxPromise<void>;
    getDataSource(): DevExpress.data.DataSource;
    /**
     * [descr:dxDropDownButton.open()]
     */
    open(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxDropDownButton.toggle()]
     */
    toggle(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxDropDownButton.toggle(visibility)]
     */
    toggle(visibility: boolean): DevExpress.core.utils.DxPromise<void>;
  }
  module dxDropDownButton {
    export type ButtonClickEvent =
      DevExpress.events.NativeEventInfo<dxDropDownButton> & {
        readonly selectedItem?: any;
      };
    export type ContentReadyEvent =
      DevExpress.events.EventInfo<dxDropDownButton>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxDropDownButton>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxDropDownButton>;
    export type ItemClickEvent =
      DevExpress.events.NativeEventInfo<dxDropDownButton> & {
        readonly itemData?: any;
        readonly itemElement: DevExpress.core.DxElement;
      };
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxDropDownButton> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends WidgetOptions<dxDropDownButton> {
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<Item | any>;
      /**
       * [descr:Properties.deferRendering]
       */
      deferRendering?: boolean;
      /**
       * [descr:Properties.displayExpr]
       */
      displayExpr?: string | ((itemData: any) => string);
      /**
       * [descr:Properties.dropDownContentTemplate]
       */
      dropDownContentTemplate?:
        | DevExpress.core.template
        | ((
            data: Array<string | number | any> | DevExpress.data.DataSource,
            contentElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.dropDownOptions]
       */
      dropDownOptions?: DevExpress.ui.dxPopup.Properties;
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.hoverStateEnabled]
       */
      hoverStateEnabled?: boolean;
      /**
       * [descr:Properties.icon]
       */
      icon?: string;
      /**
       * [descr:Properties.itemTemplate]
       */
      itemTemplate?:
        | DevExpress.core.template
        | ((
            itemData: any,
            itemIndex: number,
            itemElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.items]
       */
      items?: Array<Item | any>;
      /**
       * [descr:Properties.keyExpr]
       */
      keyExpr?: string;
      /**
       * [descr:Properties.noDataText]
       */
      noDataText?: string;
      /**
       * [descr:Properties.onButtonClick]
       */
      onButtonClick?: ((e: ButtonClickEvent) => void) | string;
      /**
       * [descr:Properties.onItemClick]
       */
      onItemClick?: ((e: ItemClickEvent) => void) | string;
      /**
       * [descr:Properties.onSelectionChanged]
       */
      onSelectionChanged?: ((e: SelectionChangedEvent) => void) | string;
      /**
       * [descr:Properties.opened]
       */
      opened?: boolean;
      /**
       * [descr:Properties.selectedItem]
       */
      selectedItem?: string | number | any;
      /**
       * [descr:Properties.selectedItemKey]
       */
      selectedItemKey?: string | number;
      /**
       * [descr:Properties.showArrowIcon]
       */
      showArrowIcon?: boolean;
      /**
       * [descr:Properties.splitButton]
       */
      splitButton?: boolean;
      /**
       * [descr:Properties.stylingMode]
       */
      stylingMode?: 'text' | 'outlined' | 'contained';
      /**
       * [descr:Properties.text]
       */
      text?: string;
      /**
       * [descr:Properties.useSelectMode]
       */
      useSelectMode?: boolean;
      /**
       * [descr:Properties.wrapItemText]
       */
      wrapItemText?: boolean;
      /**
       * [descr:Properties.useItemTextAsTitle]
       */
      useItemTextAsTitle?: boolean;
    }
    export type SelectionChangedEvent =
      DevExpress.events.NativeEventInfo<dxDropDownButton> & {
        readonly item: any;
        readonly previousItem: any;
      };
  }
  /**
   * [descr:dxDropDownEditor]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class dxDropDownEditor<TProperties> extends dxTextBox<TProperties> {
    /**
     * [descr:dxDropDownEditor.close()]
     */
    close(): void;
    /**
     * [descr:dxDropDownEditor.content()]
     */
    content(): DevExpress.core.DxElement;
    /**
     * [descr:dxDropDownEditor.field()]
     */
    field(): DevExpress.core.DxElement;
    /**
     * [descr:dxDropDownEditor.open()]
     */
    open(): void;
  }
  module dxDropDownEditor {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface DropDownButtonTemplateDataModel {
      readonly text?: string;
      readonly icon?: string;
    }
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDropDownEditorOptions<TComponent>
    extends DevExpress.ui.dxTextBox.Properties<TComponent> {
    /**
     * [descr:dxDropDownEditorOptions.acceptCustomValue]
     */
    acceptCustomValue?: boolean;
    /**
     * [descr:dxDropDownEditorOptions.activeStateEnabled]
     */
    activeStateEnabled?: boolean;
    /**
     * [descr:dxDropDownEditorOptions.applyValueMode]
     */
    applyValueMode?: 'instantly' | 'useButtons';
    /**
     * [descr:dxDropDownEditorOptions.dropDownOptions]
     */
    dropDownOptions?:
      | DevExpress.ui.dxPopup.Properties
      | DevExpress.ui.dxPopover.Properties;
    /**
     * [descr:dxDropDownEditorOptions.buttons]
     */
    buttons?: Array<'clear' | 'dropDown' | dxTextEditorButton>;
    /**
     * [descr:dxDropDownEditorOptions.deferRendering]
     */
    deferRendering?: boolean;
    /**
     * [descr:dxDropDownEditorOptions.dropDownButtonTemplate]
     */
    dropDownButtonTemplate?:
      | DevExpress.core.template
      | ((
          buttonData: DevExpress.ui.dxDropDownEditor.DropDownButtonTemplateDataModel,
          contentElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:dxDropDownEditorOptions.onClosed]
     */
    onClosed?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * [descr:dxDropDownEditorOptions.onOpened]
     */
    onOpened?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * [descr:dxDropDownEditorOptions.openOnFieldClick]
     */
    openOnFieldClick?: boolean;
    /**
     * [descr:dxDropDownEditorOptions.opened]
     */
    opened?: boolean;
    /**
     * [descr:dxDropDownEditorOptions.showDropDownButton]
     */
    showDropDownButton?: boolean;
    /**
     * [descr:dxDropDownEditorOptions.value]
     */
    value?: any;
  }
  /**
   * [descr:dxDropDownList]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class dxDropDownList<
    TProperties
  > extends dxDropDownEditor<TProperties> {
    getDataSource(): DevExpress.data.DataSource;
  }
  module dxDropDownList {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface SelectionChangedInfo<T = any> {
      readonly selectedItem: T;
    }
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxDropDownListOptions<TComponent>
    extends DataExpressionMixinOptions<TComponent>,
      dxDropDownEditorOptions<TComponent> {
    /**
     * [descr:dxDropDownListOptions.displayValue]
     */
    displayValue?: string;
    /**
     * [descr:dxDropDownListOptions.groupTemplate]
     */
    groupTemplate?:
      | DevExpress.core.template
      | ((
          itemData: any,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:dxDropDownListOptions.grouped]
     */
    grouped?: boolean;
    /**
     * [descr:dxDropDownListOptions.minSearchLength]
     */
    minSearchLength?: number;
    /**
     * [descr:dxDropDownListOptions.noDataText]
     */
    noDataText?: string;
    /**
     * [descr:dxDropDownListOptions.onItemClick]
     */
    onItemClick?: (
      e: DevExpress.events.NativeEventInfo<TComponent> &
        DevExpress.events.ItemInfo
    ) => void;
    /**
     * [descr:dxDropDownListOptions.onSelectionChanged]
     */
    onSelectionChanged?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDropDownList.SelectionChangedInfo
    ) => void;
    /**
     * [descr:dxDropDownListOptions.onValueChanged]
     */
    onValueChanged?: (
      e: DevExpress.events.NativeEventInfo<TComponent> &
        DevExpress.ui.Editor.ValueChangedInfo
    ) => void;
    /**
     * [descr:dxDropDownListOptions.searchEnabled]
     */
    searchEnabled?: boolean;
    /**
     * [descr:dxDropDownListOptions.searchExpr]
     */
    searchExpr?: string | Function | Array<string | Function>;
    /**
     * [descr:dxDropDownListOptions.searchMode]
     */
    searchMode?: 'contains' | 'startswith';
    /**
     * [descr:dxDropDownListOptions.searchTimeout]
     */
    searchTimeout?: number;
    /**
     * [descr:dxDropDownListOptions.selectedItem]
     */
    selectedItem?: any;
    /**
     * [descr:dxDropDownListOptions.showDataBeforeSearch]
     */
    showDataBeforeSearch?: boolean;
    /**
     * [descr:dxDropDownListOptions.value]
     */
    value?: any;
    /**
     * [descr:dxDropDownListOptions.valueChangeEvent]
     */
    valueChangeEvent?: string;
    /**
     * [descr:dxDropDownListOptions.wrapItemText]
     */
    wrapItemText?: boolean;
    /**
     * [descr:dxDropDownListOptions.useItemTextAsTitle]
     */
    useItemTextAsTitle?: boolean;
  }
  /**
   * [descr:dxFileManager]
   */
  export class dxFileManager extends Widget<DevExpress.ui.dxFileManager.Properties> {
    /**
     * [descr:dxFileManager.getCurrentDirectory()]
     */
    getCurrentDirectory(): any;
    /**
     * [descr:dxFileManager.getSelectedItems()]
     */
    getSelectedItems(): Array<any>;
    /**
     * [descr:dxFileManager.refresh()]
     */
    refresh(): DevExpress.core.utils.DxPromise<any>;
  }
  module dxFileManager {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface ActionEventInfo {
      errorCode?: number;
      errorText: string;
      cancel: boolean | PromiseLike<void>;
    }
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxFileManager>;
    export type ContextMenuItemClickEvent =
      DevExpress.events.NativeEventInfo<dxFileManager> & {
        readonly itemData: any;
        readonly itemElement: DevExpress.core.DxElement;
        readonly itemIndex: number;
        readonly fileSystemItem?: DevExpress.fileManagement.FileSystemItem;
        readonly viewArea: 'navPane' | 'itemView';
      };
    export type ContextMenuShowingEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxFileManager> & {
        readonly fileSystemItem?: DevExpress.fileManagement.FileSystemItem;
        readonly targetElement?: DevExpress.core.DxElement;
        readonly viewArea: 'navPane' | 'itemView';
      };
    export type CurrentDirectoryChangedEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly directory: DevExpress.fileManagement.FileSystemItem;
      };
    export type DirectoryCreatedEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly parentDirectory: DevExpress.fileManagement.FileSystemItem;
        readonly name: string;
      };
    export type DirectoryCreatingEvent =
      DevExpress.events.EventInfo<dxFileManager> &
        ActionEventInfo & {
          readonly parentDirectory: DevExpress.fileManagement.FileSystemItem;
          readonly name: string;
        };
    export type DisposingEvent = DevExpress.events.EventInfo<dxFileManager>;
    export type ErrorOccurredEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly errorCode?: number;
        errorText?: string;
        readonly fileSystemItem?: DevExpress.fileManagement.FileSystemItem;
      };
    export type FileUploadedEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly fileData: File;
        readonly parentDirectory: DevExpress.fileManagement.FileSystemItem;
      };
    export type FileUploadingEvent =
      DevExpress.events.EventInfo<dxFileManager> &
        ActionEventInfo & {
          readonly fileData: File;
          readonly destinationDirectory: DevExpress.fileManagement.FileSystemItem;
        };
    export type FocusedItemChangedEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly item?: DevExpress.fileManagement.FileSystemItem;
        readonly itemElement?: DevExpress.core.DxElement;
      };
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxFileManager>;
    export type ItemCopiedEvent = DevExpress.events.EventInfo<dxFileManager> & {
      readonly sourceItem: DevExpress.fileManagement.FileSystemItem;
      readonly parentDirectory: DevExpress.fileManagement.FileSystemItem;
      readonly itemName: string;
      readonly itemPath: string;
    };
    export type ItemCopyingEvent = DevExpress.events.EventInfo<dxFileManager> &
      ActionEventInfo & {
        readonly item: DevExpress.fileManagement.FileSystemItem;
        readonly destinationDirectory: DevExpress.fileManagement.FileSystemItem;
      };
    export type ItemDeletedEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly item: DevExpress.fileManagement.FileSystemItem;
      };
    export type ItemDeletingEvent = DevExpress.events.EventInfo<dxFileManager> &
      ActionEventInfo & {
        readonly item: DevExpress.fileManagement.FileSystemItem;
      };
    export type ItemDownloadingEvent =
      DevExpress.events.EventInfo<dxFileManager> &
        ActionEventInfo & {
          readonly item: DevExpress.fileManagement.FileSystemItem;
        };
    export type ItemMovedEvent = DevExpress.events.EventInfo<dxFileManager> & {
      readonly sourceItem: DevExpress.fileManagement.FileSystemItem;
      readonly parentDirectory: DevExpress.fileManagement.FileSystemItem;
      readonly itemName: string;
      readonly itemPath: string;
    };
    export type ItemMovingEvent = DevExpress.events.EventInfo<dxFileManager> &
      ActionEventInfo & {
        readonly item: DevExpress.fileManagement.FileSystemItem;
        readonly destinationDirectory: DevExpress.fileManagement.FileSystemItem;
      };
    export type ItemRenamedEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly sourceItem: DevExpress.fileManagement.FileSystemItem;
        readonly itemName: string;
      };
    export type ItemRenamingEvent = DevExpress.events.EventInfo<dxFileManager> &
      ActionEventInfo & {
        readonly item: DevExpress.fileManagement.FileSystemItem;
        readonly newName: string;
      };
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxFileManager> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends WidgetOptions<dxFileManager> {
      /**
       * [descr:Properties.allowedFileExtensions]
       */
      allowedFileExtensions?: Array<string>;
      /**
       * [descr:Properties.contextMenu]
       */
      contextMenu?: dxFileManagerContextMenu;
      /**
       * [descr:Properties.currentPath]
       */
      currentPath?: string;
      /**
       * [descr:Properties.currentPathKeys]
       */
      currentPathKeys?: Array<string>;
      /**
       * [descr:Properties.customizeDetailColumns]
       */
      customizeDetailColumns?: (
        columns: Array<dxFileManagerDetailsColumn>
      ) => Array<dxFileManagerDetailsColumn>;
      /**
       * [descr:Properties.customizeThumbnail]
       */
      customizeThumbnail?: (
        fileSystemItem: DevExpress.fileManagement.FileSystemItem
      ) => string;
      /**
       * [descr:Properties.fileSystemProvider]
       */
      fileSystemProvider?: any;
      /**
       * [descr:Properties.itemView]
       */
      itemView?: {
        /**
         * [descr:Properties.itemView.details]
         */
        details?: {
          /**
           * [descr:Properties.itemView.details.columns]
           */
          columns?: Array<dxFileManagerDetailsColumn | string>;
        };
        /**
         * [descr:Properties.itemView.mode]
         */
        mode?: 'details' | 'thumbnails';
        /**
         * [descr:Properties.itemView.showFolders]
         */
        showFolders?: boolean;
        /**
         * [descr:Properties.itemView.showParentFolder]
         */
        showParentFolder?: boolean;
      };
      /**
       * [descr:Properties.notifications]
       */
      notifications?: {
        /**
         * [descr:Properties.notifications.showPanel]
         */
        showPanel?: boolean;
        /**
         * [descr:Properties.notifications.showPopup]
         */
        showPopup?: boolean;
      };
      /**
       * [descr:Properties.onContextMenuItemClick]
       */
      onContextMenuItemClick?: (e: ContextMenuItemClickEvent) => void;
      /**
       * [descr:Properties.onContextMenuShowing]
       */
      onContextMenuShowing?: (e: ContextMenuShowingEvent) => void;
      /**
       * [descr:Properties.onCurrentDirectoryChanged]
       */
      onCurrentDirectoryChanged?: (e: CurrentDirectoryChangedEvent) => void;
      /**
       * [descr:Properties.onSelectedFileOpened]
       */
      onSelectedFileOpened?: (e: SelectedFileOpenedEvent) => void;
      /**
       * [descr:Properties.onSelectionChanged]
       */
      onSelectionChanged?: (e: SelectionChangedEvent) => void;
      /**
       * [descr:Properties.onToolbarItemClick]
       */
      onToolbarItemClick?: (e: ToolbarItemClickEvent) => void;
      /**
       * [descr:Properties.onFocusedItemChanged]
       */
      onFocusedItemChanged?: (e: FocusedItemChangedEvent) => void;
      /**
       * [descr:Properties.onErrorOccurred]
       */
      onErrorOccurred?: (e: ErrorOccurredEvent) => void;
      /**
       * [descr:Properties.onDirectoryCreating]
       */
      onDirectoryCreating?: (e: DirectoryCreatingEvent) => void;
      /**
       * [descr:Properties.onDirectoryCreated]
       */
      onDirectoryCreated?: (e: DirectoryCreatedEvent) => void;
      /**
       * [descr:Properties.onItemRenaming]
       */
      onItemRenaming?: (e: ItemRenamingEvent) => void;
      /**
       * [descr:Properties.onItemRenamed]
       */
      onItemRenamed?: (e: ItemRenamedEvent) => void;
      /**
       * [descr:Properties.onItemMoving]
       */
      onItemMoving?: (e: ItemMovingEvent) => void;
      /**
       * [descr:Properties.onItemMoved]
       */
      onItemMoved?: (e: ItemMovedEvent) => void;
      /**
       * [descr:Properties.onItemCopying]
       */
      onItemCopying?: (e: ItemCopyingEvent) => void;
      /**
       * [descr:Properties.onItemCopied]
       */
      onItemCopied?: (e: ItemCopiedEvent) => void;
      /**
       * [descr:Properties.onItemDeleting]
       */
      onItemDeleting?: (e: ItemDeletingEvent) => void;
      /**
       * [descr:Properties.onItemDeleted]
       */
      onItemDeleted?: (e: ItemDeletedEvent) => void;
      /**
       * [descr:Properties.onFileUploading]
       */
      onFileUploading?: (e: FileUploadingEvent) => void;
      /**
       * [descr:Properties.onFileUploaded]
       */
      onFileUploaded?: (e: FileUploadedEvent) => void;
      /**
       * [descr:Properties.onItemDownloading]
       */
      onItemDownloading?: (e: ItemDownloadingEvent) => void;
      /**
       * [descr:Properties.permissions]
       */
      permissions?: {
        /**
         * [descr:Properties.permissions.copy]
         */
        copy?: boolean;
        /**
         * [descr:Properties.permissions.create]
         */
        create?: boolean;
        /**
         * [descr:Properties.permissions.download]
         */
        download?: boolean;
        /**
         * [descr:Properties.permissions.move]
         */
        move?: boolean;
        /**
         * [descr:Properties.permissions.delete]
         */
        delete?: boolean;
        /**
         * [descr:Properties.permissions.rename]
         */
        rename?: boolean;
        /**
         * [descr:Properties.permissions.upload]
         */
        upload?: boolean;
      };
      /**
       * [descr:Properties.rootFolderName]
       */
      rootFolderName?: string;
      /**
       * [descr:Properties.selectionMode]
       */
      selectionMode?: 'multiple' | 'single';
      /**
       * [descr:Properties.selectedItemKeys]
       */
      selectedItemKeys?: Array<string>;
      /**
       * [descr:Properties.focusedItemKey]
       */
      focusedItemKey?: string;
      /**
       * [descr:Properties.toolbar]
       */
      toolbar?: dxFileManagerToolbar;
      /**
       * [descr:Properties.upload]
       */
      upload?: {
        /**
         * [descr:Properties.upload.maxFileSize]
         */
        maxFileSize?: number;
        /**
         * [descr:Properties.upload.chunkSize]
         */
        chunkSize?: number;
      };
    }
    export type SelectedFileOpenedEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly file: DevExpress.fileManagement.FileSystemItem;
      };
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxFileManager> & {
        readonly currentSelectedItemKeys: Array<string>;
        readonly currentDeselectedItemKeys: Array<string>;
        readonly selectedItems: Array<DevExpress.fileManagement.FileSystemItem>;
        readonly selectedItemKeys: Array<string>;
      };
    export type ToolbarItemClickEvent =
      DevExpress.events.NativeEventInfo<dxFileManager> & {
        readonly itemData: any;
        readonly itemElement: DevExpress.core.DxElement;
        readonly itemIndex: number;
      };
  }
  /**
   * [descr:dxFileManagerContextMenu]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxFileManagerContextMenu {
    /**
     * [descr:dxFileManagerContextMenu.items]
     */
    items?: Array<
      | DevExpress.ui.dxFileManager.ContextMenuItem
      | 'create'
      | 'upload'
      | 'refresh'
      | 'download'
      | 'move'
      | 'copy'
      | 'rename'
      | 'delete'
    >;
  }
  /**
   * [descr:dxFileManagerDetailsColumn]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxFileManagerDetailsColumn {
    /**
     * [descr:dxFileManagerDetailsColumn.alignment]
     */
    alignment?: 'center' | 'left' | 'right' | undefined;
    /**
     * [descr:dxFileManagerDetailsColumn.caption]
     */
    caption?: string;
    /**
     * [descr:dxFileManagerDetailsColumn.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:dxFileManagerDetailsColumn.dataField]
     */
    dataField?: string;
    /**
     * [descr:dxFileManagerDetailsColumn.dataType]
     */
    dataType?: 'string' | 'number' | 'date' | 'boolean' | 'object' | 'datetime';
    /**
     * [descr:dxFileManagerDetailsColumn.hidingPriority]
     */
    hidingPriority?: number;
    /**
     * [descr:dxFileManagerDetailsColumn.sortIndex]
     */
    sortIndex?: number;
    /**
     * [descr:dxFileManagerDetailsColumn.sortOrder]
     */
    sortOrder?: 'asc' | 'desc' | undefined;
    /**
     * [descr:dxFileManagerDetailsColumn.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxFileManagerDetailsColumn.visibleIndex]
     */
    visibleIndex?: number;
    /**
     * [descr:dxFileManagerDetailsColumn.width]
     */
    width?: number | string;
  }
  /**
   * [descr:dxFileManagerToolbar]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxFileManagerToolbar {
    /**
     * [descr:dxFileManagerToolbar.fileSelectionItems]
     */
    fileSelectionItems?: Array<
      | DevExpress.ui.dxFileManager.ToolbarItem
      | 'showNavPane'
      | 'create'
      | 'upload'
      | 'refresh'
      | 'switchView'
      | 'download'
      | 'move'
      | 'copy'
      | 'rename'
      | 'delete'
      | 'clearSelection'
      | 'separator'
    >;
    /**
     * [descr:dxFileManagerToolbar.items]
     */
    items?: Array<
      | DevExpress.ui.dxFileManager.ToolbarItem
      | 'showNavPane'
      | 'create'
      | 'upload'
      | 'refresh'
      | 'switchView'
      | 'download'
      | 'move'
      | 'copy'
      | 'rename'
      | 'delete'
      | 'clearSelection'
      | 'separator'
    >;
  }
  /**
   * [descr:dxFileUploader]
   */
  export class dxFileUploader extends Editor<DevExpress.ui.dxFileUploader.Properties> {
    /**
     * [descr:dxFileUploader.upload()]
     */
    upload(): void;
    /**
     * [descr:dxFileUploader.upload(fileIndex)]
     */
    upload(fileIndex: number): void;
    /**
     * [descr:dxFileUploader.upload(file)]
     */
    upload(file: File): void;
    /**
     * [descr:dxFileUploader.abortUpload()]
     */
    abortUpload(): void;
    /**
     * [descr:dxFileUploader.abortUpload(fileIndex)]
     */
    abortUpload(fileIndex: number): void;
    /**
     * [descr:dxFileUploader.abortUpload(file)]
     */
    abortUpload(file: File): void;
    /**
     * [descr:dxFileUploader.removeFile(fileIndex)]
     */
    removeFile(fileIndex: number): void;
    /**
     * [descr:dxFileUploader.removeFile(file)]
     */
    removeFile(file: File): void;
  }
  module dxFileUploader {
    export type BeforeSendEvent =
      DevExpress.events.EventInfo<dxFileUploader> & {
        readonly request: XMLHttpRequest;
        readonly file: File;
        readonly uploadInfo?: DevExpress.fileManagement.UploadInfo;
      };
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxFileUploader>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxFileUploader>;
    export type DropZoneEnterEvent =
      DevExpress.events.NativeEventInfo<dxFileUploader> & {
        readonly dropZoneElement: DevExpress.core.DxElement;
      };
    export type DropZoneLeaveEvent =
      DevExpress.events.NativeEventInfo<dxFileUploader> & {
        readonly dropZoneElement: DevExpress.core.DxElement;
      };
    export type FilesUploadedEvent =
      DevExpress.events.EventInfo<dxFileUploader>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxFileUploader>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxFileUploader> &
        DevExpress.events.ChangedOptionInfo;
    export type ProgressEvent =
      DevExpress.events.NativeEventInfo<dxFileUploader> & {
        readonly file: File;
        readonly segmentSize: number;
        readonly bytesLoaded: number;
        readonly bytesTotal: number;
        readonly request: XMLHttpRequest;
      };
    /**
     * [descr:Properties]
     */
    export interface Properties extends EditorOptions<dxFileUploader> {
      /**
       * [descr:Properties.abortUpload]
       */
      abortUpload?: (
        file: File,
        uploadInfo?: DevExpress.fileManagement.UploadInfo
      ) => PromiseLike<any> | any;
      /**
       * [descr:Properties.accept]
       */
      accept?: string;
      /**
       * [descr:Properties.allowCanceling]
       */
      allowCanceling?: boolean;
      /**
       * [descr:Properties.allowedFileExtensions]
       */
      allowedFileExtensions?: Array<string>;
      /**
       * [descr:Properties.chunkSize]
       */
      chunkSize?: number;
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.hoverStateEnabled]
       */
      hoverStateEnabled?: boolean;
      /**
       * [descr:Properties.invalidFileExtensionMessage]
       */
      invalidFileExtensionMessage?: string;
      /**
       * [descr:Properties.invalidMaxFileSizeMessage]
       */
      invalidMaxFileSizeMessage?: string;
      /**
       * [descr:Properties.invalidMinFileSizeMessage]
       */
      invalidMinFileSizeMessage?: string;
      /**
       * [descr:Properties.inputAttr]
       */
      inputAttr?: any;
      /**
       * [descr:Properties.labelText]
       */
      labelText?: string;
      /**
       * [descr:Properties.maxFileSize]
       */
      maxFileSize?: number;
      /**
       * [descr:Properties.minFileSize]
       */
      minFileSize?: number;
      /**
       * [descr:Properties.multiple]
       */
      multiple?: boolean;
      /**
       * [descr:Properties.name]
       */
      name?: string;
      /**
       * [descr:Properties.onBeforeSend]
       */
      onBeforeSend?: (e: BeforeSendEvent) => void;
      /**
       * [descr:Properties.onDropZoneEnter]
       */
      onDropZoneEnter?: (e: DropZoneEnterEvent) => void;
      /**
       * [descr:Properties.onDropZoneLeave]
       */
      onDropZoneLeave?: (e: DropZoneLeaveEvent) => void;
      /**
       * [descr:Properties.onFilesUploaded]
       */
      onFilesUploaded?: (e: FilesUploadedEvent) => void;
      /**
       * [descr:Properties.onProgress]
       */
      onProgress?: (e: ProgressEvent) => void;
      /**
       * [descr:Properties.onUploadAborted]
       */
      onUploadAborted?: (e: UploadAbortedEvent) => void;
      /**
       * [descr:Properties.onUploadError]
       */
      onUploadError?: (e: UploadErrorEvent) => void;
      /**
       * [descr:Properties.onUploadStarted]
       */
      onUploadStarted?: (e: UploadStartedEvent) => void;
      /**
       * [descr:Properties.onUploaded]
       */
      onUploaded?: (e: UploadedEvent) => void;
      /**
       * [descr:Properties.onValueChanged]
       */
      onValueChanged?: (e: ValueChangedEvent) => void;
      /**
       * [descr:Properties.progress]
       */
      progress?: number;
      /**
       * [descr:Properties.readyToUploadMessage]
       */
      readyToUploadMessage?: string;
      /**
       * [descr:Properties.selectButtonText]
       */
      selectButtonText?: string;
      /**
       * [descr:Properties.showFileList]
       */
      showFileList?: boolean;
      /**
       * [descr:Properties.dialogTrigger]
       */
      dialogTrigger?: string | DevExpress.core.UserDefinedElement;
      /**
       * [descr:Properties.dropZone]
       */
      dropZone?: string | DevExpress.core.UserDefinedElement;
      /**
       * [descr:Properties.uploadButtonText]
       */
      uploadButtonText?: string;
      /**
       * [descr:Properties.uploadChunk]
       */
      uploadChunk?: (
        file: File,
        uploadInfo: DevExpress.fileManagement.UploadInfo
      ) => PromiseLike<any> | any;
      /**
       * [descr:Properties.uploadFailedMessage]
       */
      uploadFailedMessage?: string;
      /**
       * [descr:Properties.uploadAbortedMessage]
       */
      uploadAbortedMessage?: string;
      /**
       * [descr:Properties.uploadFile]
       */
      uploadFile?: (
        file: File,
        progressCallback: Function
      ) => PromiseLike<any> | any;
      /**
       * [descr:Properties.uploadHeaders]
       */
      uploadHeaders?: any;
      /**
       * [descr:Properties.uploadCustomData]
       */
      uploadCustomData?: any;
      /**
       * [descr:Properties.uploadMethod]
       */
      uploadMethod?: 'POST' | 'PUT';
      /**
       * [descr:Properties.uploadMode]
       */
      uploadMode?: 'instantly' | 'useButtons' | 'useForm';
      /**
       * [descr:Properties.uploadUrl]
       */
      uploadUrl?: string;
      /**
       * [descr:Properties.uploadedMessage]
       */
      uploadedMessage?: string;
      /**
       * [descr:Properties.value]
       */
      value?: Array<File>;
    }
    export type UploadAbortedEvent =
      DevExpress.events.NativeEventInfo<dxFileUploader> & {
        readonly file: File;
        readonly request: XMLHttpRequest;
        message: string;
      };
    export type UploadedEvent =
      DevExpress.events.NativeEventInfo<dxFileUploader> & {
        readonly file: File;
        readonly request: XMLHttpRequest;
        message: string;
      };
    export type UploadErrorEvent =
      DevExpress.events.NativeEventInfo<dxFileUploader> & {
        readonly file: File;
        readonly request: XMLHttpRequest;
        readonly error: any;
        message: string;
      };
    export type UploadStartedEvent =
      DevExpress.events.NativeEventInfo<dxFileUploader> & {
        readonly file: File;
        readonly request: XMLHttpRequest;
      };
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxFileUploader> & {
        readonly value?: Array<File>;
        readonly previousValue?: Array<File>;
      };
  }
  /**
   * [descr:dxFilterBuilder]
   */
  export class dxFilterBuilder extends Widget<DevExpress.ui.dxFilterBuilder.Properties> {
    /**
     * [descr:dxFilterBuilder.getFilterExpression()]
     */
    getFilterExpression(): string | Array<any> | Function;
  }
  module dxFilterBuilder {
    export type ContentReadyEvent =
      DevExpress.events.EventInfo<dxFilterBuilder>;
    export type CustomOperationEditorTemplate = {
      readonly value?: string | number | Date;
      readonly field: dxFilterBuilderField;
      readonly setValue: Function;
    };
    export type DisposingEvent = DevExpress.events.EventInfo<dxFilterBuilder>;
    export type EditorPreparedEvent =
      DevExpress.events.EventInfo<dxFilterBuilder> & {
        readonly value?: any;
        readonly setValue: any;
        readonly editorElement: DevExpress.core.DxElement;
        readonly editorName: string;
        readonly dataField?: string;
        readonly filterOperation?: string;
        readonly updateValueTimeout?: number;
        readonly width?: number;
        readonly readOnly: boolean;
        readonly disabled: boolean;
        readonly rtlEnabled: boolean;
      };
    export type EditorPreparingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxFilterBuilder> & {
        readonly value?: any;
        readonly setValue: any;
        readonly editorElement?: DevExpress.core.DxElement;
        editorName: string;
        editorOptions?: any;
        readonly dataField?: string;
        readonly filterOperation?: string;
        updateValueTimeout?: number;
        readonly width?: number;
        readonly readOnly: boolean;
        readonly disabled: boolean;
        readonly rtlEnabled: boolean;
      };
    export type FieldEditorTemplate = {
      readonly value?: string | number | Date;
      readonly filterOperation?: string;
      readonly field: dxFilterBuilderField;
      readonly setValue: Function;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export type FilterLookupDataSource<T> = Exclude<
      DevExpress.data.DataSource.DataSourceLike<T>,
      string | DevExpress.data.DataSource
    >;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxFilterBuilder>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxFilterBuilder> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends WidgetOptions<dxFilterBuilder> {
      /**
       * [descr:Properties.allowHierarchicalFields]
       */
      allowHierarchicalFields?: boolean;
      /**
       * [descr:Properties.customOperations]
       */
      customOperations?: Array<dxFilterBuilderCustomOperation>;
      /**
       * [descr:Properties.fields]
       */
      fields?: Array<dxFilterBuilderField>;
      /**
       * [descr:Properties.filterOperationDescriptions]
       */
      filterOperationDescriptions?: {
        /**
         * [descr:Properties.filterOperationDescriptions.between]
         */
        between?: string;
        /**
         * [descr:Properties.filterOperationDescriptions.contains]
         */
        contains?: string;
        /**
         * [descr:Properties.filterOperationDescriptions.endsWith]
         */
        endsWith?: string;
        /**
         * [descr:Properties.filterOperationDescriptions.equal]
         */
        equal?: string;
        /**
         * [descr:Properties.filterOperationDescriptions.greaterThan]
         */
        greaterThan?: string;
        /**
         * [descr:Properties.filterOperationDescriptions.greaterThanOrEqual]
         */
        greaterThanOrEqual?: string;
        /**
         * [descr:Properties.filterOperationDescriptions.isBlank]
         */
        isBlank?: string;
        /**
         * [descr:Properties.filterOperationDescriptions.isNotBlank]
         */
        isNotBlank?: string;
        /**
         * [descr:Properties.filterOperationDescriptions.lessThan]
         */
        lessThan?: string;
        /**
         * [descr:Properties.filterOperationDescriptions.lessThanOrEqual]
         */
        lessThanOrEqual?: string;
        /**
         * [descr:Properties.filterOperationDescriptions.notContains]
         */
        notContains?: string;
        /**
         * [descr:Properties.filterOperationDescriptions.notEqual]
         */
        notEqual?: string;
        /**
         * [descr:Properties.filterOperationDescriptions.startsWith]
         */
        startsWith?: string;
      };
      /**
       * [descr:Properties.groupOperationDescriptions]
       */
      groupOperationDescriptions?: {
        /**
         * [descr:Properties.groupOperationDescriptions.and]
         */
        and?: string;
        /**
         * [descr:Properties.groupOperationDescriptions.notAnd]
         */
        notAnd?: string;
        /**
         * [descr:Properties.groupOperationDescriptions.notOr]
         */
        notOr?: string;
        /**
         * [descr:Properties.groupOperationDescriptions.or]
         */
        or?: string;
      };
      /**
       * [descr:Properties.groupOperations]
       */
      groupOperations?: Array<'and' | 'or' | 'notAnd' | 'notOr'>;
      /**
       * [descr:Properties.maxGroupLevel]
       */
      maxGroupLevel?: number;
      /**
       * [descr:Properties.onEditorPrepared]
       */
      onEditorPrepared?: (e: EditorPreparedEvent) => void;
      /**
       * [descr:Properties.onEditorPreparing]
       */
      onEditorPreparing?: (e: EditorPreparingEvent) => void;
      /**
       * [descr:Properties.onValueChanged]
       */
      onValueChanged?: (e: ValueChangedEvent) => void;
      /**
       * [descr:Properties.value]
       */
      value?: string | Array<any> | Function;
    }
    export type ValueChangedEvent =
      DevExpress.events.EventInfo<dxFilterBuilder> & {
        readonly value?: any;
        readonly previousValue?: any;
      };
  }
  /**
   * [descr:dxFilterBuilderCustomOperation]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxFilterBuilderCustomOperation {
    /**
     * [descr:dxFilterBuilderCustomOperation.calculateFilterExpression]
     */
    calculateFilterExpression?: (
      filterValue: any,
      field: dxFilterBuilderField
    ) => string | Array<any> | Function;
    /**
     * [descr:dxFilterBuilderCustomOperation.caption]
     */
    caption?: string;
    /**
     * [descr:dxFilterBuilderCustomOperation.customizeText]
     */
    customizeText?: (fieldInfo: {
      value?: string | number | Date;
      valueText?: string;
      field?: dxFilterBuilderField;
    }) => string;
    /**
     * [descr:dxFilterBuilderCustomOperation.dataTypes]
     */
    dataTypes?: Array<
      'string' | 'number' | 'date' | 'boolean' | 'object' | 'datetime'
    >;
    /**
     * [descr:dxFilterBuilderCustomOperation.editorTemplate]
     */
    editorTemplate?:
      | DevExpress.core.template
      | ((
          conditionInfo: DevExpress.ui.dxFilterBuilder.CustomOperationEditorTemplate,
          container: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:dxFilterBuilderCustomOperation.hasValue]
     */
    hasValue?: boolean;
    /**
     * [descr:dxFilterBuilderCustomOperation.icon]
     */
    icon?: string;
    /**
     * [descr:dxFilterBuilderCustomOperation.name]
     */
    name?: string;
  }
  /**
   * [descr:dxFilterBuilderField]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxFilterBuilderField {
    /**
     * [descr:dxFilterBuilderField.calculateFilterExpression]
     */
    calculateFilterExpression?: (
      filterValue: any,
      selectedFilterOperation: string
    ) => string | Array<any> | Function;
    /**
     * [descr:dxFilterBuilderField.caption]
     */
    caption?: string;
    /**
     * [descr:dxFilterBuilderField.customizeText]
     */
    customizeText?: (fieldInfo: {
      value?: string | number | Date;
      valueText?: string;
    }) => string;
    /**
     * [descr:dxFilterBuilderField.dataField]
     */
    dataField?: string;
    /**
     * [descr:dxFilterBuilderField.dataType]
     */
    dataType?: 'string' | 'number' | 'date' | 'boolean' | 'object' | 'datetime';
    /**
     * [descr:dxFilterBuilderField.editorOptions]
     */
    editorOptions?: any;
    /**
     * [descr:dxFilterBuilderField.editorTemplate]
     */
    editorTemplate?:
      | DevExpress.core.template
      | ((
          conditionInfo: DevExpress.ui.dxFilterBuilder.FieldEditorTemplate,
          container: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:dxFilterBuilderField.falseText]
     */
    falseText?: string;
    /**
     * [descr:dxFilterBuilderField.filterOperations]
     */
    filterOperations?: Array<
      | '='
      | '<>'
      | '<'
      | '<='
      | '>'
      | '>='
      | 'contains'
      | 'endswith'
      | 'isblank'
      | 'isnotblank'
      | 'notcontains'
      | 'startswith'
      | 'between'
      | string
    >;
    /**
     * [descr:dxFilterBuilderField.format]
     */
    format?: Format;
    /**
     * [descr:dxFilterBuilderField.lookup]
     */
    lookup?: {
      /**
       * [descr:dxFilterBuilderField.lookup.allowClearing]
       */
      allowClearing?: boolean;
      /**
       * [descr:dxFilterBuilderField.lookup.dataSource]
       */
      dataSource?: DevExpress.ui.dxFilterBuilder.FilterLookupDataSource<any>;
      /**
       * [descr:dxFilterBuilderField.lookup.displayExpr]
       */
      displayExpr?: string | ((data: any) => string);
      /**
       * [descr:dxFilterBuilderField.lookup.valueExpr]
       */
      valueExpr?: string | ((data: any) => string | number | boolean);
    };
    /**
     * [descr:dxFilterBuilderField.name]
     */
    name?: string;
    /**
     * [descr:dxFilterBuilderField.trueText]
     */
    trueText?: string;
  }
  /**
   * [descr:dxForm]
   */
  export class dxForm extends Widget<DevExpress.ui.dxForm.Properties> {
    /**
     * [descr:dxForm.getButton(name)]
     */
    getButton(name: string): dxButton | undefined;
    /**
     * [descr:dxForm.getEditor(dataField)]
     */
    getEditor(dataField: string): Editor | undefined;
    /**
     * [descr:dxForm.itemOption(id)]
     */
    itemOption(id: string): any;
    /**
     * [descr:dxForm.itemOption(id, option, value)]
     */
    itemOption(id: string, option: string, value: any): void;
    /**
     * [descr:dxForm.itemOption(id, options)]
     */
    itemOption(id: string, options: any): void;
    /**
     * [descr:dxForm.resetValues()]
     */
    resetValues(): void;
    /**
     * [descr:dxForm.updateData(data)]
     */
    updateData(data: any): void;
    /**
     * [descr:dxForm.updateData(dataField, value)]
     */
    updateData(dataField: string, value: any): void;
    /**
     * [descr:dxForm.updateDimensions()]
     */
    updateDimensions(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxForm.validate()]
     */
    validate(): DevExpress.ui.dxValidationGroup.ValidationResult;
  }
  module dxForm {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxForm>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxForm>;
    export type EditorEnterKeyEvent = DevExpress.events.EventInfo<dxForm> & {
      readonly dataField?: string;
    };
    export type FieldDataChangedEvent = DevExpress.events.EventInfo<dxForm> & {
      readonly dataField?: string;
      readonly value?: any;
    };
    export type GroupItemTemplateData = {
      readonly component: dxForm;
      readonly formData?: any;
    };
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxForm>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxForm> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends WidgetOptions<dxForm> {
      /**
       * [descr:Properties.alignItemLabels]
       */
      alignItemLabels?: boolean;
      /**
       * [descr:Properties.alignItemLabelsInAllGroups]
       */
      alignItemLabelsInAllGroups?: boolean;
      /**
       * [descr:Properties.colCount]
       */
      colCount?: number | 'auto';
      /**
       * [descr:Properties.colCountByScreen]
       */
      colCountByScreen?: any;
      /**
       * [descr:Properties.customizeItem]
       */
      customizeItem?: (item: Item) => void;
      /**
       * [descr:Properties.formData]
       */
      formData?: any;
      /**
       * [descr:Properties.items]
       */
      items?: Array<Item>;
      /**
       * [descr:Properties.labelLocation]
       */
      labelLocation?: 'left' | 'right' | 'top';
      /**
       * [descr:Properties.labelMode]
       */
      labelMode?: 'outside' | 'floating' | 'static' | 'hidden';
      /**
       * [descr:Properties.minColWidth]
       */
      minColWidth?: number;
      /**
       * [descr:Properties.onEditorEnterKey]
       */
      onEditorEnterKey?: (e: EditorEnterKeyEvent) => void;
      /**
       * [descr:Properties.onFieldDataChanged]
       */
      onFieldDataChanged?: (e: FieldDataChangedEvent) => void;
      /**
       * [descr:Properties.optionalMark]
       */
      optionalMark?: string;
      /**
       * [descr:Properties.readOnly]
       */
      readOnly?: boolean;
      /**
       * [descr:Properties.requiredMark]
       */
      requiredMark?: string;
      /**
       * [descr:Properties.requiredMessage]
       */
      requiredMessage?: string;
      /**
       * [descr:Properties.screenByWidth]
       */
      screenByWidth?: Function;
      /**
       * [descr:Properties.scrollingEnabled]
       */
      scrollingEnabled?: boolean;
      /**
       * [descr:Properties.showColonAfterLabel]
       */
      showColonAfterLabel?: boolean;
      /**
       * [descr:Properties.showOptionalMark]
       */
      showOptionalMark?: boolean;
      /**
       * [descr:Properties.showRequiredMark]
       */
      showRequiredMark?: boolean;
      /**
       * [descr:Properties.showValidationSummary]
       */
      showValidationSummary?: boolean;
      /**
       * [descr:Properties.validationGroup]
       */
      validationGroup?: string;
    }
    export type SimpleItemTemplateData = {
      readonly component: dxForm;
      readonly dataField?: string;
      readonly editorOptions?: any;
      readonly editorType?: string;
      readonly name?: string;
    };
  }
  /**
   * [descr:dxGallery]
   */
  export class dxGallery extends CollectionWidget<DevExpress.ui.dxGallery.Properties> {
    /**
     * [descr:dxGallery.goToItem(itemIndex, animation)]
     */
    goToItem(
      itemIndex: number,
      animation: boolean
    ): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxGallery.nextItem(animation)]
     */
    nextItem(animation: boolean): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxGallery.prevItem(animation)]
     */
    prevItem(animation: boolean): DevExpress.core.utils.DxPromise<void>;
  }
  module dxGallery {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxGallery>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxGallery>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxGallery>;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<dxGallery> &
      DevExpress.events.ItemInfo;
    export type ItemContextMenuEvent =
      DevExpress.events.NativeEventInfo<dxGallery> & DevExpress.events.ItemInfo;
    export type ItemHoldEvent = DevExpress.events.NativeEventInfo<dxGallery> &
      DevExpress.events.ItemInfo;
    export type ItemRenderedEvent =
      DevExpress.events.NativeEventInfo<dxGallery> & DevExpress.events.ItemInfo;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxGallery> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends CollectionWidgetOptions<dxGallery> {
      /**
       * [descr:Properties.animationDuration]
       */
      animationDuration?: number;
      /**
       * [descr:Properties.animationEnabled]
       */
      animationEnabled?: boolean;
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<
        string | Item | any
      >;
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.indicatorEnabled]
       */
      indicatorEnabled?: boolean;
      /**
       * [descr:Properties.initialItemWidth]
       */
      initialItemWidth?: number;
      /**
       * [descr:Properties.items]
       */
      items?: Array<string | Item | any>;
      /**
       * [descr:Properties.loop]
       */
      loop?: boolean;
      /**
       * [descr:Properties.noDataText]
       */
      noDataText?: string;
      /**
       * [descr:Properties.selectedIndex]
       */
      selectedIndex?: number;
      /**
       * [descr:Properties.showIndicator]
       */
      showIndicator?: boolean;
      /**
       * [descr:Properties.showNavButtons]
       */
      showNavButtons?: boolean;
      /**
       * [descr:Properties.slideshowDelay]
       */
      slideshowDelay?: number;
      /**
       * [descr:Properties.stretchImages]
       */
      stretchImages?: boolean;
      /**
       * [descr:Properties.swipeEnabled]
       */
      swipeEnabled?: boolean;
      /**
       * [descr:Properties.wrapAround]
       */
      wrapAround?: boolean;
    }
    export type SelectionChangedEvent = DevExpress.events.EventInfo<dxGallery> &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo;
  }
  /**
   * [descr:dxGantt]
   */
  export class dxGantt extends Widget<DevExpress.ui.dxGantt.Properties> {
    /**
     * [descr:dxGantt.getTaskData(key)]
     */
    getTaskData(key: any): any;
    /**
     * [descr:dxGantt.getDependencyData(key)]
     */
    getDependencyData(key: any): any;
    /**
     * [descr:dxGantt.getResourceData(key)]
     */
    getResourceData(key: any): any;
    /**
     * [descr:dxGantt.getResourceAssignmentData(key)]
     */
    getResourceAssignmentData(key: any): any;
    /**
     * [descr:dxGantt.insertTask(data)]
     */
    insertTask(data: any): void;
    /**
     * [descr:dxGantt.deleteTask(key)]
     */
    deleteTask(key: any): void;
    /**
     * [descr:dxGantt.updateTask(key, data)]
     */
    updateTask(key: any, data: any): void;
    /**
     * [descr:dxGantt.insertDependency(data)]
     */
    insertDependency(data: any): void;
    /**
     * [descr:dxGantt.deleteDependency(key)]
     */
    deleteDependency(key: any): void;
    /**
     * [descr:dxGantt.insertResource(data, taskKeys)]
     */
    insertResource(data: any, taskKeys?: Array<any>): void;
    /**
     * [descr:dxGantt.deleteResource(key)]
     */
    deleteResource(key: any): void;
    /**
     * [descr:dxGantt.assignResourceToTask(resourceKey, taskKey)]
     */
    assignResourceToTask(resourceKey: any, taskKey: any): void;
    /**
     * [descr:dxGantt.unassignResourceFromTask(resourceKey, taskKey)]
     */
    unassignResourceFromTask(resourceKey: any, taskKey: any): void;
    /**
     * [descr:dxGantt.getTaskResources(key)]
     */
    getTaskResources(key: any): Array<any>;
    /**
     * [descr:dxGantt.getVisibleTaskKeys()]
     */
    getVisibleTaskKeys(): Array<any>;
    /**
     * [descr:dxGantt.getVisibleDependencyKeys()]
     */
    getVisibleDependencyKeys(): Array<any>;
    /**
     * [descr:dxGantt.getVisibleResourceKeys()]
     */
    getVisibleResourceKeys(): Array<any>;
    /**
     * [descr:dxGantt.getVisibleResourceAssignmentKeys()]
     */
    getVisibleResourceAssignmentKeys(): Array<any>;
    /**
     * [descr:dxGantt.updateDimensions()]
     */
    updateDimensions(): void;
    /**
     * [descr:dxGantt.scrollToDate(date)]
     */
    scrollToDate(date: Date | Number | string): void;
    /**
     * [descr:dxGantt.showResourceManagerDialog()]
     */
    showResourceManagerDialog(): void;
    /**
     * [descr:dxGantt.expandAll()]
     */
    expandAll(): void;
    /**
     * [descr:dxGantt.collapseAll()]
     */
    collapseAll(): void;
    /**
     * [descr:dxGantt.expandAllToLevel(level)]
     */
    expandAllToLevel(level: Number): void;
    /**
     * [descr:dxGantt.expandToTask(key)]
     */
    expandToTask(key: any): void;
    /**
     * [descr:dxGantt.collapseTask(key)]
     */
    collapseTask(key: any): void;
    /**
     * [descr:dxGantt.expandTask(key)]
     */
    expandTask(key: any): void;
    /**
     * [descr:dxGantt.refresh()]
     */
    refresh(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxGantt.showResources(value)]
     */
    showResources(value: boolean): void;
    /**
     * [descr:dxGantt.showDependencies(value)]
     */
    showDependencies(value: boolean): void;
    /**
     * [descr:dxGantt.zoomIn()]
     */
    zoomIn(): void;
    /**
     * [descr:dxGantt.zoomOut()]
     */
    zoomOut(): void;
    /**
     * [descr:dxGantt.unassignAllResourcesFromTask(taskKey)]
     */
    unassignAllResourcesFromTask(taskKey: any): void;
    /**
     * [descr:dxGantt.showTaskDetailsDialog(taskKey)]
     */
    showTaskDetailsDialog(taskKey: any): void;
  }
  module dxGantt {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxGantt>;
    export type ContextMenuPreparingEvent = DevExpress.events.Cancelable & {
      readonly component?: dxGantt;
      readonly element?: DevExpress.core.DxElement;
      readonly event?: DevExpress.events.DxEvent;
      readonly targetKey?: any;
      readonly targetType?: string;
      readonly data?: any;
      readonly items?: Array<any>;
    };
    export type CustomCommandEvent = {
      readonly component?: dxGantt;
      readonly element?: DevExpress.core.DxElement;
      readonly name: string;
    };
    export type DependencyDeletedEvent =
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
        readonly key: any;
      };
    export type DependencyDeletingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
        readonly key: any;
      };
    export type DependencyInsertedEvent =
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
        readonly key: any;
      };
    export type DependencyInsertingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
      };
    export type DisposingEvent = DevExpress.events.EventInfo<dxGantt>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxGantt>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxGantt> &
      DevExpress.events.ChangedOptionInfo;
    export type ProgressTooltipTemplateData = {
      readonly progress: number;
    };
    /**
     * [descr:Properties]
     */
    export interface Properties extends WidgetOptions<dxGantt> {
      /**
       * [descr:Properties.allowSelection]
       */
      allowSelection?: boolean;
      /**
       * [descr:Properties.columns]
       */
      columns?: Array<DevExpress.ui.dxTreeList.Column | string>;
      /**
       * [descr:Properties.dependencies]
       */
      dependencies?: {
        /**
         * [descr:Properties.dependencies.dataSource]
         */
        dataSource?: DevExpress.data.DataSource.DataSourceLike<any>;
        /**
         * [descr:Properties.dependencies.keyExpr]
         */
        keyExpr?: string | Function;
        /**
         * [descr:Properties.dependencies.predecessorIdExpr]
         */
        predecessorIdExpr?: string | Function;
        /**
         * [descr:Properties.dependencies.successorIdExpr]
         */
        successorIdExpr?: string | Function;
        /**
         * [descr:Properties.dependencies.typeExpr]
         */
        typeExpr?: string | Function;
      };
      /**
       * [descr:Properties.editing]
       */
      editing?: {
        /**
         * [descr:Properties.editing.allowDependencyAdding]
         */
        allowDependencyAdding?: boolean;
        /**
         * [descr:Properties.editing.allowDependencyDeleting]
         */
        allowDependencyDeleting?: boolean;
        /**
         * [descr:Properties.editing.allowResourceAdding]
         */
        allowResourceAdding?: boolean;
        /**
         * [descr:Properties.editing.allowResourceDeleting]
         */
        allowResourceDeleting?: boolean;
        /**
         * [descr:Properties.editing.allowResourceUpdating]
         */
        allowResourceUpdating?: boolean;
        /**
         * [descr:Properties.editing.allowTaskAdding]
         */
        allowTaskAdding?: boolean;
        /**
         * [descr:Properties.editing.allowTaskDeleting]
         */
        allowTaskDeleting?: boolean;
        /**
         * [descr:Properties.editing.allowTaskResourceUpdating]
         */
        allowTaskResourceUpdating?: boolean;
        /**
         * [descr:Properties.editing.allowTaskUpdating]
         */
        allowTaskUpdating?: boolean;
        /**
         * [descr:Properties.editing.enabled]
         */
        enabled?: boolean;
      };
      /**
       * [descr:Properties.validation]
       */
      validation?: {
        /**
         * [descr:Properties.validation.validateDependencies]
         */
        validateDependencies?: boolean;
        /**
         * [descr:Properties.validation.autoUpdateParentTasks]
         */
        autoUpdateParentTasks?: boolean;
        /**
         * [descr:Properties.validation.enablePredecessorGap]
         */
        enablePredecessorGap?: boolean;
      };
      /**
       * [descr:Properties.sorting]
       */
      sorting?: dxGanttSorting;
      /**
       * [descr:Properties.filterRow]
       */
      filterRow?: dxGanttFilterRow;
      /**
       * [descr:Properties.headerFilter]
       */
      headerFilter?: dxGanttHeaderFilter;
      /**
       * [descr:Properties.onSelectionChanged]
       */
      onSelectionChanged?: (e: SelectionChangedEvent) => void;
      /**
       * [descr:Properties.onCustomCommand]
       */
      onCustomCommand?: (e: CustomCommandEvent) => void;
      /**
       * [descr:Properties.onContextMenuPreparing]
       */
      onContextMenuPreparing?: (e: ContextMenuPreparingEvent) => void;
      /**
       * [descr:Properties.onTaskInserting]
       */
      onTaskInserting?: (e: TaskInsertingEvent) => void;
      /**
       * [descr:Properties.onTaskInserted]
       */
      onTaskInserted?: (e: TaskInsertedEvent) => void;
      /**
       * [descr:Properties.onTaskDeleting]
       */
      onTaskDeleting?: (e: TaskDeletingEvent) => void;
      /**
       * [descr:Properties.onTaskDeleted]
       */
      onTaskDeleted?: (e: TaskDeletedEvent) => void;
      /**
       * [descr:Properties.onTaskUpdating]
       */
      onTaskUpdating?: (e: TaskUpdatingEvent) => void;
      /**
       * [descr:Properties.onTaskUpdated]
       */
      onTaskUpdated?: (e: TaskUpdatedEvent) => void;
      /**
       * [descr:Properties.onTaskMoving]
       */
      onTaskMoving?: (e: TaskMovingEvent) => void;
      /**
       * [descr:Properties.onTaskEditDialogShowing]
       */
      onTaskEditDialogShowing?: (e: TaskEditDialogShowingEvent) => void;
      /**
       * [descr:Properties.onResourceManagerDialogShowing]
       */
      onResourceManagerDialogShowing?: (
        e: ResourceManagerDialogShowingEvent
      ) => void;
      /**
       * [descr:Properties.onDependencyInserting]
       */
      onDependencyInserting?: (e: DependencyInsertingEvent) => void;
      /**
       * [descr:Properties.onDependencyInserted]
       */
      onDependencyInserted?: (e: DependencyInsertedEvent) => void;
      /**
       * [descr:Properties.onDependencyDeleting]
       */
      onDependencyDeleting?: (e: DependencyDeletingEvent) => void;
      /**
       * [descr:Properties.onDependencyDeleted]
       */
      onDependencyDeleted?: (e: DependencyDeletedEvent) => void;
      /**
       * [descr:Properties.onResourceInserting]
       */
      onResourceInserting?: (e: ResourceInsertingEvent) => void;
      /**
       * [descr:Properties.onResourceInserted]
       */
      onResourceInserted?: (e: ResourceInsertedEvent) => void;
      /**
       * [descr:Properties.onResourceDeleting]
       */
      onResourceDeleting?: (e: ResourceDeletingEvent) => void;
      /**
       * [descr:Properties.onResourceDeleted]
       */
      onResourceDeleted?: (e: ResourceDeletedEvent) => void;
      /**
       * [descr:Properties.onResourceAssigning]
       */
      onResourceAssigning?: (e: ResourceAssigningEvent) => void;
      /**
       * [descr:Properties.onResourceAssigned]
       */
      onResourceAssigned?: (e: ResourceAssignedEvent) => void;
      /**
       * [descr:Properties.onResourceUnassigning]
       */
      onResourceUnassigning?: (e: ResourceUnassigningEvent) => void;
      /**
       * [descr:Properties.onResourceUnassigned]
       */
      onResourceUnassigned?: (e: ResourceUnassignedEvent) => void;
      /**
       * [descr:Properties.onTaskClick]
       */
      onTaskClick?: (e: TaskClickEvent) => void;
      /**
       * [descr:Properties.onTaskDblClick]
       */
      onTaskDblClick?: (e: TaskDblClickEvent) => void;
      /**
       * [descr:Properties.resourceAssignments]
       */
      resourceAssignments?: {
        /**
         * [descr:Properties.resourceAssignments.dataSource]
         */
        dataSource?: DevExpress.data.DataSource.DataSourceLike<any>;
        /**
         * [descr:Properties.resourceAssignments.keyExpr]
         */
        keyExpr?: string | Function;
        /**
         * [descr:Properties.resourceAssignments.resourceIdExpr]
         */
        resourceIdExpr?: string | Function;
        /**
         * [descr:Properties.resourceAssignments.taskIdExpr]
         */
        taskIdExpr?: string | Function;
      };
      /**
       * [descr:Properties.resources]
       */
      resources?: {
        /**
         * [descr:Properties.resources.colorExpr]
         */
        colorExpr?: string | Function;
        /**
         * [descr:Properties.resources.dataSource]
         */
        dataSource?: DevExpress.data.DataSource.DataSourceLike<any>;
        /**
         * [descr:Properties.resources.keyExpr]
         */
        keyExpr?: string | Function;
        /**
         * [descr:Properties.resources.textExpr]
         */
        textExpr?: string | Function;
      };
      /**
       * [descr:Properties.scaleType]
       */
      scaleType?:
        | 'auto'
        | 'minutes'
        | 'hours'
        | 'days'
        | 'weeks'
        | 'months'
        | 'quarters'
        | 'years';
      /**
       * [descr:Properties.scaleTypeRange]
       */
      scaleTypeRange?: {
        /**
         * [descr:Properties.scaleTypeRange.min]
         */
        min?:
          | 'minutes'
          | 'hours'
          | 'days'
          | 'weeks'
          | 'months'
          | 'quarters'
          | 'years';
        /**
         * [descr:Properties.scaleTypeRange.max]
         */
        max?:
          | 'minutes'
          | 'hours'
          | 'days'
          | 'weeks'
          | 'months'
          | 'quarters'
          | 'years';
      };
      /**
       * [descr:Properties.selectedRowKey]
       */
      selectedRowKey?: any;
      /**
       * [descr:Properties.showResources]
       */
      showResources?: boolean;
      /**
       * [descr:Properties.showDependencies]
       */
      showDependencies?: boolean;
      /**
       * [descr:Properties.showRowLines]
       */
      showRowLines?: boolean;
      /**
       * [descr:Properties.taskListWidth]
       */
      taskListWidth?: number;
      /**
       * [descr:Properties.taskTitlePosition]
       */
      taskTitlePosition?: 'inside' | 'outside' | 'none';
      /**
       * [descr:Properties.firstDayOfWeek]
       */
      firstDayOfWeek?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
      /**
       * [descr:Properties.tasks]
       */
      tasks?: {
        /**
         * [descr:Properties.tasks.colorExpr]
         */
        colorExpr?: string | Function;
        /**
         * [descr:Properties.tasks.dataSource]
         */
        dataSource?: DevExpress.data.DataSource.DataSourceLike<any>;
        /**
         * [descr:Properties.tasks.endExpr]
         */
        endExpr?: string | Function;
        /**
         * [descr:Properties.tasks.keyExpr]
         */
        keyExpr?: string | Function;
        /**
         * [descr:Properties.tasks.parentIdExpr]
         */
        parentIdExpr?: string | Function;
        /**
         * [descr:Properties.tasks.progressExpr]
         */
        progressExpr?: string | Function;
        /**
         * [descr:Properties.tasks.startExpr]
         */
        startExpr?: string | Function;
        /**
         * [descr:Properties.tasks.titleExpr]
         */
        titleExpr?: string | Function;
      };
      /**
       * [descr:Properties.toolbar]
       */
      toolbar?: dxGanttToolbar;
      /**
       * [descr:Properties.contextMenu]
       */
      contextMenu?: dxGanttContextMenu;
      /**
       * [descr:Properties.stripLines]
       */
      stripLines?: Array<dxGanttStripLine>;
      /**
       * [descr:Properties.taskTooltipContentTemplate]
       */
      taskTooltipContentTemplate?:
        | DevExpress.core.template
        | ((
            container: DevExpress.core.DxElement,
            task: any
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.taskTimeTooltipContentTemplate]
       */
      taskTimeTooltipContentTemplate?:
        | DevExpress.core.template
        | ((
            container: DevExpress.core.DxElement,
            item: TimeTooltipTemplateData
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.taskProgressTooltipContentTemplate]
       */
      taskProgressTooltipContentTemplate?:
        | DevExpress.core.template
        | ((
            container: DevExpress.core.DxElement,
            item: ProgressTooltipTemplateData
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.taskContentTemplate]
       */
      taskContentTemplate?:
        | DevExpress.core.template
        | ((
            container: DevExpress.core.DxElement,
            item: TaskContentTemplateData
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.rootValue]
       */
      rootValue?: any;
      /**
       * [descr:Properties.startDateRange]
       */
      startDateRange?: Date;
      /**
       * [descr:Properties.endDateRange]
       */
      endDateRange?: Date;
    }
    export type ResourceAssignedEvent = DevExpress.events.EventInfo<dxGantt> & {
      readonly values: any;
      readonly key: any;
    };
    export type ResourceAssigningEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
      };
    export type ResourceDeletedEvent = DevExpress.events.EventInfo<dxGantt> & {
      readonly values: any;
      readonly key: any;
    };
    export type ResourceDeletingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
        readonly key: any;
      };
    export type ResourceInsertedEvent = DevExpress.events.EventInfo<dxGantt> & {
      readonly values: any;
      readonly key: any;
    };
    export type ResourceInsertingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
      };
    export type ResourceManagerDialogShowingEvent =
      DevExpress.events.Cancelable &
        DevExpress.events.EventInfo<dxGantt> & {
          readonly values: Array<any>;
        };
    export type ResourceUnassignedEvent =
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
        readonly key: any;
      };
    export type ResourceUnassigningEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
        readonly key: any;
      };
    export type SelectionChangedEvent = DevExpress.events.EventInfo<dxGantt> & {
      readonly selectedRowKey?: any;
    };
    export type TaskClickEvent = DevExpress.events.NativeEventInfo<dxGantt> & {
      readonly key?: any;
      readonly data?: any;
    };
    export type TaskContentTemplateData = {
      readonly cellSize: any;
      readonly isMilestone: boolean;
      readonly taskData: any;
      readonly taskHTML: any;
      readonly taskPosition: any;
      readonly taskResources: Array<any>;
      readonly taskSize: any;
    };
    export type TaskDblClickEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxGantt> & {
        readonly key?: any;
        readonly data?: any;
      };
    export type TaskDeletedEvent = DevExpress.events.EventInfo<dxGantt> & {
      readonly values: any;
      readonly key: any;
    };
    export type TaskDeletingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
        readonly key: any;
      };
    export type TaskEditDialogShowingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
        readonly key: any;
        readonly readOnlyFields?: Array<string>;
        readonly hiddenFields?: Array<string>;
      };
    export type TaskInsertedEvent = DevExpress.events.EventInfo<dxGantt> & {
      readonly value?: any;
      readonly key: any;
    };
    export type TaskInsertingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly values: any;
      };
    export type TaskMovingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly newValues: any;
        readonly values: any;
        readonly key: any;
      };
    export type TaskUpdatedEvent = DevExpress.events.EventInfo<dxGantt> & {
      readonly values: any;
      readonly key: any;
    };
    export type TaskUpdatingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxGantt> & {
        readonly newValues: any;
        readonly values: any;
        readonly key: any;
      };
    export type TimeTooltipTemplateData = {
      readonly start: Date;
      readonly end: Date;
    };
  }
  /**
   * [descr:dxGanttContextMenu]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxGanttContextMenu {
    /**
     * [descr:dxGanttContextMenu.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:dxGanttContextMenu.items]
     */
    items?: Array<
      | DevExpress.ui.dxGantt.ContextMenuItem
      | 'undo'
      | 'redo'
      | 'expandAll'
      | 'collapseAll'
      | 'addTask'
      | 'deleteTask'
      | 'zoomIn'
      | 'zoomOut'
      | 'deleteDependency'
      | 'taskDetails'
      | 'resourceManager'
    >;
  }
  /**
   * [descr:dxGanttFilterRow]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxGanttFilterRow {
    /**
     * [descr:dxGanttFilterRow.betweenEndText]
     */
    betweenEndText?: string;
    /**
     * [descr:dxGanttFilterRow.betweenStartText]
     */
    betweenStartText?: string;
    /**
     * [descr:dxGanttFilterRow.operationDescriptions]
     */
    operationDescriptions?: dxGanttFilterRowOperationDescriptions;
    /**
     * [descr:dxGanttFilterRow.resetOperationText]
     */
    resetOperationText?: string;
    /**
     * [descr:dxGanttFilterRow.showAllText]
     */
    showAllText?: string;
    /**
     * [descr:dxGanttFilterRow.showOperationChooser]
     */
    showOperationChooser?: boolean;
    /**
     * [descr:dxGanttFilterRow.visible]
     */
    visible?: boolean;
  }
  /**
   * [descr:dxGanttFilterRowOperationDescriptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxGanttFilterRowOperationDescriptions {
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.between]
     */
    between?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.contains]
     */
    contains?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.endsWith]
     */
    endsWith?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.equal]
     */
    equal?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.greaterThan]
     */
    greaterThan?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.greaterThanOrEqual]
     */
    greaterThanOrEqual?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.lessThan]
     */
    lessThan?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.lessThanOrEqual]
     */
    lessThanOrEqual?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.notContains]
     */
    notContains?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.notEqual]
     */
    notEqual?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.startsWith]
     */
    startsWith?: string;
  }
  /**
   * [descr:dxGanttHeaderFilter]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxGanttHeaderFilter {
    /**
     * [descr:dxGanttHeaderFilter.allowSearch]
     */
    allowSearch?: boolean;
    /**
     * [descr:dxGanttHeaderFilter.height]
     */
    height?: number;
    /**
     * [descr:dxGanttHeaderFilter.searchTimeout]
     */
    searchTimeout?: number;
    /**
     * [descr:dxGanttHeaderFilter.texts]
     */
    texts?: dxGanttHeaderFilterTexts;
    /**
     * [descr:dxGanttHeaderFilter.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxGanttHeaderFilter.width]
     */
    width?: number;
  }
  /**
   * [descr:dxGanttHeaderFilterTexts]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxGanttHeaderFilterTexts {
    /**
     * [descr:dxGanttHeaderFilterTexts.cancel]
     */
    cancel?: string;
    /**
     * [descr:dxGanttHeaderFilterTexts.emptyValue]
     */
    emptyValue?: string;
    /**
     * [descr:dxGanttHeaderFilterTexts.ok]
     */
    ok?: string;
  }
  /**
   * [descr:dxGanttSorting]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxGanttSorting {
    /**
     * [descr:dxGanttSorting.ascendingText]
     */
    ascendingText?: string;
    /**
     * [descr:dxGanttSorting.clearText]
     */
    clearText?: string;
    /**
     * [descr:dxGanttSorting.descendingText]
     */
    descendingText?: string;
    /**
     * [descr:dxGanttSorting.mode]
     */
    mode?: 'multiple' | 'none' | 'single';
    /**
     * [descr:dxGanttSorting.showSortIndexes]
     */
    showSortIndexes?: boolean;
  }
  /**
   * [descr:dxGanttStripLine]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxGanttStripLine {
    /**
     * [descr:dxGanttStripLine.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:dxGanttStripLine.end]
     */
    end?: Date | number | string | (() => Date | number | string);
    /**
     * [descr:dxGanttStripLine.start]
     */
    start?: Date | number | string | (() => Date | number | string);
    /**
     * [descr:dxGanttStripLine.title]
     */
    title?: string;
  }
  /**
   * [descr:dxGanttToolbar]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxGanttToolbar {
    /**
     * [descr:dxGanttToolbar.items]
     */
    items?: Array<
      | DevExpress.ui.dxGantt.ToolbarItem
      | 'separator'
      | 'undo'
      | 'redo'
      | 'expandAll'
      | 'collapseAll'
      | 'addTask'
      | 'deleteTask'
      | 'zoomIn'
      | 'zoomOut'
      | 'taskDetails'
      | 'fullScreen'
      | 'resourceManager'
      | 'showResources'
      | 'showDependencies'
    >;
  }
  /**
   * [descr:dxHtmlEditor]
   */
  export class dxHtmlEditor extends Editor<DevExpress.ui.dxHtmlEditor.Properties> {
    /**
     * [descr:dxHtmlEditor.blur()]
     */
    blur(): void;
    /**
     * [descr:dxHtmlEditor.clearHistory()]
     */
    clearHistory(): void;
    /**
     * [descr:dxHtmlEditor.delete(index, length)]
     */
    delete(index: number, length: number): void;
    /**
     * [descr:dxHtmlEditor.format(formatName, formatValue)]
     */
    format(
      formatName:
        | 'background'
        | 'bold'
        | 'color'
        | 'font'
        | 'italic'
        | 'link'
        | 'size'
        | 'strike'
        | 'script'
        | 'underline'
        | 'blockquote'
        | 'header'
        | 'indent'
        | 'list'
        | 'align'
        | 'code-block'
        | string,
      formatValue: any
    ): void;
    /**
     * [descr:dxHtmlEditor.formatLine(index, length, formatName, formatValue)]
     */
    formatLine(
      index: number,
      length: number,
      formatName:
        | 'background'
        | 'bold'
        | 'color'
        | 'font'
        | 'italic'
        | 'link'
        | 'size'
        | 'strike'
        | 'script'
        | 'underline'
        | 'blockquote'
        | 'header'
        | 'indent'
        | 'list'
        | 'align'
        | 'code-block'
        | string,
      formatValue: any
    ): void;
    /**
     * [descr:dxHtmlEditor.formatLine(index, length, formats)]
     */
    formatLine(index: number, length: number, formats: any): void;
    /**
     * [descr:dxHtmlEditor.formatText(index, length, formatName, formatValue)]
     */
    formatText(
      index: number,
      length: number,
      formatName:
        | 'background'
        | 'bold'
        | 'color'
        | 'font'
        | 'italic'
        | 'link'
        | 'size'
        | 'strike'
        | 'script'
        | 'underline'
        | 'blockquote'
        | 'header'
        | 'indent'
        | 'list'
        | 'align'
        | 'code-block'
        | string,
      formatValue: any
    ): void;
    /**
     * [descr:dxHtmlEditor.formatText(index, length, formats)]
     */
    formatText(index: number, length: number, formats: any): void;
    /**
     * [descr:dxHtmlEditor.get(componentPath)]
     */
    get(componentPath: string): any;
    /**
     * [descr:dxHtmlEditor.getBounds(index, length)]
     */
    getBounds(index: number, length: number): any;
    /**
     * [descr:dxHtmlEditor.getFormat()]
     */
    getFormat(): any;
    /**
     * [descr:dxHtmlEditor.getFormat(index, length)]
     */
    getFormat(index: number, length: number): any;
    /**
     * [descr:dxHtmlEditor.getLength()]
     */
    getLength(): number;
    /**
     * [descr:dxHtmlEditor.getModule(moduleName)]
     */
    getModule(moduleName: string): any;
    /**
     * [descr:dxHtmlEditor.getQuillInstance()]
     */
    getQuillInstance(): any;
    /**
     * [descr:dxHtmlEditor.getSelection()]
     */
    getSelection(focus?: boolean | undefined): any;
    /**
     * [descr:dxHtmlEditor.getText(index, length)]
     */
    getText(index: number, length: number): string;
    /**
     * [descr:dxHtmlEditor.insertEmbed(index, type, config)]
     */
    insertEmbed(index: number, type: string, config: any): void;
    /**
     * [descr:dxHtmlEditor.insertText(index, text, formatName, formatValue)]
     */
    insertText(
      index: number,
      text: string,
      formatName:
        | 'background'
        | 'bold'
        | 'color'
        | 'font'
        | 'italic'
        | 'link'
        | 'size'
        | 'strike'
        | 'script'
        | 'underline'
        | 'blockquote'
        | 'header'
        | 'indent'
        | 'list'
        | 'align'
        | 'code-block'
        | string,
      formatValue: any
    ): void;
    /**
     * [descr:dxHtmlEditor.insertText(index, text, formats)]
     */
    insertText(index: number, text: string, formats: any): void;
    /**
     * [descr:dxHtmlEditor.redo()]
     */
    redo(): void;
    /**
     * [descr:dxHtmlEditor.register(components)]
     */
    register(modules: any): void;
    /**
     * [descr:dxHtmlEditor.removeFormat(index, length)]
     */
    removeFormat(index: number, length: number): void;
    /**
     * [descr:dxHtmlEditor.setSelection(index, length)]
     */
    setSelection(index: number, length: number): void;
    /**
     * [descr:dxHtmlEditor.undo()]
     */
    undo(): void;
  }
  module dxHtmlEditor {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxHtmlEditor>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxHtmlEditor>;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<dxHtmlEditor>;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<dxHtmlEditor>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxHtmlEditor>;
    export interface MentionTemplateData {
      readonly marker: string;
      readonly id?: string | number;
      readonly value?: any;
    }
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxHtmlEditor> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends EditorOptions<dxHtmlEditor> {
      /**
       * [descr:Properties.allowSoftLineBreak]
       */
      allowSoftLineBreak?: boolean;
      /**
       * [descr:Properties.customizeModules]
       */
      customizeModules?: (config: any) => void;
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.mediaResizing]
       */
      mediaResizing?: dxHtmlEditorMediaResizing;
      /**
       * [descr:Properties.tableResizing]
       */
      tableResizing?: dxHtmlEditorTableResizing;
      /**
       * [descr:Properties.mentions]
       */
      mentions?: Array<dxHtmlEditorMention>;
      /**
       * [descr:Properties.tableContextMenu]
       */
      tableContextMenu?: dxHtmlEditorTableContextMenu;
      /**
       * [descr:Properties.name]
       */
      name?: string;
      /**
       * [descr:Properties.onFocusIn]
       */
      onFocusIn?: (e: FocusInEvent) => void;
      /**
       * [descr:Properties.onFocusOut]
       */
      onFocusOut?: (e: FocusOutEvent) => void;
      /**
       * [descr:Properties.placeholder]
       */
      placeholder?: string;
      /**
       * [descr:Properties.toolbar]
       */
      toolbar?: dxHtmlEditorToolbar;
      /**
       * [descr:Properties.valueType]
       */
      valueType?: 'html' | 'markdown';
      /**
       * [descr:Properties.variables]
       */
      variables?: dxHtmlEditorVariables;
      /**
       * [descr:Properties.stylingMode]
       */
      stylingMode?: 'outlined' | 'underlined' | 'filled';
    }
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxHtmlEditor> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxHtmlEditorMediaResizing]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxHtmlEditorMediaResizing {
    /**
     * [descr:dxHtmlEditorMediaResizing.allowedTargets]
     */
    allowedTargets?: Array<string>;
    /**
     * [descr:dxHtmlEditorMediaResizing.enabled]
     */
    enabled?: boolean;
  }
  /**
   * [descr:dxHtmlEditorMention]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxHtmlEditorMention {
    /**
     * [descr:dxHtmlEditorMention.dataSource]
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<string>;
    /**
     * [descr:dxHtmlEditorMention.displayExpr]
     */
    displayExpr?: string | ((item: any) => string);
    /**
     * [descr:dxHtmlEditorMention.itemTemplate]
     */
    itemTemplate?:
      | DevExpress.core.template
      | ((
          itemData: any,
          itemIndex: number,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:dxHtmlEditorMention.marker]
     */
    marker?: string;
    /**
     * [descr:dxHtmlEditorMention.minSearchLength]
     */
    minSearchLength?: number;
    /**
     * [descr:dxHtmlEditorMention.searchExpr]
     */
    searchExpr?: string | Function | Array<string | Function>;
    /**
     * [descr:dxHtmlEditorMention.searchTimeout]
     */
    searchTimeout?: number;
    /**
     * [descr:dxHtmlEditorMention.template]
     */
    template?:
      | DevExpress.core.template
      | ((
          mentionData: DevExpress.ui.dxHtmlEditor.MentionTemplateData,
          contentElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:dxHtmlEditorMention.valueExpr]
     */
    valueExpr?: string | Function;
  }
  /**
   * [descr:dxHtmlEditorTableContextMenu]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxHtmlEditorTableContextMenu {
    /**
     * [descr:dxHtmlEditorTableContextMenu.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:dxHtmlEditorTableContextMenu.items]
     */
    items?: Array<
      | DevExpress.ui.dxHtmlEditor.ContextMenuItem
      | 'background'
      | 'bold'
      | 'color'
      | 'font'
      | 'italic'
      | 'link'
      | 'image'
      | 'strike'
      | 'subscript'
      | 'superscript'
      | 'underline'
      | 'blockquote'
      | 'header'
      | 'increaseIndent'
      | 'decreaseIndent'
      | 'orderedList'
      | 'bulletList'
      | 'alignLeft'
      | 'alignCenter'
      | 'alignRight'
      | 'alignJustify'
      | 'codeBlock'
      | 'variable'
      | 'separator'
      | 'undo'
      | 'redo'
      | 'clear'
      | 'insertTable'
      | 'insertRowAbove'
      | 'insertRowBelow'
      | 'insertColumnLeft'
      | 'insertColumnRight'
      | 'deleteColumn'
      | 'deleteRow'
      | 'deleteTable'
    >;
  }
  /**
   * [descr:dxHtmlEditorTableResizing]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxHtmlEditorTableResizing {
    /**
     * [descr:dxHtmlEditorTableResizing.minColumnWidth]
     */
    minColumnWidth?: number;
    /**
     * [descr:dxHtmlEditorTableResizing.minRowHeight]
     */
    minRowHeight?: number;
    /**
     * [descr:dxHtmlEditorTableResizing.enabled]
     */
    enabled?: boolean;
  }
  /**
   * [descr:dxHtmlEditorToolbar]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxHtmlEditorToolbar {
    /**
     * [descr:dxHtmlEditorToolbar.container]
     */
    container?: string | DevExpress.core.UserDefinedElement;
    /**
     * [descr:dxHtmlEditorToolbar.items]
     */
    items?: Array<
      | DevExpress.ui.dxHtmlEditor.ToolbarItem
      | 'background'
      | 'bold'
      | 'color'
      | 'font'
      | 'italic'
      | 'link'
      | 'image'
      | 'size'
      | 'strike'
      | 'subscript'
      | 'superscript'
      | 'underline'
      | 'blockquote'
      | 'header'
      | 'increaseIndent'
      | 'decreaseIndent'
      | 'orderedList'
      | 'bulletList'
      | 'alignLeft'
      | 'alignCenter'
      | 'alignRight'
      | 'alignJustify'
      | 'codeBlock'
      | 'variable'
      | 'separator'
      | 'undo'
      | 'redo'
      | 'clear'
      | 'insertTable'
      | 'insertHeaderRow'
      | 'insertRowAbove'
      | 'insertRowBelow'
      | 'insertColumnLeft'
      | 'insertColumnRight'
      | 'deleteColumn'
      | 'deleteRow'
      | 'deleteTable'
      | 'cellProperties'
      | 'tableProperties'
    >;
    /**
     * [descr:dxHtmlEditorToolbar.multiline]
     */
    multiline?: boolean;
  }
  /**
   * [descr:dxHtmlEditorVariables]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxHtmlEditorVariables {
    /**
     * [descr:dxHtmlEditorVariables.dataSource]
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<string>;
    /**
     * [descr:dxHtmlEditorVariables.escapeChar]
     */
    escapeChar?: string | Array<string>;
  }
  /**
   * [descr:dxItem]
   */
  export var dxItem: any;
  /**
   * [descr:dxList]
   */
  export class dxList<
    TItem extends DevExpress.ui.dxList.ItemLike = any,
    TKey = any
  > extends CollectionWidget<
    DevExpress.ui.dxList.Properties<TItem, TKey>,
    TItem,
    TKey
  > {
    /**
     * [descr:dxList.clientHeight()]
     */
    clientHeight(): number;
    /**
     * [descr:dxList.collapseGroup(groupIndex)]
     */
    collapseGroup(groupIndex: number): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxList.deleteItem(itemElement)]
     */
    deleteItem(itemElement: Element): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxList.deleteItem(itemIndex)]
     */
    deleteItem(itemIndex: number | any): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxList.expandGroup(groupIndex)]
     */
    expandGroup(groupIndex: number): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxList.isItemSelected(itemElement)]
     */
    isItemSelected(itemElement: Element): boolean;
    /**
     * [descr:dxList.isItemSelected(itemIndex)]
     */
    isItemSelected(itemIndex: number | any): boolean;
    /**
     * [descr:dxList.reload()]
     */
    reload(): void;
    /**
     * [descr:dxList.reorderItem(itemElement, toItemElement)]
     */
    reorderItem(
      itemElement: Element,
      toItemElement: Element
    ): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxList.reorderItem(itemIndex, toItemIndex)]
     */
    reorderItem(
      itemIndex: number | any,
      toItemIndex: number | any
    ): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxList.scrollBy(distance)]
     */
    scrollBy(distance: number): void;
    /**
     * [descr:dxList.scrollHeight()]
     */
    scrollHeight(): number;
    /**
     * [descr:dxList.scrollTo(location)]
     */
    scrollTo(location: number): void;
    /**
     * [descr:dxList.scrollToItem(itemElement)]
     */
    scrollToItem(itemElement: Element): void;
    /**
     * [descr:dxList.scrollToItem(itemIndex)]
     */
    scrollToItem(itemIndex: number | any): void;
    /**
     * [descr:dxList.scrollTop()]
     */
    scrollTop(): number;
    /**
     * [descr:dxList.selectAll()]
     */
    selectAll(): void;
    /**
     * [descr:dxList.selectItem(itemElement)]
     */
    selectItem(itemElement: Element): void;
    /**
     * [descr:dxList.selectItem(itemIndex)]
     */
    selectItem(itemIndex: number | any): void;
    /**
     * [descr:dxList.unselectAll()]
     */
    unselectAll(): void;
    /**
     * [descr:dxList.unselectItem(itemElement)]
     */
    unselectItem(itemElement: Element): void;
    /**
     * [descr:dxList.unselectItem(itemIndex)]
     */
    unselectItem(itemIndex: number | any): void;
    /**
     * [descr:dxList.updateDimensions()]
     */
    updateDimensions(): DevExpress.core.utils.DxPromise<void>;
  }
  module dxList {
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>>;
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>>;
    export type ExplicitTypes<TItem extends ItemLike, TKey> = {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      GroupRenderedEvent: GroupRenderedEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemDeletedEvent: ItemDeletedEvent<TItem, TKey>;
      ItemDeletingEvent: ItemDeletingEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      ItemReorderedEvent: ItemReorderedEvent<TItem, TKey>;
      ItemSwipeEvent: ItemSwipeEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
      PageLoadingEvent: PageLoadingEvent<TItem, TKey>;
      PullRefreshEvent: PullRefreshEvent<TItem, TKey>;
      ScrollEvent: ScrollEvent<TItem, TKey>;
      SelectAllValueChangedEvent: SelectAllValueChangedEvent<TItem, TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TItem, TKey>;
    };
    export type GroupRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>> & {
      readonly groupData?: any;
      readonly groupElement?: DevExpress.core.DxElement;
      readonly groupIndex?: number;
    };
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<dxList<TItem, TKey>>;
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxList<TItem, TKey>> &
      ListItemInfo<TItem>;
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxList<TItem, TKey>> &
      ListItemInfo<TItem>;
    export type ItemDeletedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>> & ListItemInfo<TItem>;
    export type ItemDeletingEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>> &
      ListItemInfo<TItem> & {
        cancel?: boolean | PromiseLike<void>;
      };
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxList<TItem, TKey>> &
      ListItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    type ItemLike = string | Item | any;
    export type ItemRenderedEvent<
      TItem extends Item | any = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxList<TItem, TKey>> &
      DevExpress.events.ItemInfo<TItem>;
    export type ItemReorderedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>> &
      ListItemInfo<TItem> & {
        readonly fromIndex: number;
        readonly toIndex: number;
      };
    export type ItemSwipeEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxList<TItem, TKey>> &
      ListItemInfo<TItem> & {
        readonly direction: string;
      };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface ListItemInfo<TItem extends ItemLike> {
      readonly itemData?: TItem;
      readonly itemElement: DevExpress.core.DxElement;
      readonly itemIndex: number | { group: number; item: number };
    }
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    export type PageLoadingEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>>;
    /**
     * [descr:Properties]
     */
    export interface Properties<TItem extends ItemLike = any, TKey = any>
      extends CollectionWidgetOptions<dxList<TItem, TKey>, TItem, TKey>,
        SearchBoxMixinOptions {
      /**
       * [descr:Properties.activeStateEnabled]
       */
      activeStateEnabled?: boolean;
      /**
       * [descr:Properties.allowItemDeleting]
       */
      allowItemDeleting?: boolean;
      /**
       * [descr:Properties.bounceEnabled]
       */
      bounceEnabled?: boolean;
      /**
       * [descr:Properties.collapsibleGroups]
       */
      collapsibleGroups?: boolean;
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<TItem, TKey>;
      /**
       * [descr:Properties.displayExpr]
       */
      displayExpr?: string | ((item: TItem) => string);
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.groupTemplate]
       */
      groupTemplate?:
        | DevExpress.core.template
        | ((
            groupData: any,
            groupIndex: number,
            groupElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.grouped]
       */
      grouped?: boolean;
      /**
       * [descr:Properties.hoverStateEnabled]
       */
      hoverStateEnabled?: boolean;
      /**
       * [descr:Properties.indicateLoading]
       */
      indicateLoading?: boolean;
      /**
       * [descr:Properties.itemDeleteMode]
       */
      itemDeleteMode?:
        | 'context'
        | 'slideButton'
        | 'slideItem'
        | 'static'
        | 'swipe'
        | 'toggle';
      /**
       * [descr:Properties.itemDragging]
       */
      itemDragging?: DevExpress.ui.dxSortable.Properties;
      /**
       * [descr:Properties.items]
       */
      items?: Array<TItem>;
      /**
       * [descr:Properties.menuItems]
       */
      menuItems?: Array<{
        /**
         * [descr:Properties.menuItems.action]
         */
        action?: (
          itemElement: DevExpress.core.DxElement,
          itemData: TItem
        ) => any;
        /**
         * [descr:Properties.menuItems.text]
         */
        text?: string;
      }>;
      /**
       * [descr:Properties.menuMode]
       */
      menuMode?: 'context' | 'slide';
      /**
       * [descr:Properties.nextButtonText]
       */
      nextButtonText?: string;
      /**
       * [descr:Properties.onGroupRendered]
       */
      onGroupRendered?: (e: GroupRenderedEvent<TItem, TKey>) => void;
      /**
       * [descr:Properties.onItemClick]
       */
      onItemClick?: ((e: ItemClickEvent<TItem, TKey>) => void) | string;
      /**
       * [descr:Properties.onItemContextMenu]
       */
      onItemContextMenu?: (e: ItemContextMenuEvent<TItem, TKey>) => void;
      /**
       * [descr:Properties.onItemDeleted]
       */
      onItemDeleted?: (e: ItemDeletedEvent<TItem, TKey>) => void;
      /**
       * [descr:Properties.onItemDeleting]
       */
      onItemDeleting?: (e: ItemDeletingEvent<TItem, TKey>) => void;
      /**
       * [descr:Properties.onItemHold]
       */
      onItemHold?: (e: ItemHoldEvent<TItem, TKey>) => void;
      /**
       * [descr:Properties.onItemReordered]
       */
      onItemReordered?: (e: ItemReorderedEvent<TItem, TKey>) => void;
      /**
       * [descr:Properties.onItemSwipe]
       */
      onItemSwipe?: (e: ItemSwipeEvent<TItem, TKey>) => void;
      /**
       * [descr:Properties.onPageLoading]
       */
      onPageLoading?: (e: PageLoadingEvent<TItem, TKey>) => void;
      /**
       * [descr:Properties.onPullRefresh]
       */
      onPullRefresh?: (e: PullRefreshEvent<TItem, TKey>) => void;
      /**
       * [descr:Properties.onScroll]
       */
      onScroll?: (e: ScrollEvent<TItem, TKey>) => void;
      /**
       * [descr:Properties.onSelectAllValueChanged]
       */
      onSelectAllValueChanged?: (
        e: SelectAllValueChangedEvent<TItem, TKey>
      ) => void;
      /**
       * [descr:Properties.pageLoadMode]
       */
      pageLoadMode?: 'nextButton' | 'scrollBottom';
      /**
       * [descr:Properties.pageLoadingText]
       */
      pageLoadingText?: string;
      /**
       * [descr:Properties.pullRefreshEnabled]
       */
      pullRefreshEnabled?: boolean;
      /**
       * [descr:Properties.pulledDownText]
       */
      pulledDownText?: string;
      /**
       * [descr:Properties.pullingDownText]
       */
      pullingDownText?: string;
      /**
       * [descr:Properties.refreshingText]
       */
      refreshingText?: string;
      /**
       * [descr:Properties.repaintChangesOnly]
       */
      repaintChangesOnly?: boolean;
      /**
       * [descr:Properties.scrollByContent]
       */
      scrollByContent?: boolean;
      /**
       * [descr:Properties.scrollByThumb]
       */
      scrollByThumb?: boolean;
      /**
       * [descr:Properties.scrollingEnabled]
       */
      scrollingEnabled?: boolean;
      /**
       * [descr:Properties.selectAllMode]
       */
      selectAllMode?: 'allPages' | 'page';
      /**
       * [descr:Properties.selectionMode]
       */
      selectionMode?: 'all' | 'multiple' | 'none' | 'single';
      /**
       * [descr:Properties.showScrollbar]
       */
      showScrollbar?: 'always' | 'never' | 'onHover' | 'onScroll';
      /**
       * [descr:Properties.showSelectionControls]
       */
      showSelectionControls?: boolean;
      /**
       * [descr:Properties.selectAllText]
       */
      selectAllText?: string;
      /**
       * [descr:Properties.useNativeScrolling]
       */
      useNativeScrolling?: boolean;
    }
    export type PullRefreshEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>>;
    export type ScrollEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxList<TItem, TKey>> & ScrollInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ScrollInfo {
      readonly scrollOffset?: any;
      readonly reachedLeft: boolean;
      readonly reachedRight: boolean;
      readonly reachedTop: boolean;
      readonly reachedBottom: boolean;
    }
    export type SelectAllValueChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>> & {
      readonly value: boolean;
    };
    export type SelectionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxList<TItem, TKey>> &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo<TItem>;
  }
  /**
   * [descr:dxLoadIndicator]
   */
  export class dxLoadIndicator extends Widget<DevExpress.ui.dxLoadIndicator.Properties> {}
  module dxLoadIndicator {
    export type ContentReadyEvent =
      DevExpress.events.EventInfo<dxLoadIndicator>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxLoadIndicator>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxLoadIndicator>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxLoadIndicator> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends WidgetOptions<dxLoadIndicator> {
      /**
       * [descr:Properties.indicatorSrc]
       */
      indicatorSrc?: string;
    }
  }
  /**
   * [descr:dxLoadPanel]
   */
  export class dxLoadPanel extends dxOverlay<DevExpress.ui.dxLoadPanel.Properties> {}
  module dxLoadPanel {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxLoadPanel>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxLoadPanel>;
    export type HiddenEvent = DevExpress.events.EventInfo<dxLoadPanel>;
    export type HidingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxLoadPanel>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxLoadPanel>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxLoadPanel> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends dxOverlayOptions<dxLoadPanel> {
      /**
       * [descr:Properties.animation]
       */
      animation?: dxLoadPanelAnimation;
      /**
       * [descr:Properties.container]
       */
      container?: string | DevExpress.core.UserDefinedElement;
      /**
       * [descr:Properties.delay]
       */
      delay?: number;
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.height]
       */
      height?: number | string | (() => number | string);
      /**
       * [descr:Properties.indicatorSrc]
       */
      indicatorSrc?: string;
      /**
       * [descr:Properties.maxHeight]
       */
      maxHeight?: number | string | (() => number | string);
      /**
       * [descr:Properties.maxWidth]
       */
      maxWidth?: number | string | (() => number | string);
      /**
       * [descr:Properties.message]
       */
      message?: string;
      /**
       * [descr:Properties.position]
       */
      position?:
        | 'bottom'
        | 'center'
        | 'left'
        | 'left bottom'
        | 'left top'
        | 'right'
        | 'right bottom'
        | 'right top'
        | 'top'
        | PositionConfig
        | Function;
      /**
       * [descr:Properties.shadingColor]
       */
      shadingColor?: string;
      /**
       * [descr:Properties.showIndicator]
       */
      showIndicator?: boolean;
      /**
       * [descr:Properties.showPane]
       */
      showPane?: boolean;
      /**
       * [descr:Properties.width]
       */
      width?: number | string | (() => number | string);
    }
    export type ShowingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxLoadPanel>;
    export type ShownEvent = DevExpress.events.EventInfo<dxLoadPanel>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxLoadPanelAnimation extends dxOverlayAnimation {
    /**
     * [descr:dxLoadPanelOptions.animation.hide]
     */
    hide?: AnimationConfig;
    /**
     * [descr:dxLoadPanelOptions.animation.show]
     */
    show?: AnimationConfig;
  }
  /**
   * [descr:dxLookup]
   */
  export class dxLookup extends dxDropDownList<DevExpress.ui.dxLookup.Properties> {}
  module dxLookup {
    export type ClosedEvent = DevExpress.events.EventInfo<dxLookup>;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxLookup>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxLookup>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxLookup>;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<dxLookup> &
      DevExpress.events.ItemInfo;
    export type OpenedEvent = DevExpress.events.EventInfo<dxLookup>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxLookup> &
      DevExpress.events.ChangedOptionInfo;
    export type PageLoadingEvent = DevExpress.events.EventInfo<dxLookup>;
    /**
     * [descr:Properties]
     */
    export interface Properties extends dxDropDownListOptions<dxLookup> {
      /**
       * [descr:Properties.applyButtonText]
       */
      applyButtonText?: string;
      /**
       * [descr:Properties.applyValueMode]
       */
      applyValueMode?: 'instantly' | 'useButtons';
      /**
       * [descr:Properties.cancelButtonText]
       */
      cancelButtonText?: string;
      /**
       * [descr:Properties.cleanSearchOnOpening]
       */
      cleanSearchOnOpening?: boolean;
      /**
       * [descr:Properties.clearButtonText]
       */
      clearButtonText?: string;
      /**
       * [descr:Properties.fieldTemplate]
       */
      fieldTemplate?:
        | DevExpress.core.template
        | ((
            selectedItem: any,
            fieldElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.fullScreen]
       * @deprecated [depNote:Properties.fullScreen]
       */
      fullScreen?: boolean;
      /**
       * [descr:Properties.groupTemplate]
       */
      groupTemplate?:
        | DevExpress.core.template
        | ((
            itemData: any,
            itemIndex: number,
            itemElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.grouped]
       */
      grouped?: boolean;
      /**
       * [descr:Properties.nextButtonText]
       */
      nextButtonText?: string;
      /**
       * [descr:Properties.onPageLoading]
       */
      onPageLoading?: (e: PageLoadingEvent) => void;
      /**
       * [descr:Properties.onPullRefresh]
       */
      onPullRefresh?: (e: PullRefreshEvent) => void;
      /**
       * [descr:Properties.onScroll]
       */
      onScroll?: (e: ScrollEvent) => void;
      /**
       * [descr:Properties.onValueChanged]
       */
      onValueChanged?: (e: ValueChangedEvent) => void;
      /**
       * [descr:Properties.pageLoadMode]
       */
      pageLoadMode?: 'nextButton' | 'scrollBottom';
      /**
       * [descr:Properties.pageLoadingText]
       */
      pageLoadingText?: string;
      /**
       * [descr:Properties.placeholder]
       */
      placeholder?: string;
      /**
       * [descr:Properties.pullRefreshEnabled]
       */
      pullRefreshEnabled?: boolean;
      /**
       * [descr:Properties.pulledDownText]
       */
      pulledDownText?: string;
      /**
       * [descr:Properties.pullingDownText]
       */
      pullingDownText?: string;
      /**
       * [descr:Properties.refreshingText]
       */
      refreshingText?: string;
      /**
       * [descr:Properties.searchEnabled]
       */
      searchEnabled?: boolean;
      /**
       * [descr:Properties.searchPlaceholder]
       */
      searchPlaceholder?: string;
      /**
       * [descr:Properties.showCancelButton]
       */
      showCancelButton?: boolean;
      /**
       * [descr:Properties.showClearButton]
       */
      showClearButton?: boolean;
      /**
       * [descr:Properties.useNativeScrolling]
       */
      useNativeScrolling?: boolean;
      /**
       * [descr:Properties.usePopover]
       */
      usePopover?: boolean;
      /**
       * [descr:Properties.dropDownCentered]
       */
      dropDownCentered?: boolean;
      /**
       * [descr:Properties.dropDownOptions]
       */
      dropDownOptions?: DevExpress.ui.dxPopover.Properties;
    }
    export type PullRefreshEvent = DevExpress.events.EventInfo<dxLookup>;
    export type ScrollEvent = DevExpress.events.NativeEventInfo<dxLookup> &
      DevExpress.ui.dxList.ScrollInfo;
    export type SelectionChangedEvent = DevExpress.events.EventInfo<dxLookup> &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo;
    export type TitleRenderedEvent = DevExpress.events.EventInfo<dxLookup> &
      DevExpress.ui.dxPopup.TitleRenderedInfo;
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxLookup> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxMap]
   */
  export class dxMap extends Widget<DevExpress.ui.dxMap.Properties> {
    /**
     * [descr:dxMap.addMarker(markerOptions)]
     */
    addMarker(
      markerOptions: any | Array<any>
    ): DevExpress.core.utils.DxPromise<any>;
    /**
     * [descr:dxMap.addRoute(routeOptions)]
     */
    addRoute(options: any | Array<any>): DevExpress.core.utils.DxPromise<any>;
    /**
     * [descr:dxMap.removeMarker(marker)]
     */
    removeMarker(
      marker: any | number | Array<any>
    ): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxMap.removeRoute(route)]
     */
    removeRoute(
      route: any | number | Array<any>
    ): DevExpress.core.utils.DxPromise<void>;
  }
  module dxMap {
    export type ClickEvent = DevExpress.events.NativeEventInfo<dxMap>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxMap>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxMap>;
    export type MarkerAddedEvent = DevExpress.events.EventInfo<dxMap> & {
      readonly options: any;
      originalMarker: any;
    };
    export type MarkerRemovedEvent = DevExpress.events.EventInfo<dxMap> & {
      readonly options?: any;
    };
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxMap> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends WidgetOptions<dxMap> {
      /**
       * [descr:Properties.apiKey]
       */
      apiKey?:
        | string
        | {
            /**
             * [descr:Properties.apiKey.bing]
             */
            bing?: string;
            /**
             * [descr:Properties.apiKey.google]
             */
            google?: string;
            /**
             * [descr:Properties.apiKey.googleStatic]
             */
            googleStatic?: string;
          };
      /**
       * [descr:Properties.autoAdjust]
       */
      autoAdjust?: boolean;
      /**
       * [descr:Properties.center]
       */
      center?: any | string | Array<number>;
      /**
       * [descr:Properties.controls]
       */
      controls?: boolean;
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.height]
       */
      height?: number | string | (() => number | string);
      /**
       * [descr:Properties.markerIconSrc]
       */
      markerIconSrc?: string;
      /**
       * [descr:Properties.markers]
       */
      markers?: Array<{
        /**
         * [descr:Properties.markers.iconSrc]
         */
        iconSrc?: string;
        /**
         * [descr:Properties.markers.location]
         */
        location?: any | string | Array<number>;
        /**
         * [descr:Properties.markers.onClick]
         */
        onClick?: Function;
        /**
         * [descr:Properties.markers.tooltip]
         */
        tooltip?:
          | string
          | {
              /**
               * [descr:Properties.markers.tooltip.isShown]
               */
              isShown?: boolean;
              /**
               * [descr:Properties.markers.tooltip.text]
               */
              text?: string;
            };
      }>;
      /**
       * [descr:Properties.onClick]
       */
      onClick?: ((e: ClickEvent) => void) | string;
      /**
       * [descr:Properties.onMarkerAdded]
       */
      onMarkerAdded?: (e: MarkerAddedEvent) => void;
      /**
       * [descr:Properties.onMarkerRemoved]
       */
      onMarkerRemoved?: (e: MarkerRemovedEvent) => void;
      /**
       * [descr:Properties.onReady]
       */
      onReady?: (e: ReadyEvent) => void;
      /**
       * [descr:Properties.onRouteAdded]
       */
      onRouteAdded?: (e: RouteAddedEvent) => void;
      /**
       * [descr:Properties.onRouteRemoved]
       */
      onRouteRemoved?: (e: RouteRemovedEvent) => void;
      /**
       * [descr:Properties.provider]
       */
      provider?: 'bing' | 'google' | 'googleStatic';
      /**
       * [descr:Properties.routes]
       */
      routes?: Array<{
        /**
         * [descr:Properties.routes.color]
         */
        color?: string;
        /**
         * [descr:Properties.routes.locations]
         */
        locations?: Array<any>;
        /**
         * [descr:Properties.routes.mode]
         */
        mode?: 'driving' | 'walking';
        /**
         * [descr:Properties.routes.opacity]
         */
        opacity?: number;
        /**
         * [descr:Properties.routes.weight]
         */
        weight?: number;
      }>;
      /**
       * [descr:Properties.type]
       */
      type?: 'hybrid' | 'roadmap' | 'satellite';
      /**
       * [descr:Properties.width]
       */
      width?: number | string | (() => number | string);
      /**
       * [descr:Properties.zoom]
       */
      zoom?: number;
    }
    export type ReadyEvent = DevExpress.events.EventInfo<dxMap> & {
      originalMap: any;
    };
    export type RouteAddedEvent = DevExpress.events.EventInfo<dxMap> & {
      readonly options: any;
      originalRoute: any;
    };
    export type RouteRemovedEvent = DevExpress.events.EventInfo<dxMap> & {
      readonly options?: any;
    };
  }
  /**
   * [descr:dxMenu]
   */
  export class dxMenu extends dxMenuBase<DevExpress.ui.dxMenu.Properties> {}
  module dxMenu {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxMenu>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxMenu>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxMenu>;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<dxMenu> &
      DevExpress.events.ItemInfo;
    export type ItemContextMenuEvent =
      DevExpress.events.NativeEventInfo<dxMenu> & DevExpress.events.ItemInfo;
    export type ItemRenderedEvent = DevExpress.events.NativeEventInfo<dxMenu> &
      DevExpress.events.ItemInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface MenuBasePlainItem extends CollectionWidgetItem {
      /**
       * [descr:dxMenuBaseItem.beginGroup]
       */
      beginGroup?: boolean;
      /**
       * [descr:dxMenuBaseItem.closeMenuOnClick]
       */
      closeMenuOnClick?: boolean;
      /**
       * [descr:dxMenuBaseItem.disabled]
       */
      disabled?: boolean;
      /**
       * [descr:dxMenuBaseItem.icon]
       */
      icon?: string;
      /**
       * [descr:dxMenuBaseItem.selectable]
       */
      selectable?: boolean;
      /**
       * [descr:dxMenuBaseItem.selected]
       */
      selected?: boolean;
      /**
       * [descr:dxMenuBaseItem.text]
       */
      text?: string;
      /**
       * [descr:dxMenuBaseItem.visible]
       */
      visible?: boolean;
    }
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxMenu> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends dxMenuBaseOptions<dxMenu> {
      /**
       * [descr:Properties.adaptivityEnabled]
       */
      adaptivityEnabled?: boolean;
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<Item>;
      /**
       * [descr:Properties.hideSubmenuOnMouseLeave]
       */
      hideSubmenuOnMouseLeave?: boolean;
      /**
       * [descr:Properties.items]
       */
      items?: Array<Item>;
      /**
       * [descr:Properties.onSubmenuHidden]
       */
      onSubmenuHidden?: (e: SubmenuHiddenEvent) => void;
      /**
       * [descr:Properties.onSubmenuHiding]
       */
      onSubmenuHiding?: (e: SubmenuHidingEvent) => void;
      /**
       * [descr:Properties.onSubmenuShowing]
       */
      onSubmenuShowing?: (e: SubmenuShowingEvent) => void;
      /**
       * [descr:Properties.onSubmenuShown]
       */
      onSubmenuShown?: (e: SubmenuShownEvent) => void;
      /**
       * [descr:Properties.orientation]
       */
      orientation?: 'horizontal' | 'vertical';
      /**
       * [descr:Properties.showFirstSubmenuMode]
       */
      showFirstSubmenuMode?:
        | {
            /**
             * [descr:Properties.showFirstSubmenuMode.delay]
             */
            delay?:
              | {
                  /**
                   * [descr:Properties.showFirstSubmenuMode.delay.hide]
                   */
                  hide?: number;
                  /**
                   * [descr:Properties.showFirstSubmenuMode.delay.show]
                   */
                  show?: number;
                }
              | number;
            /**
             * [descr:Properties.showFirstSubmenuMode.name]
             */
            name?: 'onClick' | 'onHover';
          }
        | 'onClick'
        | 'onHover';
      /**
       * [descr:Properties.submenuDirection]
       */
      submenuDirection?: 'auto' | 'leftOrTop' | 'rightOrBottom';
    }
    export type SelectionChangedEvent = DevExpress.events.EventInfo<dxMenu> &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo;
    export type SubmenuHiddenEvent = DevExpress.events.EventInfo<dxMenu> & {
      readonly rootItem?: DevExpress.core.DxElement;
    };
    export type SubmenuHidingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxMenu> & {
        readonly rootItem?: DevExpress.core.DxElement;
      };
    export type SubmenuShowingEvent = DevExpress.events.EventInfo<dxMenu> & {
      readonly rootItem?: DevExpress.core.DxElement;
    };
    export type SubmenuShownEvent = DevExpress.events.EventInfo<dxMenu> & {
      readonly rootItem?: DevExpress.core.DxElement;
    };
  }
  /**
   * [descr:dxMenuBase]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class dxMenuBase<
    TProperties
  > extends HierarchicalCollectionWidget<TProperties> {
    /**
     * [descr:dxMenuBase.selectItem(itemElement)]
     */
    selectItem(itemElement: Element): void;
    /**
     * [descr:dxMenuBase.unselectItem(itemElement)]
     */
    unselectItem(itemElement: Element): void;
  }
  /**
   * [descr:dxMenuBaseItem]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxMenuBaseItem
    extends DevExpress.ui.dxMenu.MenuBasePlainItem {
    /**
     * [descr:dxMenuBaseItem.items]
     */
    items?: Array<dxMenuBaseItem>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxMenuBaseOptions<TComponent>
    extends DevExpress.core.Skip<
      HierarchicalCollectionWidgetOptions<TComponent>,
      'dataSource'
    > {
    /**
     * [descr:dxMenuBaseOptions.activeStateEnabled]
     */
    activeStateEnabled?: boolean;
    /**
     * [descr:dxMenuBaseOptions.animation]
     */
    animation?: {
      /**
       * [descr:dxMenuBaseOptions.animation.hide]
       */
      hide?: AnimationConfig;
      /**
       * [descr:dxMenuBaseOptions.animation.show]
       */
      show?: AnimationConfig;
    };
    /**
     * [descr:dxMenuBaseOptions.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:dxMenuBaseOptions.dataSource]
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<dxMenuBaseItem>;
    /**
     * [descr:dxMenuBaseOptions.items]
     */
    items?: Array<dxMenuBaseItem>;
    /**
     * [descr:dxMenuBaseOptions.selectByClick]
     */
    selectByClick?: boolean;
    /**
     * [descr:dxMenuBaseOptions.selectionMode]
     */
    selectionMode?: 'none' | 'single';
    /**
     * [descr:dxMenuBaseOptions.showSubmenuMode]
     */
    showSubmenuMode?:
      | {
          /**
           * [descr:dxMenuBaseOptions.showSubmenuMode.delay]
           */
          delay?:
            | {
                /**
                 * [descr:dxMenuBaseOptions.showSubmenuMode.delay.hide]
                 */
                hide?: number;
                /**
                 * [descr:dxMenuBaseOptions.showSubmenuMode.delay.show]
                 */
                show?: number;
              }
            | number;
          /**
           * [descr:dxMenuBaseOptions.showSubmenuMode.name]
           */
          name?: 'onClick' | 'onHover';
        }
      | 'onClick'
      | 'onHover';
  }
  /**
   * [descr:dxMultiView]
   */
  export class dxMultiView<
    TProperties = DevExpress.ui.dxMultiView.Properties
  > extends CollectionWidget<TProperties> {}
  module dxMultiView {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxMultiView>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxMultiView>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxMultiView>;
    export type ItemClickEvent =
      DevExpress.events.NativeEventInfo<dxMultiView> &
        DevExpress.events.ItemInfo;
    export type ItemContextMenuEvent =
      DevExpress.events.NativeEventInfo<dxMultiView> &
        DevExpress.events.ItemInfo;
    export type ItemHoldEvent = DevExpress.events.NativeEventInfo<dxMultiView> &
      DevExpress.events.ItemInfo;
    export type ItemRenderedEvent =
      DevExpress.events.NativeEventInfo<dxMultiView> &
        DevExpress.events.ItemInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface MultiViewInstance extends dxMultiView<Properties> {}
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxMultiView> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties<TComponent = MultiViewInstance>
      extends CollectionWidgetOptions<TComponent> {
      /**
       * [descr:Properties.animationEnabled]
       */
      animationEnabled?: boolean;
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<
        string | Item | any
      >;
      /**
       * [descr:Properties.deferRendering]
       */
      deferRendering?: boolean;
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.items]
       */
      items?: Array<string | Item | any>;
      /**
       * [descr:Properties.loop]
       */
      loop?: boolean;
      /**
       * [descr:Properties.selectedIndex]
       */
      selectedIndex?: number;
      /**
       * [descr:Properties.swipeEnabled]
       */
      swipeEnabled?: boolean;
    }
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxMultiView> &
        DevExpress.ui.CollectionWidget.SelectionChangedInfo;
  }
  /**
   * [descr:dxNavBar]
   * @deprecated [depNote:dxNavBar]
   */
  export class dxNavBar extends dxTabs<DevExpress.ui.dxNavBar.Properties> {}
  module dxNavBar {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxNavBar>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxNavBar>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxNavBar>;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<dxNavBar> &
      DevExpress.events.ItemInfo;
    export type ItemContextMenuEvent =
      DevExpress.events.NativeEventInfo<dxNavBar> & DevExpress.events.ItemInfo;
    export type ItemHoldEvent = DevExpress.events.NativeEventInfo<dxNavBar> &
      DevExpress.events.ItemInfo;
    export type ItemRenderedEvent =
      DevExpress.events.NativeEventInfo<dxNavBar> & DevExpress.events.ItemInfo;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxNavBar> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties
      extends DevExpress.ui.dxTabs.Properties<dxNavBar> {
      /**
       * [descr:Properties.scrollByContent]
       */
      scrollByContent?: boolean;
    }
    export type SelectionChangedEvent = DevExpress.events.EventInfo<dxNavBar> &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo;
  }
  /**
   * [descr:dxNumberBox]
   */
  export class dxNumberBox extends dxTextEditor<DevExpress.ui.dxNumberBox.Properties> {}
  module dxNumberBox {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<dxNumberBox>;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxNumberBox>;
    export type CopyEvent = DevExpress.events.NativeEventInfo<dxNumberBox>;
    export type CutEvent = DevExpress.events.NativeEventInfo<dxNumberBox>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxNumberBox>;
    export type EnterKeyEvent = DevExpress.events.NativeEventInfo<dxNumberBox>;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<dxNumberBox>;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<dxNumberBox>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxNumberBox>;
    export type InputEvent = DevExpress.events.NativeEventInfo<dxNumberBox>;
    export type KeyDownEvent = DevExpress.events.NativeEventInfo<dxNumberBox>;
    export type KeyPressEvent = DevExpress.events.NativeEventInfo<dxNumberBox>;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<dxNumberBox>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxNumberBox> &
      DevExpress.events.ChangedOptionInfo;
    export type PasteEvent = DevExpress.events.NativeEventInfo<dxNumberBox>;
    /**
     * [descr:Properties]
     */
    export interface Properties extends dxTextEditorOptions<dxNumberBox> {
      /**
       * [descr:Properties.buttons]
       */
      buttons?: Array<'clear' | 'spins' | dxTextEditorButton>;
      /**
       * [descr:Properties.format]
       */
      format?: Format;
      /**
       * [descr:Properties.invalidValueMessage]
       */
      invalidValueMessage?: string;
      /**
       * [descr:Properties.max]
       */
      max?: number;
      /**
       * [descr:Properties.min]
       */
      min?: number;
      /**
       * [descr:Properties.mode]
       */
      mode?: 'number' | 'text' | 'tel';
      /**
       * [descr:Properties.showSpinButtons]
       */
      showSpinButtons?: boolean;
      /**
       * [descr:Properties.step]
       */
      step?: number;
      /**
       * [descr:Properties.useLargeSpinButtons]
       */
      useLargeSpinButtons?: boolean;
      /**
       * [descr:Properties.value]
       */
      value?: number;
    }
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxNumberBox> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxOverlay]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class dxOverlay<TProperties> extends Widget<TProperties> {
    /**
     * [descr:dxOverlay.content()]
     */
    content(): DevExpress.core.DxElement;
    /**
     * [descr:dxOverlay.hide()]
     */
    hide(): DevExpress.core.utils.DxPromise<boolean>;
    /**
     * [descr:dxOverlay.repaint()]
     */
    repaint(): void;
    /**
     * [descr:dxOverlay.show()]
     */
    show(): DevExpress.core.utils.DxPromise<boolean>;
    /**
     * [descr:dxOverlay.toggle(showing)]
     */
    toggle(showing: boolean): DevExpress.core.utils.DxPromise<boolean>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxOverlayAnimation {
    /**
     * [descr:dxOverlayOptions.animation.hide]
     */
    hide?: AnimationConfig;
    /**
     * [descr:dxOverlayOptions.animation.show]
     */
    show?: AnimationConfig;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxOverlayOptions<TComponent>
    extends WidgetOptions<TComponent> {
    /**
     * [descr:dxOverlayOptions.animation]
     */
    animation?: dxOverlayAnimation;
    /**
     * [descr:dxOverlayOptions.closeOnOutsideClick]
     */
    closeOnOutsideClick?:
      | boolean
      | ((event: DevExpress.events.DxEvent) => boolean);
    /**
     * [descr:dxOverlayOptions.contentTemplate]
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          contentElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:dxOverlayOptions.copyRootClassesToWrapper]
     * @deprecated [depNote:dxOverlayOptions.copyRootClassesToWrapper]
     */
    copyRootClassesToWrapper?: boolean;
    /**
     * [descr:dxOverlayOptions.deferRendering]
     */
    deferRendering?: boolean;
    /**
     * [descr:dxOverlayOptions.dragAndResizeArea]
     */
    dragAndResizeArea?: string | DevExpress.core.UserDefinedElement;
    /**
     * [descr:dxOverlayOptions.dragEnabled]
     */
    dragEnabled?: boolean;
    /**
     * [descr:dxOverlayOptions.dragOutsideBoundary]
     */
    dragOutsideBoundary?: boolean;
    /**
     * [descr:dxOverlayOptions.elementAttr]
     * @deprecated [depNote:dxOverlayOptions.elementAttr]
     */
    elementAttr?: any;
    /**
     * [descr:dxOverlayOptions.height]
     */
    height?: number | string | (() => number | string);
    /**
     * [descr:dxOverlayOptions.maxHeight]
     */
    maxHeight?: number | string | (() => number | string);
    /**
     * [descr:dxOverlayOptions.maxWidth]
     */
    maxWidth?: number | string | (() => number | string);
    /**
     * [descr:dxOverlayOptions.minHeight]
     */
    minHeight?: number | string | (() => number | string);
    /**
     * [descr:dxOverlayOptions.minWidth]
     */
    minWidth?: number | string | (() => number | string);
    /**
     * [descr:dxOverlayOptions.onHidden]
     */
    onHidden?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * [descr:dxOverlayOptions.onHiding]
     */
    onHiding?: (
      e: DevExpress.events.Cancelable & DevExpress.events.EventInfo<TComponent>
    ) => void;
    /**
     * [descr:dxOverlayOptions.onShowing]
     */
    onShowing?: (
      e: DevExpress.events.Cancelable & DevExpress.events.EventInfo<TComponent>
    ) => void;
    /**
     * [descr:dxOverlayOptions.onShown]
     */
    onShown?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * [descr:dxOverlayOptions.position]
     */
    position?: any;
    /**
     * [descr:dxOverlayOptions.shading]
     */
    shading?: boolean;
    /**
     * [descr:dxOverlayOptions.shadingColor]
     */
    shadingColor?: string;
    /**
     * [descr:dxOverlayOptions.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxOverlayOptions.width]
     */
    width?: number | string | (() => number | string);
    /**
     * [descr:dxOverlayOptions.wrapperAttr]
     */
    wrapperAttr?: any;
    /**
     * [descr:dxOverlayOptions.hideOnParentScroll]
     */
    hideOnParentScroll?: boolean;
  }
  /**
   * [descr:dxPivotGrid]
   */
  export class dxPivotGrid extends Widget<DevExpress.ui.dxPivotGrid.Properties> {
    /**
     * [descr:dxPivotGrid.bindChart(chart, integrationOptions)]
     */
    bindChart(
      chart: string | DevExpress.core.DxElement | any,
      integrationOptions: {
        inverted?: boolean;
        dataFieldsDisplayMode?: string;
        putDataFieldsInto?: string;
        alternateDataFields?: boolean;
        processCell?: Function;
        customizeChart?: Function;
        customizeSeries?: Function;
      }
    ): Function & null;
    /**
     * [descr:dxPivotGrid.exportToExcel()]
     * @deprecated [depNote:dxPivotGrid.exportToExcel()]
     */
    exportToExcel(): void;
    /**
     * [descr:dxPivotGrid.getDataSource()]
     */
    getDataSource(): DevExpress.data.PivotGridDataSource;
    /**
     * [descr:dxPivotGrid.getFieldChooserPopup()]
     */
    getFieldChooserPopup(): dxPopup;
    /**
     * [descr:dxPivotGrid.updateDimensions()]
     */
    updateDimensions(): void;
  }
  module dxPivotGrid {
    export type CellClickEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxPivotGrid> & {
        readonly area?: string;
        readonly cellElement?: DevExpress.core.DxElement;
        readonly cell?: Cell;
        readonly rowIndex?: number;
        readonly columnIndex?: number;
        readonly columnFields?: Array<DevExpress.data.PivotGridDataSource.Field>;
        readonly rowFields?: Array<DevExpress.data.PivotGridDataSource.Field>;
        readonly dataFields?: Array<DevExpress.data.PivotGridDataSource.Field>;
      };
    export type CellPreparedEvent = DevExpress.events.EventInfo<dxPivotGrid> & {
      readonly area?: string;
      readonly cellElement?: DevExpress.core.DxElement;
      readonly cell?: Cell;
      readonly rowIndex?: number;
      readonly columnIndex?: number;
    };
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxPivotGrid>;
    export type ContextMenuPreparingEvent =
      DevExpress.events.EventInfo<dxPivotGrid> & {
        readonly area?: string;
        readonly cell?: Cell;
        readonly cellElement?: DevExpress.core.DxElement;
        readonly columnIndex?: number;
        readonly rowIndex?: number;
        readonly dataFields?: Array<DevExpress.data.PivotGridDataSource.Field>;
        readonly rowFields?: Array<DevExpress.data.PivotGridDataSource.Field>;
        readonly columnFields?: Array<DevExpress.data.PivotGridDataSource.Field>;
        readonly field?: DevExpress.data.PivotGridDataSource.Field;
        items?: Array<any>;
      };
    export type DisposingEvent = DevExpress.events.EventInfo<dxPivotGrid>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxPivotGrid>;
    export type ExportingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxPivotGrid> & {
        fileName?: string;
      };
    export type FileSavingEvent = DevExpress.events.Cancelable & {
      readonly component: dxPivotGrid;
      readonly element: DevExpress.core.DxElement;
      readonly data?: Blob;
      readonly format?: string;
      fileName?: string;
    };
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxPivotGrid>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxPivotGrid> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends WidgetOptions<dxPivotGrid> {
      /**
       * [descr:Properties.allowExpandAll]
       */
      allowExpandAll?: boolean;
      /**
       * [descr:Properties.allowFiltering]
       */
      allowFiltering?: boolean;
      /**
       * [descr:Properties.allowSorting]
       */
      allowSorting?: boolean;
      /**
       * [descr:Properties.allowSortingBySummary]
       */
      allowSortingBySummary?: boolean;
      /**
       * [descr:Properties.dataFieldArea]
       */
      dataFieldArea?: 'column' | 'row';
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?:
        | Array<any>
        | DevExpress.data.PivotGridDataSource
        | DevExpress.data.PivotGridDataSource.Options;
      /**
       * [descr:Properties.encodeHtml]
       */
      encodeHtml?: boolean;
      /**
       * [descr:Properties.export]
       */
      export?: {
        /**
         * [descr:Properties.export.enabled]
         */
        enabled?: boolean;
        /**
         * [descr:Properties.export.fileName]
         * @deprecated [depNote:Properties.export.fileName]
         */
        fileName?: string;
        /**
         * [descr:Properties.export.ignoreExcelErrors]
         * @deprecated [depNote:Properties.export.ignoreExcelErrors]
         */
        ignoreExcelErrors?: boolean;
        /**
         * [descr:Properties.export.proxyUrl]
         * @deprecated [depNote:Properties.export.proxyUrl]
         */
        proxyUrl?: string;
      };
      /**
       * [descr:Properties.fieldChooser]
       */
      fieldChooser?: {
        /**
         * [descr:Properties.fieldChooser.allowSearch]
         */
        allowSearch?: boolean;
        /**
         * [descr:Properties.fieldChooser.applyChangesMode]
         */
        applyChangesMode?: 'instantly' | 'onDemand';
        /**
         * [descr:Properties.fieldChooser.enabled]
         */
        enabled?: boolean;
        /**
         * [descr:Properties.fieldChooser.height]
         */
        height?: number;
        /**
         * [descr:Properties.fieldChooser.layout]
         */
        layout?: 0 | 1 | 2;
        /**
         * [descr:Properties.fieldChooser.searchTimeout]
         */
        searchTimeout?: number;
        /**
         * [descr:Properties.fieldChooser.texts]
         */
        texts?: {
          /**
           * [descr:Properties.fieldChooser.texts.allFields]
           */
          allFields?: string;
          /**
           * [descr:Properties.fieldChooser.texts.columnFields]
           */
          columnFields?: string;
          /**
           * [descr:Properties.fieldChooser.texts.dataFields]
           */
          dataFields?: string;
          /**
           * [descr:Properties.fieldChooser.texts.filterFields]
           */
          filterFields?: string;
          /**
           * [descr:Properties.fieldChooser.texts.rowFields]
           */
          rowFields?: string;
        };
        /**
         * [descr:Properties.fieldChooser.title]
         */
        title?: string;
        /**
         * [descr:Properties.fieldChooser.width]
         */
        width?: number;
      };
      /**
       * [descr:Properties.fieldPanel]
       */
      fieldPanel?: {
        /**
         * [descr:Properties.fieldPanel.allowFieldDragging]
         */
        allowFieldDragging?: boolean;
        /**
         * [descr:Properties.fieldPanel.showColumnFields]
         */
        showColumnFields?: boolean;
        /**
         * [descr:Properties.fieldPanel.showDataFields]
         */
        showDataFields?: boolean;
        /**
         * [descr:Properties.fieldPanel.showFilterFields]
         */
        showFilterFields?: boolean;
        /**
         * [descr:Properties.fieldPanel.showRowFields]
         */
        showRowFields?: boolean;
        /**
         * [descr:Properties.fieldPanel.texts]
         */
        texts?: {
          /**
           * [descr:Properties.fieldPanel.texts.columnFieldArea]
           */
          columnFieldArea?: string;
          /**
           * [descr:Properties.fieldPanel.texts.dataFieldArea]
           */
          dataFieldArea?: string;
          /**
           * [descr:Properties.fieldPanel.texts.filterFieldArea]
           */
          filterFieldArea?: string;
          /**
           * [descr:Properties.fieldPanel.texts.rowFieldArea]
           */
          rowFieldArea?: string;
        };
        /**
         * [descr:Properties.fieldPanel.visible]
         */
        visible?: boolean;
      };
      /**
       * [descr:Properties.headerFilter]
       */
      headerFilter?: {
        /**
         * [descr:Properties.headerFilter.allowSearch]
         */
        allowSearch?: boolean;
        /**
         * [descr:Properties.headerFilter.height]
         */
        height?: number;
        /**
         * [descr:Properties.headerFilter.searchTimeout]
         */
        searchTimeout?: number;
        /**
         * [descr:Properties.headerFilter.showRelevantValues]
         */
        showRelevantValues?: boolean;
        /**
         * [descr:Properties.headerFilter.texts]
         */
        texts?: {
          /**
           * [descr:Properties.headerFilter.texts.cancel]
           */
          cancel?: string;
          /**
           * [descr:Properties.headerFilter.texts.emptyValue]
           */
          emptyValue?: string;
          /**
           * [descr:Properties.headerFilter.texts.ok]
           */
          ok?: string;
        };
        /**
         * [descr:Properties.headerFilter.width]
         */
        width?: number;
      };
      /**
       * [descr:Properties.hideEmptySummaryCells]
       */
      hideEmptySummaryCells?: boolean;
      /**
       * [descr:Properties.loadPanel]
       */
      loadPanel?: {
        /**
         * [descr:Properties.loadPanel.enabled]
         */
        enabled?: boolean;
        /**
         * [descr:Properties.loadPanel.height]
         */
        height?: number;
        /**
         * [descr:Properties.loadPanel.indicatorSrc]
         */
        indicatorSrc?: string;
        /**
         * [descr:Properties.loadPanel.shading]
         */
        shading?: boolean;
        /**
         * [descr:Properties.loadPanel.shadingColor]
         */
        shadingColor?: string;
        /**
         * [descr:Properties.loadPanel.showIndicator]
         */
        showIndicator?: boolean;
        /**
         * [descr:Properties.loadPanel.showPane]
         */
        showPane?: boolean;
        /**
         * [descr:Properties.loadPanel.text]
         */
        text?: string;
        /**
         * [descr:Properties.loadPanel.width]
         */
        width?: number;
      };
      /**
       * [descr:Properties.onCellClick]
       */
      onCellClick?: (e: CellClickEvent) => void;
      /**
       * [descr:Properties.onCellPrepared]
       */
      onCellPrepared?: (e: CellPreparedEvent) => void;
      /**
       * [descr:Properties.onContextMenuPreparing]
       */
      onContextMenuPreparing?: (e: ContextMenuPreparingEvent) => void;
      /**
       * [descr:Properties.onExported]
       * @deprecated [depNote:Properties.onExported]
       */
      onExported?: (e: ExportedEvent) => void;
      /**
       * [descr:Properties.onExporting]
       */
      onExporting?: (e: ExportingEvent) => void;
      /**
       * [descr:Properties.onFileSaving]
       * @deprecated [depNote:Properties.onFileSaving]
       */
      onFileSaving?: (e: FileSavingEvent) => void;
      /**
       * [descr:Properties.rowHeaderLayout]
       */
      rowHeaderLayout?: 'standard' | 'tree';
      /**
       * [descr:Properties.scrolling]
       */
      scrolling?: {
        /**
         * [descr:Properties.scrolling.mode]
         */
        mode?: 'standard' | 'virtual';
        /**
         * [descr:Properties.scrolling.useNative]
         */
        useNative?: boolean | 'auto';
      };
      /**
       * [descr:Properties.showBorders]
       */
      showBorders?: boolean;
      /**
       * [descr:Properties.showColumnGrandTotals]
       */
      showColumnGrandTotals?: boolean;
      /**
       * [descr:Properties.showColumnTotals]
       */
      showColumnTotals?: boolean;
      /**
       * [descr:Properties.showRowGrandTotals]
       */
      showRowGrandTotals?: boolean;
      /**
       * [descr:Properties.showRowTotals]
       */
      showRowTotals?: boolean;
      /**
       * [descr:Properties.showTotalsPrior]
       */
      showTotalsPrior?: 'both' | 'columns' | 'none' | 'rows';
      /**
       * [descr:Properties.stateStoring]
       */
      stateStoring?: {
        /**
         * [descr:Properties.stateStoring.customLoad]
         */
        customLoad?: () => PromiseLike<any>;
        /**
         * [descr:Properties.stateStoring.customSave]
         */
        customSave?: (state: any) => any;
        /**
         * [descr:Properties.stateStoring.enabled]
         */
        enabled?: boolean;
        /**
         * [descr:Properties.stateStoring.savingTimeout]
         */
        savingTimeout?: number;
        /**
         * [descr:Properties.stateStoring.storageKey]
         */
        storageKey?: string;
        /**
         * [descr:Properties.stateStoring.type]
         */
        type?: 'custom' | 'localStorage' | 'sessionStorage';
      };
      /**
       * [descr:Properties.texts]
       */
      texts?: {
        /**
         * [descr:Properties.texts.collapseAll]
         */
        collapseAll?: string;
        /**
         * [descr:Properties.texts.dataNotAvailable]
         */
        dataNotAvailable?: string;
        /**
         * [descr:Properties.texts.expandAll]
         */
        expandAll?: string;
        /**
         * [descr:Properties.texts.exportToExcel]
         */
        exportToExcel?: string;
        /**
         * [descr:Properties.texts.grandTotal]
         */
        grandTotal?: string;
        /**
         * [descr:Properties.texts.noData]
         */
        noData?: string;
        /**
         * [descr:Properties.texts.removeAllSorting]
         */
        removeAllSorting?: string;
        /**
         * [descr:Properties.texts.showFieldChooser]
         */
        showFieldChooser?: string;
        /**
         * [descr:Properties.texts.sortColumnBySummary]
         */
        sortColumnBySummary?: string;
        /**
         * [descr:Properties.texts.sortRowBySummary]
         */
        sortRowBySummary?: string;
        /**
         * [descr:Properties.texts.total]
         */
        total?: string;
      };
      /**
       * [descr:Properties.wordWrapEnabled]
       */
      wordWrapEnabled?: boolean;
    }
  }
  /**
   * [descr:dxPivotGridFieldChooser]
   */
  export class dxPivotGridFieldChooser extends Widget<DevExpress.ui.dxPivotGridFieldChooser.Properties> {
    /**
     * [descr:dxPivotGridFieldChooser.applyChanges()]
     */
    applyChanges(): void;
    /**
     * [descr:dxPivotGridFieldChooser.cancelChanges()]
     */
    cancelChanges(): void;
    /**
     * [descr:dxPivotGridFieldChooser.getDataSource()]
     */
    getDataSource(): DevExpress.data.PivotGridDataSource;
    /**
     * [descr:dxPivotGridFieldChooser.updateDimensions()]
     */
    updateDimensions(): void;
  }
  module dxPivotGridFieldChooser {
    export type ContentReadyEvent =
      DevExpress.events.EventInfo<dxPivotGridFieldChooser>;
    export type ContextMenuPreparingEvent =
      DevExpress.events.EventInfo<dxPivotGridFieldChooser> & {
        readonly area?: string;
        readonly field?: DevExpress.data.PivotGridDataSource.Field;
        readonly event?: DevExpress.events.DxEvent;
        items?: Array<any>;
      };
    export type DisposingEvent =
      DevExpress.events.EventInfo<dxPivotGridFieldChooser>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxPivotGridFieldChooser>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxPivotGridFieldChooser> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends WidgetOptions<dxPivotGridFieldChooser> {
      /**
       * [descr:Properties.allowSearch]
       */
      allowSearch?: boolean;
      /**
       * [descr:Properties.applyChangesMode]
       */
      applyChangesMode?: 'instantly' | 'onDemand';
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.PivotGridDataSource;
      /**
       * [descr:Properties.headerFilter]
       */
      headerFilter?: {
        /**
         * [descr:Properties.headerFilter.allowSearch]
         */
        allowSearch?: boolean;
        /**
         * [descr:Properties.headerFilter.height]
         */
        height?: number;
        /**
         * [descr:Properties.headerFilter.searchTimeout]
         */
        searchTimeout?: number;
        /**
         * [descr:Properties.headerFilter.showRelevantValues]
         */
        showRelevantValues?: boolean;
        /**
         * [descr:Properties.headerFilter.texts]
         */
        texts?: {
          /**
           * [descr:Properties.headerFilter.texts.cancel]
           */
          cancel?: string;
          /**
           * [descr:Properties.headerFilter.texts.emptyValue]
           */
          emptyValue?: string;
          /**
           * [descr:Properties.headerFilter.texts.ok]
           */
          ok?: string;
        };
        /**
         * [descr:Properties.headerFilter.width]
         */
        width?: number;
      };
      /**
       * [descr:Properties.height]
       */
      height?: number | string | (() => number | string);
      /**
       * [descr:Properties.layout]
       */
      layout?: 0 | 1 | 2;
      /**
       * [descr:Properties.onContextMenuPreparing]
       */
      onContextMenuPreparing?: (e: ContextMenuPreparingEvent) => void;
      /**
       * [descr:Properties.searchTimeout]
       */
      searchTimeout?: number;
      /**
       * [descr:Properties.state]
       */
      state?: any;
      /**
       * [descr:Properties.texts]
       */
      texts?: {
        /**
         * [descr:Properties.texts.allFields]
         */
        allFields?: string;
        /**
         * [descr:Properties.texts.columnFields]
         */
        columnFields?: string;
        /**
         * [descr:Properties.texts.dataFields]
         */
        dataFields?: string;
        /**
         * [descr:Properties.texts.filterFields]
         */
        filterFields?: string;
        /**
         * [descr:Properties.texts.rowFields]
         */
        rowFields?: string;
      };
    }
  }
  /**
   * [descr:dxPivotGridSummaryCell]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  interface dxPivotGridSummaryCell {
    /**
     * [descr:dxPivotGridSummaryCell.child(direction, fieldValue)]
     */
    child(
      direction: string,
      fieldValue: number | string
    ): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.children(direction)]
     */
    children(direction: string): Array<dxPivotGridSummaryCell>;
    /**
     * [descr:dxPivotGridSummaryCell.field(area)]
     */
    field(area: string): DevExpress.data.PivotGridDataSource.Field;
    /**
     * [descr:dxPivotGridSummaryCell.grandTotal()]
     */
    grandTotal(): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.grandTotal(direction)]
     */
    grandTotal(direction: string): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.isPostProcessed(field)]
     */
    isPostProcessed(
      field: DevExpress.data.PivotGridDataSource.Field | string
    ): boolean;
    /**
     * [descr:dxPivotGridSummaryCell.next(direction)]
     */
    next(direction: string): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.next(direction, allowCrossGroup)]
     */
    next(direction: string, allowCrossGroup: boolean): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.parent(direction)]
     */
    parent(direction: string): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.prev(direction)]
     */
    prev(direction: string): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.prev(direction, allowCrossGroup)]
     */
    prev(direction: string, allowCrossGroup: boolean): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.slice(field, value)]
     */
    slice(
      field: DevExpress.data.PivotGridDataSource.Field,
      value: number | string
    ): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.value()]
     */
    value(): any;
    /**
     * [descr:dxPivotGridSummaryCell.value(field)]
     */
    value(field: DevExpress.data.PivotGridDataSource.Field | string): any;
    /**
     * [descr:dxPivotGridSummaryCell.value(field, postProcessed)]
     */
    value(
      field: DevExpress.data.PivotGridDataSource.Field | string,
      postProcessed: boolean
    ): any;
    /**
     * [descr:dxPivotGridSummaryCell.value(postProcessed)]
     */
    value(postProcessed: boolean): any;
  }
  /**
   * [descr:dxPopover]
   */
  export class dxPopover<
    TProperties = DevExpress.ui.dxPopover.Properties
  > extends dxPopup<TProperties> {
    show(): DevExpress.core.utils.DxPromise<boolean>;
    /**
     * [descr:dxPopover.show(target)]
     */
    show(
      target: string | DevExpress.core.UserDefinedElement
    ): DevExpress.core.utils.DxPromise<boolean>;
  }
  module dxPopover {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxPopover>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxPopover>;
    export type HiddenEvent = DevExpress.events.EventInfo<dxPopover>;
    export type HidingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxPopover>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxPopover>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxPopover> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface PopoverInstance extends dxPopover<Properties> {}
    /**
     * [descr:Properties]
     */
    export interface Properties<TComponent = PopoverInstance>
      extends DevExpress.ui.dxPopup.Properties<TComponent> {
      /**
       * [descr:Properties.animation]
       */
      animation?: dxPopoverAnimation;
      /**
       * [descr:Properties.closeOnOutsideClick]
       */
      closeOnOutsideClick?:
        | boolean
        | ((event: DevExpress.events.DxEvent) => boolean);
      /**
       * [descr:Properties.height]
       */
      height?: number | string | (() => number | string);
      /**
       * [descr:Properties.hideEvent]
       */
      hideEvent?:
        | {
            /**
             * [descr:Properties.hideEvent.delay]
             */
            delay?: number;
            /**
             * [descr:Properties.hideEvent.name]
             */
            name?: string;
          }
        | string;
      /**
       * [descr:Properties.position]
       */
      position?: 'bottom' | 'left' | 'right' | 'top' | PositionConfig;
      /**
       * [descr:Properties.shading]
       */
      shading?: boolean;
      /**
       * [descr:Properties.showEvent]
       */
      showEvent?:
        | {
            /**
             * [descr:Properties.showEvent.delay]
             */
            delay?: number;
            /**
             * [descr:Properties.showEvent.name]
             */
            name?: string;
          }
        | string;
      /**
       * [descr:Properties.showTitle]
       */
      showTitle?: boolean;
      /**
       * [descr:Properties.target]
       */
      target?: string | DevExpress.core.UserDefinedElement;
      /**
       * [descr:Properties.width]
       */
      width?: number | string | (() => number | string);
      /**
       * [descr:Properties.hideOnParentScroll]
       */
      hideOnParentScroll?: boolean;
    }
    export type ShowingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxPopover>;
    export type ShownEvent = DevExpress.events.EventInfo<dxPopover>;
    export type TitleRenderedEvent = DevExpress.events.EventInfo<dxPopup> &
      DevExpress.ui.dxPopup.TitleRenderedInfo;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPopoverAnimation extends dxPopupAnimation {
    /**
     * [descr:dxPopoverOptions.animation.hide]
     */
    hide?: AnimationConfig;
    /**
     * [descr:dxPopoverOptions.animation.show]
     */
    show?: AnimationConfig;
  }
  /**
   * [descr:dxPopup]
   */
  export class dxPopup<
    TProperties = DevExpress.ui.dxPopup.Properties
  > extends dxOverlay<TProperties> {}
  module dxPopup {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxPopup>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxPopup>;
    export type HiddenEvent = DevExpress.events.EventInfo<dxPopup>;
    export type HidingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxPopup>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxPopup>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxPopup> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface PopupInstance extends dxPopup<Properties> {}
    /**
     * [descr:Properties]
     */
    export interface Properties<TComponent = PopupInstance>
      extends dxOverlayOptions<TComponent> {
      /**
       * [descr:Properties.animation]
       */
      animation?: dxPopupAnimation;
      /**
       * [descr:Properties.container]
       */
      container?: string | DevExpress.core.UserDefinedElement;
      /**
       * [descr:Properties.dragEnabled]
       */
      dragEnabled?: boolean;
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.fullScreen]
       */
      fullScreen?: boolean;
      /**
       * [descr:Properties.height]
       */
      height?: number | string | (() => number | string);
      /**
       * [descr:Properties.onResize]
       */
      onResize?: (e: ResizeEvent) => void;
      /**
       * [descr:Properties.onResizeEnd]
       */
      onResizeEnd?: (e: ResizeEndEvent) => void;
      /**
       * [descr:Properties.onResizeStart]
       */
      onResizeStart?: (e: ResizeStartEvent) => void;
      /**
       * [descr:Properties.onTitleRendered]
       */
      onTitleRendered?: (e: TitleRenderedEvent) => void;
      /**
       * [descr:Properties.position]
       */
      position?:
        | 'bottom'
        | 'center'
        | 'left'
        | 'left bottom'
        | 'left top'
        | 'right'
        | 'right bottom'
        | 'right top'
        | 'top'
        | PositionConfig
        | Function;
      /**
       * [descr:Properties.resizeEnabled]
       */
      resizeEnabled?: boolean;
      /**
       * [descr:Properties.restorePosition]
       */
      restorePosition?: boolean;
      /**
       * [descr:Properties.showCloseButton]
       */
      showCloseButton?: boolean;
      /**
       * [descr:Properties.showTitle]
       */
      showTitle?: boolean;
      /**
       * [descr:Properties.title]
       */
      title?: string;
      /**
       * [descr:Properties.titleTemplate]
       */
      titleTemplate?:
        | DevExpress.core.template
        | ((
            titleElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.toolbarItems]
       */
      toolbarItems?: Array<ToolbarItem>;
      /**
       * [descr:Properties.width]
       */
      width?: number | string | (() => number | string);
    }
    export type ResizeEndEvent = DevExpress.events.NativeEventInfo<dxPopup> &
      DevExpress.ui.dxResizable.ResizeInfo;
    export type ResizeEvent = DevExpress.events.NativeEventInfo<dxPopup> &
      DevExpress.ui.dxResizable.ResizeInfo;
    export type ResizeStartEvent = DevExpress.events.NativeEventInfo<dxPopup> &
      DevExpress.ui.dxResizable.ResizeInfo;
    export type ShowingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxPopup>;
    export type ShownEvent = DevExpress.events.EventInfo<dxPopup>;
    export type TitleRenderedEvent = DevExpress.events.EventInfo<dxPopup> &
      TitleRenderedInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface TitleRenderedInfo {
      readonly titleElement: DevExpress.core.DxElement;
    }
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPopupAnimation extends dxOverlayAnimation {
    /**
     * [descr:dxPopupOptions.animation.hide]
     */
    hide?: AnimationConfig;
    /**
     * [descr:dxPopupOptions.animation.show]
     */
    show?: AnimationConfig;
  }
  /**
   * [descr:dxProgressBar]
   */
  export class dxProgressBar extends dxTrackBar<DevExpress.ui.dxProgressBar.Properties> {}
  module dxProgressBar {
    export type CompleteEvent =
      DevExpress.events.NativeEventInfo<dxProgressBar>;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxProgressBar>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxProgressBar>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxProgressBar>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxProgressBar> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends dxTrackBarOptions<dxProgressBar> {
      /**
       * [descr:Properties.onComplete]
       */
      onComplete?: (e: CompleteEvent) => void;
      /**
       * [descr:Properties.showStatus]
       */
      showStatus?: boolean;
      /**
       * [descr:Properties.statusFormat]
       */
      statusFormat?: string | ((ratio: number, value: number) => string);
      /**
       * [descr:Properties.value]
       */
      value?: number | boolean;
    }
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxProgressBar> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxRadioGroup]
   */
  export class dxRadioGroup extends Editor<DevExpress.ui.dxRadioGroup.Properties> {
    getDataSource(): DevExpress.data.DataSource;
  }
  module dxRadioGroup {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxRadioGroup>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxRadioGroup>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxRadioGroup>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxRadioGroup> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties
      extends EditorOptions<dxRadioGroup>,
        DataExpressionMixinOptions<dxRadioGroup> {
      /**
       * [descr:Properties.activeStateEnabled]
       */
      activeStateEnabled?: boolean;
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.hoverStateEnabled]
       */
      hoverStateEnabled?: boolean;
      /**
       * [descr:Properties.layout]
       */
      layout?: 'horizontal' | 'vertical';
      /**
       * [descr:Properties.name]
       */
      name?: string;
      /**
       * [descr:Properties.value]
       */
      value?: any;
    }
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxRadioGroup> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxRangeSlider]
   */
  export class dxRangeSlider extends dxTrackBar<DevExpress.ui.dxRangeSlider.Properties> {}
  module dxRangeSlider {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxRangeSlider>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxRangeSlider>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxRangeSlider>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxRangeSlider> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends dxSliderBaseOptions<dxRangeSlider> {
      /**
       * [descr:Properties.end]
       */
      end?: number;
      /**
       * [descr:Properties.endName]
       */
      endName?: string;
      /**
       * [descr:Properties.onValueChanged]
       */
      onValueChanged?: (e: ValueChangedEvent) => void;
      /**
       * [descr:Properties.start]
       */
      start?: number;
      /**
       * [descr:Properties.startName]
       */
      startName?: string;
      /**
       * [descr:Properties.value]
       */
      value?: Array<number>;
    }
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxRangeSlider> &
        DevExpress.ui.Editor.ValueChangedInfo & {
          readonly start?: number;
          readonly end?: number;
          readonly value?: Array<number>;
        };
  }
  /**
   * [descr:dxRecurrenceEditor]
   */
  export class dxRecurrenceEditor extends Editor<dxRecurrenceEditorOptions> {}
  module dxRecurrenceEditor {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export type Properties = dxRecurrenceEditorOptions;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxRecurrenceEditorOptions
    extends EditorOptions<dxRecurrenceEditor> {
    /**
     * [descr:dxRecurrenceEditorOptions.value]
     */
    value?: string;
  }
  /**
   * [descr:dxResizable]
   */
  export class dxResizable extends DOMComponent<DevExpress.ui.dxResizable.Properties> {}
  module dxResizable {
    export type DisposingEvent = DevExpress.events.EventInfo<dxResizable>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxResizable>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxResizable> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends DOMComponentOptions<dxResizable> {
      /**
       * [descr:Properties.handles]
       */
      handles?: 'bottom' | 'left' | 'right' | 'top' | 'all' | string;
      /**
       * [descr:Properties.height]
       */
      height?: number | string | (() => number | string);
      /**
       * [descr:Properties.maxHeight]
       */
      maxHeight?: number;
      /**
       * [descr:Properties.maxWidth]
       */
      maxWidth?: number;
      /**
       * [descr:Properties.minHeight]
       */
      minHeight?: number;
      /**
       * [descr:Properties.minWidth]
       */
      minWidth?: number;
      /**
       * [descr:Properties.onResize]
       */
      onResize?: (e: ResizeEvent) => void;
      /**
       * [descr:Properties.onResizeEnd]
       */
      onResizeEnd?: (e: ResizeEndEvent) => void;
      /**
       * [descr:Properties.onResizeStart]
       */
      onResizeStart?: (e: ResizeStartEvent) => void;
      /**
       * [descr:Properties.width]
       */
      width?: number | string | (() => number | string);
    }
    export type ResizeEndEvent =
      DevExpress.events.NativeEventInfo<dxResizable> & ResizeInfo;
    export type ResizeEvent = DevExpress.events.NativeEventInfo<dxResizable> &
      ResizeInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ResizeInfo {
      readonly width: number;
      readonly height: number;
      handles: {
        readonly left: boolean;
        readonly top: boolean;
        readonly right: boolean;
        readonly bottom: boolean;
      };
    }
    export type ResizeStartEvent =
      DevExpress.events.NativeEventInfo<dxResizable> & ResizeInfo;
  }
  /**
   * [descr:dxResponsiveBox]
   */
  export class dxResponsiveBox extends CollectionWidget<DevExpress.ui.dxResponsiveBox.Properties> {}
  module dxResponsiveBox {
    export type ContentReadyEvent =
      DevExpress.events.EventInfo<dxResponsiveBox>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxResponsiveBox>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxResponsiveBox>;
    export type ItemClickEvent =
      DevExpress.events.NativeEventInfo<dxResponsiveBox> &
        DevExpress.events.ItemInfo;
    export type ItemContextMenuEvent =
      DevExpress.events.NativeEventInfo<dxResponsiveBox> &
        DevExpress.events.ItemInfo;
    export type ItemHoldEvent =
      DevExpress.events.NativeEventInfo<dxResponsiveBox> &
        DevExpress.events.ItemInfo;
    export type ItemRenderedEvent =
      DevExpress.events.NativeEventInfo<dxResponsiveBox> &
        DevExpress.events.ItemInfo;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxResponsiveBox> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties
      extends CollectionWidgetOptions<dxResponsiveBox> {
      /**
       * [descr:Properties.cols]
       */
      cols?: Array<{
        /**
         * [descr:Properties.cols.baseSize]
         */
        baseSize?: number | 'auto';
        /**
         * [descr:Properties.cols.ratio]
         */
        ratio?: number;
        /**
         * [descr:Properties.cols.screen]
         */
        screen?: string;
        /**
         * [descr:Properties.cols.shrink]
         */
        shrink?: number;
      }>;
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<
        string | Item | any
      >;
      /**
       * [descr:Properties.height]
       */
      height?: number | string | (() => number | string);
      /**
       * [descr:Properties.items]
       */
      items?: Array<string | Item | any>;
      /**
       * [descr:Properties.rows]
       */
      rows?: Array<{
        /**
         * [descr:Properties.rows.baseSize]
         */
        baseSize?: number | 'auto';
        /**
         * [descr:Properties.rows.ratio]
         */
        ratio?: number;
        /**
         * [descr:Properties.rows.screen]
         */
        screen?: string;
        /**
         * [descr:Properties.rows.shrink]
         */
        shrink?: number;
      }>;
      /**
       * [descr:Properties.screenByWidth]
       */
      screenByWidth?: Function;
      /**
       * [descr:Properties.singleColumnScreen]
       */
      singleColumnScreen?: string;
      /**
       * [descr:Properties.width]
       */
      width?: number | string | (() => number | string);
    }
  }
  /**
   * [descr:dxScheduler]
   */
  export class dxScheduler extends Widget<DevExpress.ui.dxScheduler.Properties> {
    /**
     * [descr:dxScheduler.addAppointment(appointment)]
     */
    addAppointment(appointment: DevExpress.ui.dxScheduler.Appointment): void;
    /**
     * [descr:dxScheduler.deleteAppointment(appointment)]
     */
    deleteAppointment(appointment: DevExpress.ui.dxScheduler.Appointment): void;
    getDataSource(): DevExpress.data.DataSource;
    /**
     * [descr:dxScheduler.getEndViewDate()]
     */
    getEndViewDate(): Date;
    /**
     * [descr:dxScheduler.getStartViewDate()]
     */
    getStartViewDate(): Date;
    /**
     * [descr:dxScheduler.hideAppointmentPopup(saveChanges)]
     */
    hideAppointmentPopup(saveChanges?: boolean): void;
    /**
     * [descr:dxScheduler.hideAppointmentTooltip()]
     */
    hideAppointmentTooltip(): void;
    /**
     * [descr:dxScheduler.scrollTo(date, group, allDay)]
     */
    scrollTo(date: Date, group?: object, allDay?: boolean): void;
    /**
     * [descr:dxScheduler.scrollToTime(hours, minutes, date)]
     * @deprecated [depNote:dxScheduler.scrollToTime(hours, minutes, date)]
     */
    scrollToTime(hours: number, minutes: number, date?: Date): void;
    /**
     * [descr:dxScheduler.showAppointmentPopup(appointmentData, createNewAppointment, currentAppointmentData)]
     */
    showAppointmentPopup(
      appointmentData?: DevExpress.ui.dxScheduler.Appointment,
      createNewAppointment?: boolean,
      currentAppointmentData?: DevExpress.ui.dxScheduler.Appointment
    ): void;
    /**
     * [descr:dxScheduler.showAppointmentTooltip(appointmentData, target, currentAppointmentData)]
     */
    showAppointmentTooltip(
      appointmentData: DevExpress.ui.dxScheduler.Appointment,
      target: string | DevExpress.core.UserDefinedElement,
      currentAppointmentData?: DevExpress.ui.dxScheduler.Appointment
    ): void;
    /**
     * [descr:dxScheduler.updateAppointment(target, appointment)]
     */
    updateAppointment(
      target: DevExpress.ui.dxScheduler.Appointment,
      appointment: DevExpress.ui.dxScheduler.Appointment
    ): void;
  }
  module dxScheduler {
    /**
     * [descr:Appointment]
     */
    export interface Appointment extends CollectionWidgetItem {
      /**
       * [descr:Appointment.allDay]
       */
      allDay?: boolean;
      /**
       * [descr:Appointment.description]
       */
      description?: string;
      /**
       * [descr:Appointment.disabled]
       */
      disabled?: boolean;
      /**
       * [descr:Appointment.endDate]
       */
      endDate?: Date | string;
      /**
       * [descr:Appointment.endDateTimeZone]
       */
      endDateTimeZone?: string;
      /**
       * [descr:Appointment.html]
       */
      html?: string;
      /**
       * [descr:Appointment.recurrenceException]
       */
      recurrenceException?: string;
      /**
       * [descr:Appointment.recurrenceRule]
       */
      recurrenceRule?: string;
      /**
       * [descr:Appointment.startDate]
       */
      startDate?: Date | string;
      /**
       * [descr:Appointment.startDateTimeZone]
       */
      startDateTimeZone?: string;
      /**
       * [descr:Appointment.template]
       */
      template?: DevExpress.core.template;
      /**
       * [descr:Appointment.text]
       */
      text?: string;
      /**
       * [descr:Appointment.visible]
       */
      visible?: boolean;
    }
    export type AppointmentAddedEvent =
      DevExpress.events.EventInfo<dxScheduler> & {
        readonly appointmentData: Appointment;
        readonly error?: Error;
      };
    export type AppointmentAddingEvent =
      DevExpress.events.EventInfo<dxScheduler> & {
        readonly appointmentData: Appointment;
        cancel: boolean | PromiseLike<boolean>;
      };
    export type AppointmentClickEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxScheduler> &
      TargetedAppointmentInfo & {
        readonly appointmentElement: DevExpress.core.DxElement;
      };
    export type AppointmentCollectorTemplateData = {
      readonly appointmentCount: number;
      readonly isCompact: boolean;
    };
    export type AppointmentContextMenuEvent =
      DevExpress.events.NativeEventInfo<dxScheduler> &
        TargetedAppointmentInfo & {
          readonly appointmentElement: DevExpress.core.DxElement;
        };
    export type AppointmentDblClickEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxScheduler> &
      TargetedAppointmentInfo & {
        readonly appointmentElement: DevExpress.core.DxElement;
      };
    export type AppointmentDeletedEvent =
      DevExpress.events.EventInfo<dxScheduler> & {
        readonly appointmentData: Appointment;
        readonly error?: Error;
      };
    export type AppointmentDeletingEvent =
      DevExpress.events.EventInfo<dxScheduler> & {
        readonly appointmentData: Appointment;
        cancel: boolean | PromiseLike<boolean>;
      };
    export type AppointmentDraggingAddEvent = AppointmentDraggingEvent & {
      readonly fromComponent?: dxSortable | dxDraggable;
      readonly toComponent?: dxSortable | dxDraggable;
      readonly toData?: any;
    };
    export type AppointmentDraggingEndEvent = DevExpress.events.Cancelable &
      AppointmentDraggingEvent & {
        readonly fromComponent?: dxSortable | dxDraggable;
        readonly toComponent?: dxSortable | dxDraggable;
        readonly toData?: any;
      };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface AppointmentDraggingEvent {
      readonly component: dxScheduler;
      readonly event?: DevExpress.events.DxEvent;
      readonly itemData?: any;
      readonly itemElement?: DevExpress.core.DxElement;
      readonly fromData?: any;
    }
    export type AppointmentDraggingMoveEvent = DevExpress.events.Cancelable &
      AppointmentDraggingEvent & {
        readonly fromComponent?: dxSortable | dxDraggable;
        readonly toComponent?: dxSortable | dxDraggable;
        readonly toData?: any;
      };
    export type AppointmentDraggingRemoveEvent = AppointmentDraggingEvent & {
      readonly fromComponent?: dxSortable | dxDraggable;
      readonly toComponent?: dxSortable | dxDraggable;
    };
    export type AppointmentDraggingStartEvent = DevExpress.events.Cancelable &
      AppointmentDraggingEvent;
    export type AppointmentFormOpeningEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxScheduler> & {
        readonly appointmentData?: Appointment;
        readonly form: dxForm;
        readonly popup: dxPopup;
      };
    export type AppointmentRenderedEvent =
      DevExpress.events.EventInfo<dxScheduler> &
        TargetedAppointmentInfo & {
          readonly appointmentElement: DevExpress.core.DxElement;
        };
    export type AppointmentTemplateData = TargetedAppointmentInfo;
    export type AppointmentTooltipTemplateData = TargetedAppointmentInfo;
    export type AppointmentUpdatedEvent =
      DevExpress.events.EventInfo<dxScheduler> & {
        readonly appointmentData: Appointment;
        readonly error?: Error;
      };
    export type AppointmentUpdatingEvent =
      DevExpress.events.EventInfo<dxScheduler> & {
        readonly oldData: any;
        readonly newData: any;
        cancel?: boolean | PromiseLike<boolean>;
      };
    export type CellClickEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxScheduler> & {
        readonly cellData: any;
        readonly cellElement: DevExpress.core.DxElement;
      };
    export type CellContextMenuEvent =
      DevExpress.events.NativeEventInfo<dxScheduler> & {
        readonly cellData: any;
        readonly cellElement: DevExpress.core.DxElement;
      };
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxScheduler>;
    export type DateNavigatorTextInfo = {
      readonly startDate: Date;
      readonly endDate: Date;
      readonly text: string;
    };
    export type DisposingEvent = DevExpress.events.EventInfo<dxScheduler>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxScheduler>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxScheduler> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends WidgetOptions<dxScheduler> {
      /**
       * [descr:Properties.adaptivityEnabled]
       */
      adaptivityEnabled?: boolean;
      /**
       * [descr:Properties.allDayExpr]
       */
      allDayExpr?: string;
      /**
       * [descr:Properties.appointmentCollectorTemplate]
       */
      appointmentCollectorTemplate?:
        | DevExpress.core.template
        | ((
            data: AppointmentCollectorTemplateData,
            collectorElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.appointmentDragging]
       */
      appointmentDragging?: {
        /**
         * [descr:Properties.appointmentDragging.autoScroll]
         */
        autoScroll?: boolean;
        /**
         * [descr:Properties.appointmentDragging.data]
         */
        data?: any;
        /**
         * [descr:Properties.appointmentDragging.group]
         */
        group?: string;
        /**
         * [descr:Properties.appointmentDragging.onAdd]
         */
        onAdd?: (e: AppointmentDraggingAddEvent) => void;
        /**
         * [descr:Properties.appointmentDragging.onDragEnd]
         */
        onDragEnd?: (e: AppointmentDraggingEndEvent) => void;
        /**
         * [descr:Properties.appointmentDragging.onDragMove]
         */
        onDragMove?: (e: AppointmentDraggingMoveEvent) => void;
        /**
         * [descr:Properties.appointmentDragging.onDragStart]
         */
        onDragStart?: (e: AppointmentDraggingStartEvent) => void;
        /**
         * [descr:Properties.appointmentDragging.onRemove]
         */
        onRemove?: (e: AppointmentDraggingRemoveEvent) => void;
        /**
         * [descr:Properties.appointmentDragging.scrollSensitivity]
         */
        scrollSensitivity?: number;
        /**
         * [descr:Properties.appointmentDragging.scrollSpeed]
         */
        scrollSpeed?: number;
      };
      /**
       * [descr:Properties.appointmentTemplate]
       */
      appointmentTemplate?:
        | DevExpress.core.template
        | ((
            model: AppointmentTemplateData,
            itemIndex: number,
            contentElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.appointmentTooltipTemplate]
       */
      appointmentTooltipTemplate?:
        | DevExpress.core.template
        | ((
            model: AppointmentTemplateData,
            itemIndex: number,
            contentElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.cellDuration]
       */
      cellDuration?: number;
      /**
       * [descr:Properties.crossScrollingEnabled]
       */
      crossScrollingEnabled?: boolean;
      /**
       * [descr:Properties.currentDate]
       */
      currentDate?: Date | number | string;
      /**
       * [descr:Properties.currentView]
       */
      currentView?:
        | 'agenda'
        | 'day'
        | 'month'
        | 'timelineDay'
        | 'timelineMonth'
        | 'timelineWeek'
        | 'timelineWorkWeek'
        | 'week'
        | 'workWeek';
      /**
       * [descr:Properties.customizeDateNavigatorText]
       */
      customizeDateNavigatorText?: (info: DateNavigatorTextInfo) => string;
      /**
       * [descr:Properties.dataCellTemplate]
       */
      dataCellTemplate?:
        | DevExpress.core.template
        | ((
            itemData: any,
            itemIndex: number,
            itemElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<Appointment>;
      /**
       * [descr:Properties.dateCellTemplate]
       */
      dateCellTemplate?:
        | DevExpress.core.template
        | ((
            itemData: any,
            itemIndex: number,
            itemElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.dateSerializationFormat]
       */
      dateSerializationFormat?: string;
      /**
       * [descr:Properties.descriptionExpr]
       */
      descriptionExpr?: string;
      /**
       * [descr:Properties.dropDownAppointmentTemplate]
       * @deprecated [depNote:Properties.dropDownAppointmentTemplate]
       */
      dropDownAppointmentTemplate?:
        | DevExpress.core.template
        | ((
            itemData: any,
            itemIndex: number,
            contentElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.editing]
       */
      editing?:
        | boolean
        | {
            /**
             * [descr:Properties.editing.allowAdding]
             */
            allowAdding?: boolean;
            /**
             * [descr:Properties.editing.allowDeleting]
             */
            allowDeleting?: boolean;
            /**
             * [descr:Properties.editing.allowDragging]
             */
            allowDragging?: boolean;
            /**
             * [descr:Properties.editing.allowResizing]
             */
            allowResizing?: boolean;
            /**
             * [descr:Properties.editing.allowTimeZoneEditing]
             */
            allowTimeZoneEditing?: boolean;
            /**
             * [descr:Properties.editing.allowUpdating]
             */
            allowUpdating?: boolean;
          };
      /**
       * [descr:Properties.endDateExpr]
       */
      endDateExpr?: string;
      /**
       * [descr:Properties.endDateTimeZoneExpr]
       */
      endDateTimeZoneExpr?: string;
      /**
       * [descr:Properties.endDayHour]
       */
      endDayHour?: number;
      /**
       * [descr:Properties.firstDayOfWeek]
       */
      firstDayOfWeek?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.groupByDate]
       */
      groupByDate?: boolean;
      /**
       * [descr:Properties.groups]
       */
      groups?: Array<string>;
      /**
       * [descr:Properties.indicatorUpdateInterval]
       */
      indicatorUpdateInterval?: number;
      /**
       * [descr:Properties.max]
       */
      max?: Date | number | string;
      /**
       * [descr:Properties.maxAppointmentsPerCell]
       */
      maxAppointmentsPerCell?: number | 'auto' | 'unlimited';
      /**
       * [descr:Properties.min]
       */
      min?: Date | number | string;
      /**
       * [descr:Properties.noDataText]
       */
      noDataText?: string;
      /**
       * [descr:Properties.onAppointmentAdded]
       */
      onAppointmentAdded?: (e: AppointmentAddedEvent) => void;
      /**
       * [descr:Properties.onAppointmentAdding]
       */
      onAppointmentAdding?: (e: AppointmentAddingEvent) => void;
      /**
       * [descr:Properties.onAppointmentClick]
       */
      onAppointmentClick?: ((e: AppointmentClickEvent) => void) | string;
      /**
       * [descr:Properties.onAppointmentContextMenu]
       */
      onAppointmentContextMenu?:
        | ((e: AppointmentContextMenuEvent) => void)
        | string;
      /**
       * [descr:Properties.onAppointmentDblClick]
       */
      onAppointmentDblClick?: ((e: AppointmentDblClickEvent) => void) | string;
      /**
       * [descr:Properties.onAppointmentDeleted]
       */
      onAppointmentDeleted?: (e: AppointmentDeletedEvent) => void;
      /**
       * [descr:Properties.onAppointmentDeleting]
       */
      onAppointmentDeleting?: (e: AppointmentDeletingEvent) => void;
      /**
       * [descr:Properties.onAppointmentFormOpening]
       */
      onAppointmentFormOpening?: (e: AppointmentFormOpeningEvent) => void;
      /**
       * [descr:Properties.onAppointmentRendered]
       */
      onAppointmentRendered?: (e: AppointmentRenderedEvent) => void;
      /**
       * [descr:Properties.onAppointmentUpdated]
       */
      onAppointmentUpdated?: (e: AppointmentUpdatedEvent) => void;
      /**
       * [descr:Properties.onAppointmentUpdating]
       */
      onAppointmentUpdating?: (e: AppointmentUpdatingEvent) => void;
      /**
       * [descr:Properties.onCellClick]
       */
      onCellClick?: ((e: CellClickEvent) => void) | string;
      /**
       * [descr:Properties.onCellContextMenu]
       */
      onCellContextMenu?: ((e: CellContextMenuEvent) => void) | string;
      /**
       * [descr:Properties.recurrenceEditMode]
       */
      recurrenceEditMode?: 'dialog' | 'occurrence' | 'series';
      /**
       * [descr:Properties.recurrenceExceptionExpr]
       */
      recurrenceExceptionExpr?: string;
      /**
       * [descr:Properties.recurrenceRuleExpr]
       */
      recurrenceRuleExpr?: string;
      /**
       * [descr:Properties.remoteFiltering]
       */
      remoteFiltering?: boolean;
      /**
       * [descr:Properties.resourceCellTemplate]
       */
      resourceCellTemplate?:
        | DevExpress.core.template
        | ((
            itemData: any,
            itemIndex: number,
            itemElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.resources]
       */
      resources?: Array<{
        /**
         * [descr:Properties.resources.allowMultiple]
         */
        allowMultiple?: boolean;
        /**
         * [descr:Properties.resources.colorExpr]
         */
        colorExpr?: string;
        /**
         * [descr:Properties.resources.dataSource]
         */
        dataSource?: DevExpress.data.DataSource.DataSourceLike<any>;
        /**
         * [descr:Properties.resources.displayExpr]
         */
        displayExpr?: string | ((resource: any) => string);
        /**
         * [descr:Properties.resources.fieldExpr]
         */
        fieldExpr?: string;
        /**
         * [descr:Properties.resources.label]
         */
        label?: string;
        /**
         * [descr:Properties.resources.useColorAsDefault]
         */
        useColorAsDefault?: boolean;
        /**
         * [descr:Properties.resources.valueExpr]
         */
        valueExpr?: string | Function;
      }>;
      /**
       * [descr:Properties.scrolling]
       */
      scrolling?: dxSchedulerScrolling;
      /**
       * [descr:Properties.selectedCellData]
       */
      selectedCellData?: Array<any>;
      /**
       * [descr:Properties.shadeUntilCurrentTime]
       */
      shadeUntilCurrentTime?: boolean;
      /**
       * [descr:Properties.showAllDayPanel]
       */
      showAllDayPanel?: boolean;
      /**
       * [descr:Properties.showCurrentTimeIndicator]
       */
      showCurrentTimeIndicator?: boolean;
      /**
       * [descr:Properties.startDateExpr]
       */
      startDateExpr?: string;
      /**
       * [descr:Properties.startDateTimeZoneExpr]
       */
      startDateTimeZoneExpr?: string;
      /**
       * [descr:Properties.startDayHour]
       */
      startDayHour?: number;
      /**
       * [descr:Properties.textExpr]
       */
      textExpr?: string;
      /**
       * [descr:Properties.timeCellTemplate]
       */
      timeCellTemplate?:
        | DevExpress.core.template
        | ((
            itemData: any,
            itemIndex: number,
            itemElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.timeZone]
       */
      timeZone?: string;
      /**
       * [descr:Properties.useDropDownViewSwitcher]
       */
      useDropDownViewSwitcher?: boolean;
      /**
       * [descr:Properties.views]
       */
      views?: Array<
        | 'day'
        | 'week'
        | 'workWeek'
        | 'month'
        | 'timelineDay'
        | 'timelineWeek'
        | 'timelineWorkWeek'
        | 'timelineMonth'
        | 'agenda'
        | {
            /**
             * [descr:Properties.views.agendaDuration]
             */
            agendaDuration?: number;
            /**
             * [descr:Properties.views.appointmentCollectorTemplate]
             */
            appointmentCollectorTemplate?:
              | DevExpress.core.template
              | ((
                  data: AppointmentCollectorTemplateData,
                  collectorElement: DevExpress.core.DxElement
                ) => string | DevExpress.core.UserDefinedElement);
            /**
             * [descr:Properties.views.appointmentTemplate]
             */
            appointmentTemplate?:
              | DevExpress.core.template
              | ((
                  model: AppointmentTemplateData,
                  itemIndex: number,
                  contentElement: DevExpress.core.DxElement
                ) => string | DevExpress.core.UserDefinedElement);
            /**
             * [descr:Properties.views.appointmentTooltipTemplate]
             */
            appointmentTooltipTemplate?:
              | DevExpress.core.template
              | ((
                  model: AppointmentTooltipTemplateData,
                  itemIndex: number,
                  contentElement: DevExpress.core.DxElement
                ) => string | DevExpress.core.UserDefinedElement);
            /**
             * [descr:Properties.views.dropDownAppointmentTemplate]
             * @deprecated [depNote:Properties.views.dropDownAppointmentTemplate]
             */
            dropDownAppointmentTemplate?:
              | DevExpress.core.template
              | ((
                  itemData: any,
                  itemIndex: number,
                  contentElement: DevExpress.core.DxElement
                ) => string | DevExpress.core.UserDefinedElement);
            /**
             * [descr:Properties.views.cellDuration]
             */
            cellDuration?: number;
            /**
             * [descr:Properties.views.dataCellTemplate]
             */
            dataCellTemplate?:
              | DevExpress.core.template
              | ((
                  itemData: any,
                  itemIndex: number,
                  itemElement: DevExpress.core.DxElement
                ) => string | DevExpress.core.UserDefinedElement);
            /**
             * [descr:Properties.views.dateCellTemplate]
             */
            dateCellTemplate?:
              | DevExpress.core.template
              | ((
                  itemData: any,
                  itemIndex: number,
                  itemElement: DevExpress.core.DxElement
                ) => string | DevExpress.core.UserDefinedElement);
            /**
             * [descr:Properties.views.endDayHour]
             */
            endDayHour?: number;
            /**
             * [descr:Properties.views.firstDayOfWeek]
             */
            firstDayOfWeek?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
            /**
             * [descr:Properties.views.groupByDate]
             */
            groupByDate?: boolean;
            /**
             * [descr:Properties.views.groupOrientation]
             */
            groupOrientation?: 'horizontal' | 'vertical';
            /**
             * [descr:Properties.views.groups]
             */
            groups?: Array<string>;
            /**
             * [descr:Properties.views.intervalCount]
             */
            intervalCount?: number;
            /**
             * [descr:Properties.views.maxAppointmentsPerCell]
             */
            maxAppointmentsPerCell?: number | 'auto' | 'unlimited';
            /**
             * [descr:Properties.views.name]
             */
            name?: string;
            /**
             * [descr:Properties.views.resourceCellTemplate]
             */
            resourceCellTemplate?:
              | DevExpress.core.template
              | ((
                  itemData: any,
                  itemIndex: number,
                  itemElement: DevExpress.core.DxElement
                ) => string | DevExpress.core.UserDefinedElement);
            /**
             * [descr:Properties.views.startDate]
             */
            startDate?: Date | number | string;
            /**
             * [descr:Properties.views.startDayHour]
             */
            startDayHour?: number;
            /**
             * [descr:Properties.views.timeCellTemplate]
             */
            timeCellTemplate?:
              | DevExpress.core.template
              | ((
                  itemData: any,
                  itemIndex: number,
                  itemElement: DevExpress.core.DxElement
                ) => string | DevExpress.core.UserDefinedElement);
            /**
             * [descr:Properties.views.type]
             */
            type?:
              | 'agenda'
              | 'day'
              | 'month'
              | 'timelineDay'
              | 'timelineMonth'
              | 'timelineWeek'
              | 'timelineWorkWeek'
              | 'week'
              | 'workWeek';
            /**
             * [descr:Properties.views.scrolling]
             */
            scrolling?: dxSchedulerScrolling;
          }
      >;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface TargetedAppointmentInfo {
      readonly appointmentData: Appointment;
      readonly targetedAppointmentData?: Appointment;
    }
  }
  /**
   * [descr:dxSchedulerScrolling]
   */
  export interface dxSchedulerScrolling {
    /**
     * [descr:dxSchedulerScrolling.mode]
     */
    mode?: 'standard' | 'virtual';
  }
  /**
   * [descr:dxScrollable]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class dxScrollable<
    TProperties = DevExpress.ui.dxScrollable.Properties
  > extends DOMComponent<TProperties> {
    /**
     * [descr:dxScrollable.clientHeight()]
     */
    clientHeight(): number;
    /**
     * [descr:dxScrollable.clientWidth()]
     */
    clientWidth(): number;
    /**
     * [descr:dxScrollable.content()]
     */
    content(): DevExpress.core.DxElement;
    /**
     * [descr:dxScrollable.scrollBy(distance)]
     */
    scrollBy(distance: number | any): void;
    /**
     * [descr:dxScrollable.scrollHeight()]
     */
    scrollHeight(): number;
    /**
     * [descr:dxScrollable.scrollLeft()]
     */
    scrollLeft(): number;
    /**
     * [descr:dxScrollable.scrollOffset()]
     */
    scrollOffset(): any;
    /**
     * [descr:dxScrollable.scrollTo(targetLocation)]
     */
    scrollTo(targetLocation: number | any): void;
    /**
     * [descr:dxScrollable.scrollToElement(element)]
     */
    scrollToElement(element: DevExpress.core.UserDefinedElement): void;
    /**
     * [descr:dxScrollable.scrollTop()]
     */
    scrollTop(): number;
    /**
     * [descr:dxScrollable.scrollWidth()]
     */
    scrollWidth(): number;
    /**
     * [descr:dxScrollable.update()]
     */
    update(): DevExpress.core.utils.DxPromise<void>;
  }
  module dxScrollable {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    type Properties = dxScrollableOptions<ScrollableInstance>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface ScrollableInstance extends dxScrollable<Properties> {}
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ScrollEventInfo<T>
      extends DevExpress.events.NativeEventInfo<T> {
      readonly scrollOffset?: any;
      readonly reachedLeft?: boolean;
      readonly reachedRight?: boolean;
      readonly reachedTop?: boolean;
      readonly reachedBottom?: boolean;
    }
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxScrollableOptions<TComponent>
    extends DOMComponentOptions<TComponent> {
    /**
     * [descr:dxScrollableOptions.bounceEnabled]
     */
    bounceEnabled?: boolean;
    /**
     * [descr:dxScrollableOptions.direction]
     */
    direction?: 'both' | 'horizontal' | 'vertical';
    /**
     * [descr:dxScrollableOptions.disabled]
     */
    disabled?: boolean;
    /**
     * [descr:dxScrollableOptions.onScroll]
     */
    onScroll?: (
      e: DevExpress.ui.dxScrollable.ScrollEventInfo<TComponent>
    ) => void;
    /**
     * [descr:dxScrollableOptions.onUpdated]
     */
    onUpdated?: (
      e: DevExpress.ui.dxScrollable.ScrollEventInfo<TComponent>
    ) => void;
    /**
     * [descr:dxScrollableOptions.scrollByContent]
     */
    scrollByContent?: boolean;
    /**
     * [descr:dxScrollableOptions.scrollByThumb]
     */
    scrollByThumb?: boolean;
    /**
     * [descr:dxScrollableOptions.showScrollbar]
     */
    showScrollbar?: 'onScroll' | 'onHover' | 'always' | 'never';
    /**
     * [descr:dxScrollableOptions.useNative]
     */
    useNative?: boolean;
  }
  /**
   * [descr:dxScrollView]
   */
  export class dxScrollView extends dxScrollable<DevExpress.ui.dxScrollView.Properties> {
    /**
     * [descr:dxScrollView.refresh()]
     */
    refresh(): void;
    /**
     * [descr:dxScrollView.release(preventScrollBottom)]
     */
    release(
      preventScrollBottom: boolean
    ): DevExpress.core.utils.DxPromise<void>;
  }
  module dxScrollView {
    export type DisposingEvent = DevExpress.events.EventInfo<dxScrollView>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxScrollView>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxScrollView> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends dxScrollableOptions<dxScrollView> {
      /**
       * [descr:Properties.onPullDown]
       */
      onPullDown?: (e: PullDownEvent) => void;
      /**
       * [descr:Properties.onReachBottom]
       */
      onReachBottom?: (e: ReachBottomEvent) => void;
      /**
       * [descr:Properties.pulledDownText]
       */
      pulledDownText?: string;
      /**
       * [descr:Properties.pullingDownText]
       */
      pullingDownText?: string;
      /**
       * [descr:Properties.reachBottomText]
       */
      reachBottomText?: string;
      /**
       * [descr:Properties.refreshingText]
       */
      refreshingText?: string;
    }
    export type PullDownEvent = DevExpress.events.EventInfo<dxScrollView>;
    export type ReachBottomEvent = DevExpress.events.EventInfo<dxScrollView>;
    export type ScrollEvent =
      DevExpress.ui.dxScrollable.ScrollEventInfo<dxScrollView>;
    export type UpdatedEvent =
      DevExpress.ui.dxScrollable.ScrollEventInfo<dxScrollView>;
  }
  /**
   * [descr:dxSelectBox]
   */
  export class dxSelectBox<
    TProperties = DevExpress.ui.dxSelectBox.Properties
  > extends dxDropDownList<TProperties> {}
  module dxSelectBox {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<dxSelectBox>;
    export type ClosedEvent = DevExpress.events.EventInfo<dxSelectBox>;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxSelectBox>;
    export type CopyEvent = DevExpress.events.NativeEventInfo<dxSelectBox>;
    export type CustomItemCreatingEvent =
      DevExpress.events.EventInfo<dxSelectBox> & CustomItemCreatingInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface CustomItemCreatingInfo {
      readonly text?: string;
      customItem?: string | any | PromiseLike<any>;
    }
    export type CutEvent = DevExpress.events.NativeEventInfo<dxSelectBox>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxSelectBox>;
    export type DropDownButtonTemplateData =
      DevExpress.ui.dxDropDownEditor.DropDownButtonTemplateDataModel;
    export type EnterKeyEvent = DevExpress.events.NativeEventInfo<dxSelectBox>;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<dxSelectBox>;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<dxSelectBox>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxSelectBox>;
    export type InputEvent = DevExpress.events.NativeEventInfo<dxSelectBox>;
    export type ItemClickEvent =
      DevExpress.events.NativeEventInfo<dxSelectBox> &
        DevExpress.events.ItemInfo;
    export type KeyDownEvent = DevExpress.events.NativeEventInfo<dxSelectBox>;
    export type KeyPressEvent = DevExpress.events.NativeEventInfo<dxSelectBox>;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<dxSelectBox>;
    export type OpenedEvent = DevExpress.events.EventInfo<dxSelectBox>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxSelectBox> &
      DevExpress.events.ChangedOptionInfo;
    export type PasteEvent = DevExpress.events.NativeEventInfo<dxSelectBox>;
    /**
     * [descr:Properties]
     */
    export interface Properties<TComponent = SelectBoxInstance>
      extends dxDropDownListOptions<TComponent> {
      /**
       * [descr:Properties.acceptCustomValue]
       */
      acceptCustomValue?: boolean;
      /**
       * [descr:Properties.fieldTemplate]
       */
      fieldTemplate?:
        | DevExpress.core.template
        | ((
            selectedItem: any,
            fieldElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.onCustomItemCreating]
       */
      onCustomItemCreating?: (e: CustomItemCreatingEvent) => void;
      /**
       * [descr:Properties.openOnFieldClick]
       */
      openOnFieldClick?: boolean;
      /**
       * [descr:Properties.placeholder]
       */
      placeholder?: string;
      /**
       * [descr:Properties.showDropDownButton]
       */
      showDropDownButton?: boolean;
      /**
       * [descr:Properties.showSelectionControls]
       */
      showSelectionControls?: boolean;
      /**
       * [descr:Properties.valueChangeEvent]
       */
      valueChangeEvent?: string;

      /**
       * [descr:Properties.dropDownOptions]
       */
      dropDownOptions?: DevExpress.ui.dxPopup.Properties;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface SelectBoxInstance extends dxSelectBox<Properties> {}
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxSelectBox> &
        DevExpress.ui.dxDropDownList.SelectionChangedInfo;
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxSelectBox> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxSlideOut]
   * @deprecated [depNote:dxSlideOut]
   */
  export class dxSlideOut extends CollectionWidget<DevExpress.ui.dxSlideOut.Properties> {
    /**
     * [descr:dxSlideOut.hideMenu()]
     */
    hideMenu(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxSlideOut.showMenu()]
     */
    showMenu(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxSlideOut.toggleMenuVisibility(showing)]
     */
    toggleMenuVisibility(
      showing?: boolean
    ): DevExpress.core.utils.DxPromise<void>;
  }
  module dxSlideOut {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxSlideOut>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxSlideOut>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxSlideOut>;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<dxSlideOut> &
      DevExpress.events.ItemInfo;
    export type ItemContextMenuEvent =
      DevExpress.events.NativeEventInfo<dxSlideOut> &
        DevExpress.events.ItemInfo;
    export type ItemHoldEvent = DevExpress.events.NativeEventInfo<dxSlideOut> &
      DevExpress.events.ItemInfo;
    export type ItemRenderedEvent =
      DevExpress.events.NativeEventInfo<dxSlideOut> &
        DevExpress.events.ItemInfo;
    export type MenuGroupRenderedEvent =
      DevExpress.events.EventInfo<dxSlideOut>;
    export type MenuItemRenderedEvent = DevExpress.events.EventInfo<dxSlideOut>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxSlideOut> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends CollectionWidgetOptions<dxSlideOut> {
      /**
       * [descr:Properties.activeStateEnabled]
       */
      activeStateEnabled?: boolean;
      /**
       * [descr:Properties.contentTemplate]
       */
      contentTemplate?:
        | DevExpress.core.template
        | ((
            container: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<
        string | Item | any
      >;
      /**
       * [descr:Properties.items]
       */
      items?: Array<string | Item | any>;
      /**
       * [descr:Properties.menuGroupTemplate]
       */
      menuGroupTemplate?:
        | DevExpress.core.template
        | ((
            groupData: any,
            groupIndex: number,
            groupElement: any
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.menuGrouped]
       */
      menuGrouped?: boolean;
      /**
       * [descr:Properties.menuItemTemplate]
       */
      menuItemTemplate?:
        | DevExpress.core.template
        | ((
            itemData: any,
            itemIndex: number,
            itemElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.menuPosition]
       */
      menuPosition?: 'inverted' | 'normal';
      /**
       * [descr:Properties.menuVisible]
       */
      menuVisible?: boolean;
      /**
       * [descr:Properties.onMenuGroupRendered]
       */
      onMenuGroupRendered?: (e: MenuGroupRenderedEvent) => void;
      /**
       * [descr:Properties.onMenuItemRendered]
       */
      onMenuItemRendered?: (e: MenuItemRenderedEvent) => void;
      /**
       * [descr:Properties.selectedIndex]
       */
      selectedIndex?: number;
      /**
       * [descr:Properties.swipeEnabled]
       */
      swipeEnabled?: boolean;
    }
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxSlideOut> &
        DevExpress.ui.CollectionWidget.SelectionChangedInfo;
  }
  /**
   * [descr:dxSlideOutView]
   * @deprecated [depNote:dxSlideOutView]
   */
  export class dxSlideOutView extends Widget<DevExpress.ui.dxSlideOutView.Properties> {
    /**
     * [descr:dxSlideOutView.content()]
     */
    content(): DevExpress.core.DxElement;
    /**
     * [descr:dxSlideOutView.hideMenu()]
     */
    hideMenu(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxSlideOutView.menuContent()]
     */
    menuContent(): DevExpress.core.DxElement;
    /**
     * [descr:dxSlideOutView.showMenu()]
     */
    showMenu(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxSlideOutView.toggleMenuVisibility(showing)]
     */
    toggleMenuVisibility(
      showing?: boolean
    ): DevExpress.core.utils.DxPromise<void>;
  }
  module dxSlideOutView {
    export type DisposingEvent = DevExpress.events.EventInfo<dxSlideOutView>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxSlideOutView>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxSlideOutView> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends WidgetOptions<dxSlideOutView> {
      /**
       * [descr:Properties.contentTemplate]
       */
      contentTemplate?:
        | DevExpress.core.template
        | ((contentElement: DevExpress.core.DxElement) => any);
      /**
       * [descr:Properties.menuPosition]
       */
      menuPosition?: 'inverted' | 'normal';
      /**
       * [descr:Properties.menuTemplate]
       */
      menuTemplate?:
        | DevExpress.core.template
        | ((menuElement: DevExpress.core.DxElement) => any);
      /**
       * [descr:Properties.menuVisible]
       */
      menuVisible?: boolean;
      /**
       * [descr:Properties.swipeEnabled]
       */
      swipeEnabled?: boolean;
    }
  }
  /**
   * [descr:dxSlider]
   */
  export class dxSlider extends dxTrackBar<DevExpress.ui.dxSlider.Properties> {}
  module dxSlider {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxSlider>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxSlider>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxSlider>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxSlider> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends dxSliderBaseOptions<dxSlider> {
      /**
       * [descr:Properties.value]
       */
      value?: number;
    }
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxSlider> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxSliderBase]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxSliderBaseOptions<TComponent>
    extends dxTrackBarOptions<TComponent> {
    /**
     * [descr:dxSliderBaseOptions.activeStateEnabled]
     */
    activeStateEnabled?: boolean;
    /**
     * [descr:dxSliderBaseOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxSliderBaseOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxSliderBaseOptions.keyStep]
     */
    keyStep?: number;
    /**
     * [descr:dxSliderBaseOptions.label]
     */
    label?: {
      /**
       * [descr:dxSliderBaseOptions.label.format]
       */
      format?: Format;
      /**
       * [descr:dxSliderBaseOptions.label.position]
       */
      position?: 'bottom' | 'top';
      /**
       * [descr:dxSliderBaseOptions.label.visible]
       */
      visible?: boolean;
    };
    /**
     * [descr:dxSliderBaseOptions.name]
     */
    name?: string;
    /**
     * [descr:dxSliderBaseOptions.showRange]
     */
    showRange?: boolean;
    /**
     * [descr:dxSliderBaseOptions.step]
     */
    step?: number;
    /**
     * [descr:dxSliderBaseOptions.tooltip]
     */
    tooltip?: {
      /**
       * [descr:dxSliderBaseOptions.tooltip.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:dxSliderBaseOptions.tooltip.format]
       */
      format?: Format;
      /**
       * [descr:dxSliderBaseOptions.tooltip.position]
       */
      position?: 'bottom' | 'top';
      /**
       * [descr:dxSliderBaseOptions.tooltip.showMode]
       */
      showMode?: 'always' | 'onHover';
    };
  }
  /**
   * [descr:dxSortable]
   */
  export class dxSortable
    extends DOMComponent<DevExpress.ui.dxSortable.Properties>
    implements DraggableBase
  {
    /**
     * [descr:dxSortable.update()]
     */
    update(): void;
  }
  module dxSortable {
    export interface AddEvent {
      readonly component: dxSortable;
      readonly element: DevExpress.core.DxElement;
      readonly model?: any;
      readonly event: DevExpress.events.DxEvent;
      readonly itemData?: any;
      readonly itemElement: DevExpress.core.DxElement;
      readonly fromIndex: number;
      readonly toIndex: number;
      readonly fromComponent: dxSortable | dxDraggable;
      readonly toComponent: dxSortable | dxDraggable;
      readonly fromData?: any;
      readonly toData?: any;
      readonly dropInsideItem: boolean;
    }
    export type DisposingEvent = DevExpress.events.EventInfo<dxSortable>;
    export type DragChangeEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxSortable> & {
        readonly itemData?: any;
        readonly itemElement: DevExpress.core.DxElement;
        readonly fromIndex?: number;
        readonly toIndex?: number;
        readonly fromComponent?: dxSortable | dxDraggable;
        readonly toComponent?: dxSortable | dxDraggable;
        readonly fromData?: any;
        readonly toData?: any;
        readonly dropInsideItem?: boolean;
      };
    export type DragEndEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxSortable> & {
        readonly itemData?: any;
        readonly itemElement: DevExpress.core.DxElement;
        readonly fromIndex: number;
        readonly toIndex: number;
        readonly fromComponent: dxSortable | dxDraggable;
        readonly toComponent: dxSortable | dxDraggable;
        readonly fromData?: any;
        readonly toData?: any;
        readonly dropInsideItem: boolean;
      };
    export type DragMoveEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxSortable> & {
        readonly itemData?: any;
        readonly itemElement: DevExpress.core.DxElement;
        readonly fromIndex: number;
        readonly toIndex: number;
        readonly fromComponent: dxSortable | dxDraggable;
        readonly toComponent: dxSortable | dxDraggable;
        readonly fromData?: any;
        readonly toData?: any;
        readonly dropInsideItem: boolean;
      };
    export type DragStartEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxSortable> & {
        itemData?: any;
        readonly itemElement: DevExpress.core.DxElement;
        readonly fromIndex: number;
        readonly fromData?: any;
      };
    export interface DragTemplateData {
      readonly itemData?: any;
      readonly itemElement: DevExpress.core.DxElement;
      readonly fromIndex: number;
    }
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxSortable>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxSortable> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends DraggableBaseOptions<dxSortable> {
      /**
       * [descr:Properties.allowDropInsideItem]
       */
      allowDropInsideItem?: boolean;
      /**
       * [descr:Properties.allowReordering]
       */
      allowReordering?: boolean;
      /**
       * [descr:Properties.dragTemplate]
       */
      dragTemplate?:
        | DevExpress.core.template
        | ((
            dragInfo: DragTemplateData,
            containerElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.dropFeedbackMode]
       */
      dropFeedbackMode?: 'push' | 'indicate';
      /**
       * [descr:Properties.filter]
       */
      filter?: string;
      /**
       * [descr:Properties.itemOrientation]
       */
      itemOrientation?: 'horizontal' | 'vertical';
      /**
       * [descr:Properties.moveItemOnDrop]
       */
      moveItemOnDrop?: boolean;
      /**
       * [descr:Properties.onAdd]
       */
      onAdd?: (e: AddEvent) => void;
      /**
       * [descr:Properties.onDragChange]
       */
      onDragChange?: (e: DragChangeEvent) => void;
      /**
       * [descr:Properties.onDragEnd]
       */
      onDragEnd?: (e: DragEndEvent) => void;
      /**
       * [descr:Properties.onDragMove]
       */
      onDragMove?: (e: DragMoveEvent) => void;
      /**
       * [descr:Properties.onDragStart]
       */
      onDragStart?: (e: DragStartEvent) => void;
      /**
       * [descr:Properties.onRemove]
       */
      onRemove?: (e: RemoveEvent) => void;
      /**
       * [descr:Properties.onReorder]
       */
      onReorder?: (e: ReorderEvent) => void;
    }
    export type RemoveEvent = DevExpress.events.NativeEventInfo<dxSortable> & {
      readonly itemData?: any;
      readonly itemElement: DevExpress.core.DxElement;
      readonly fromIndex: number;
      readonly toIndex: number;
      readonly fromComponent: dxSortable | dxDraggable;
      readonly toComponent: dxSortable | dxDraggable;
      readonly fromData?: any;
      readonly toData?: any;
    };
    export type ReorderEvent = DevExpress.events.NativeEventInfo<dxSortable> & {
      readonly itemData?: any;
      readonly itemElement: DevExpress.core.DxElement;
      readonly fromIndex: number;
      readonly toIndex: number;
      readonly fromComponent: dxSortable | dxDraggable;
      readonly toComponent: dxSortable | dxDraggable;
      readonly fromData?: any;
      readonly toData?: any;
      readonly dropInsideItem: boolean;
      promise?: PromiseLike<void>;
    };
  }
  /**
   * [descr:dxSpeedDialAction]
   */
  export class dxSpeedDialAction extends Widget<DevExpress.ui.dxSpeedDialAction.Properties> {}
  module dxSpeedDialAction {
    export type ClickEvent =
      DevExpress.events.NativeEventInfo<dxSpeedDialAction> & {
        actionElement?: DevExpress.core.DxElement;
      };
    export type ContentReadyEvent =
      DevExpress.events.EventInfo<dxSpeedDialAction> & {
        actionElement?: DevExpress.core.DxElement;
      };
    export type DisposingEvent = DevExpress.events.EventInfo<dxSpeedDialAction>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxSpeedDialAction>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxSpeedDialAction> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends WidgetOptions<dxSpeedDialAction> {
      /**
       * [descr:Properties.icon]
       */
      icon?: string;
      /**
       * [descr:Properties.index]
       */
      index?: number;
      /**
       * [descr:Properties.label]
       */
      label?: string;
      /**
       * [descr:Properties.onClick]
       */
      onClick?: (e: ClickEvent) => void;
      /**
       * [descr:Properties.onContentReady]
       */
      onContentReady?: (e: ContentReadyEvent) => void;
      /**
       * [descr:Properties.visible]
       */
      visible?: boolean;
    }
  }
  /**
   * [descr:dxSwitch]
   */
  export class dxSwitch extends Editor<DevExpress.ui.dxSwitch.Properties> {}
  module dxSwitch {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxSwitch>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxSwitch>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxSwitch>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxSwitch> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends EditorOptions<dxSwitch> {
      /**
       * [descr:Properties.activeStateEnabled]
       */
      activeStateEnabled?: boolean;
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.hoverStateEnabled]
       */
      hoverStateEnabled?: boolean;
      /**
       * [descr:Properties.name]
       */
      name?: string;
      /**
       * [descr:Properties.switchedOffText]
       */
      switchedOffText?: string;
      /**
       * [descr:Properties.switchedOnText]
       */
      switchedOnText?: string;
      /**
       * [descr:Properties.value]
       */
      value?: boolean;
    }
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxSwitch> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxTabPanel]
   */
  export class dxTabPanel extends dxMultiView<DevExpress.ui.dxTabPanel.Properties> {}
  module dxTabPanel {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxTabPanel>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxTabPanel>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxTabPanel>;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<dxTabPanel> &
      DevExpress.events.ItemInfo;
    export type ItemContextMenuEvent =
      DevExpress.events.NativeEventInfo<dxTabPanel> &
        DevExpress.events.ItemInfo;
    export type ItemHoldEvent = DevExpress.events.NativeEventInfo<dxTabPanel> &
      DevExpress.events.ItemInfo;
    export type ItemRenderedEvent =
      DevExpress.events.NativeEventInfo<dxTabPanel> &
        DevExpress.events.ItemInfo;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxTabPanel> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties
      extends DevExpress.ui.dxMultiView.Properties<dxTabPanel> {
      /**
       * [descr:Properties.animationEnabled]
       */
      animationEnabled?: boolean;
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<
        string | Item | any
      >;
      /**
       * [descr:Properties.hoverStateEnabled]
       */
      hoverStateEnabled?: boolean;
      /**
       * [descr:Properties.itemTitleTemplate]
       */
      itemTitleTemplate?:
        | DevExpress.core.template
        | ((
            itemData: any,
            itemIndex: number,
            itemElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.items]
       */
      items?: Array<string | Item | any>;
      /**
       * [descr:Properties.onTitleClick]
       */
      onTitleClick?: ((e: TitleClickEvent) => void) | string;
      /**
       * [descr:Properties.onTitleHold]
       */
      onTitleHold?: (e: TitleHoldEvent) => void;
      /**
       * [descr:Properties.onTitleRendered]
       */
      onTitleRendered?: (e: TitleRenderedEvent) => void;
      /**
       * [descr:Properties.repaintChangesOnly]
       */
      repaintChangesOnly?: boolean;
      /**
       * [descr:Properties.scrollByContent]
       */
      scrollByContent?: boolean;
      /**
       * [descr:Properties.scrollingEnabled]
       */
      scrollingEnabled?: boolean;
      /**
       * [descr:Properties.showNavButtons]
       */
      showNavButtons?: boolean;
      /**
       * [descr:Properties.swipeEnabled]
       */
      swipeEnabled?: boolean;
    }
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxTabPanel> &
        DevExpress.ui.CollectionWidget.SelectionChangedInfo;
    export type TitleClickEvent =
      DevExpress.events.NativeEventInfo<dxTabPanel> & {
        readonly itemData?: any;
        readonly itemElement?: DevExpress.core.DxElement;
      };
    export type TitleHoldEvent =
      DevExpress.events.NativeEventInfo<dxTabPanel> & {
        readonly itemData?: any;
        readonly itemElement?: DevExpress.core.DxElement;
      };
    export type TitleRenderedEvent = DevExpress.events.EventInfo<dxTabPanel> & {
      readonly itemData?: any;
      readonly itemElement?: DevExpress.core.DxElement;
    };
  }
  /**
   * [descr:dxTabs]
   */
  export class dxTabs<
    TProperties = DevExpress.ui.dxTabs.Properties
  > extends CollectionWidget<TProperties> {}
  module dxTabs {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxTabs>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxTabs>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxTabs>;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<dxTabs> &
      DevExpress.events.ItemInfo;
    export type ItemContextMenuEvent =
      DevExpress.events.NativeEventInfo<dxTabs> & DevExpress.events.ItemInfo;
    export type ItemHoldEvent = DevExpress.events.NativeEventInfo<dxTabs> &
      DevExpress.events.ItemInfo;
    export type ItemRenderedEvent = DevExpress.events.NativeEventInfo<dxTabs> &
      DevExpress.events.ItemInfo;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxTabs> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties<TComponent = TabsInstance>
      extends CollectionWidgetOptions<TComponent> {
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<
        string | Item | any
      >;
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.hoverStateEnabled]
       */
      hoverStateEnabled?: boolean;
      /**
       * [descr:Properties.items]
       */
      items?: Array<string | Item | any>;
      /**
       * [descr:Properties.repaintChangesOnly]
       */
      repaintChangesOnly?: boolean;
      /**
       * [descr:Properties.scrollByContent]
       */
      scrollByContent?: boolean;
      /**
       * [descr:Properties.scrollingEnabled]
       */
      scrollingEnabled?: boolean;
      /**
       * [descr:Properties.selectionMode]
       */
      selectionMode?: 'multiple' | 'single';
      /**
       * [descr:Properties.showNavButtons]
       */
      showNavButtons?: boolean;
    }
    export type SelectionChangedEvent = DevExpress.events.EventInfo<dxTabs> &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface TabsInstance extends dxTabs<Properties> {}
  }
  /**
   * [descr:dxTagBox]
   */
  export class dxTagBox extends dxSelectBox<DevExpress.ui.dxTagBox.Properties> {}
  module dxTagBox {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<dxTagBox>;
    export type ClosedEvent = DevExpress.events.EventInfo<dxTagBox>;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxTagBox>;
    export type CustomItemCreatingEvent =
      DevExpress.events.EventInfo<dxTagBox> &
        DevExpress.ui.dxSelectBox.CustomItemCreatingInfo;
    export type DisposingEvent = DevExpress.events.EventInfo<dxTagBox>;
    export type DropDownButtonTemplateData =
      DevExpress.ui.dxDropDownEditor.DropDownButtonTemplateDataModel;
    export type EnterKeyEvent = DevExpress.events.NativeEventInfo<dxTagBox>;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<dxTagBox>;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<dxTagBox>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxTagBox>;
    export type InputEvent = DevExpress.events.NativeEventInfo<dxTagBox>;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<dxTagBox> &
      DevExpress.events.ItemInfo;
    export type KeyDownEvent = DevExpress.events.NativeEventInfo<dxTagBox>;
    export type KeyPressEvent = DevExpress.events.NativeEventInfo<dxTagBox>;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<dxTagBox>;
    export type MultiTagPreparingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxTagBox> & {
        readonly multiTagElement: DevExpress.core.DxElement;
        readonly selectedItems?: Array<string | number | any>;
        text?: string;
      };
    export type OpenedEvent = DevExpress.events.EventInfo<dxTagBox>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxTagBox> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties
      extends Pick<
        DevExpress.ui.dxSelectBox.Properties<dxTagBox>,
        Exclude<
          keyof DevExpress.ui.dxSelectBox.Properties<dxTagBox>,
          'onSelectionChanged'
        >
      > {
      /**
       * [descr:Properties.applyValueMode]
       */
      applyValueMode?: 'instantly' | 'useButtons';
      /**
       * [descr:Properties.hideSelectedItems]
       */
      hideSelectedItems?: boolean;
      /**
       * [descr:Properties.maxDisplayedTags]
       */
      maxDisplayedTags?: number;
      /**
       * [descr:Properties.multiline]
       */
      multiline?: boolean;
      /**
       * [descr:Properties.onMultiTagPreparing]
       */
      onMultiTagPreparing?: (e: MultiTagPreparingEvent) => void;
      /**
       * [descr:Properties.onSelectAllValueChanged]
       */
      onSelectAllValueChanged?: (e: SelectAllValueChangedEvent) => void;
      /**
       * [descr:Properties.onSelectionChanged]
       */
      onSelectionChanged?: (e: SelectionChangedEvent) => void;
      /**
       * [descr:Properties.selectAllMode]
       */
      selectAllMode?: 'allPages' | 'page';
      /**
       * [descr:Properties.selectedItems]
       */
      selectedItems?: Array<string | number | any>;
      /**
       * [descr:Properties.selectAllText]
       */
      selectAllText?: string;
      /**
       * [descr:Properties.showDropDownButton]
       */
      showDropDownButton?: boolean;
      /**
       * [descr:Properties.maxFilterQueryLength]
       */
      maxFilterQueryLength?: number;
      /**
       * [descr:Properties.showMultiTagOnly]
       */
      showMultiTagOnly?: boolean;
      /**
       * [descr:Properties.tagTemplate]
       */
      tagTemplate?:
        | DevExpress.core.template
        | ((
            itemData: any,
            itemElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.value]
       */
      value?: Array<string | number | any>;
    }
    export type SelectAllValueChangedEvent =
      DevExpress.events.EventInfo<dxTagBox> & {
        readonly value: boolean;
      };
    export type SelectionChangedEvent = DevExpress.events.EventInfo<dxTagBox> &
      DevExpress.ui.CollectionWidget.SelectionChangedInfo<
        string | number | any
      >;
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxTagBox> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxTextArea]
   */
  export class dxTextArea extends dxTextBox<DevExpress.ui.dxTextArea.Properties> {}
  module dxTextArea {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<dxTextArea>;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxTextArea>;
    export type CopyEvent = DevExpress.events.NativeEventInfo<dxTextArea>;
    export type CutEvent = DevExpress.events.NativeEventInfo<dxTextArea>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxTextArea>;
    export type EnterKeyEvent = DevExpress.events.NativeEventInfo<dxTextArea>;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<dxTextArea>;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<dxTextArea>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxTextArea>;
    export type InputEvent = DevExpress.events.NativeEventInfo<dxTextArea>;
    export type KeyDownEvent = DevExpress.events.NativeEventInfo<dxTextArea>;
    export type KeyPressEvent = DevExpress.events.NativeEventInfo<dxTextArea>;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<dxTextArea>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxTextArea> &
      DevExpress.events.ChangedOptionInfo;
    export type PasteEvent = DevExpress.events.NativeEventInfo<dxTextArea>;
    /**
     * [descr:Properties]
     */
    export interface Properties
      extends DevExpress.ui.dxTextBox.Properties<dxTextArea> {
      /**
       * [descr:Properties.autoResizeEnabled]
       */
      autoResizeEnabled?: boolean;
      /**
       * [descr:Properties.maxHeight]
       */
      maxHeight?: number | string;
      /**
       * [descr:Properties.minHeight]
       */
      minHeight?: number | string;
      /**
       * [descr:Properties.spellcheck]
       */
      spellcheck?: boolean;
    }
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxTextArea> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxTextBox]
   */
  export class dxTextBox<
    TProperties = DevExpress.ui.dxTextBox.Properties
  > extends dxTextEditor<TProperties> {}
  module dxTextBox {
    export type ChangeEvent = DevExpress.events.NativeEventInfo<dxTextBox>;
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxTextBox>;
    export type CopyEvent = DevExpress.events.NativeEventInfo<dxTextBox>;
    export type CutEvent = DevExpress.events.NativeEventInfo<dxTextBox>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxTextBox>;
    export type EnterKeyEvent = DevExpress.events.NativeEventInfo<dxTextBox>;
    export type FocusInEvent = DevExpress.events.NativeEventInfo<dxTextBox>;
    export type FocusOutEvent = DevExpress.events.NativeEventInfo<dxTextBox>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxTextBox>;
    export type InputEvent = DevExpress.events.NativeEventInfo<dxTextBox>;
    export type KeyDownEvent = DevExpress.events.NativeEventInfo<dxTextBox>;
    export type KeyPressEvent = DevExpress.events.NativeEventInfo<dxTextBox>;
    export type KeyUpEvent = DevExpress.events.NativeEventInfo<dxTextBox>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxTextBox> &
      DevExpress.events.ChangedOptionInfo;
    export type PasteEvent = DevExpress.events.NativeEventInfo<dxTextBox>;
    /**
     * [descr:Properties]
     */
    export interface Properties<TComponent = TextBoxInstance>
      extends dxTextEditorOptions<TComponent> {
      /**
       * [descr:Properties.maxLength]
       */
      maxLength?: string | number;
      /**
       * [descr:Properties.mode]
       */
      mode?: 'email' | 'password' | 'search' | 'tel' | 'text' | 'url';
      /**
       * [descr:Properties.value]
       */
      value?: string;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface TextBoxInstance extends dxTextBox<Properties> {}
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxTextBox> &
        DevExpress.ui.Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxTextEditor]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class dxTextEditor<
    TProperties = DevExpress.ui.dxTextEditor.Properties
  > extends Editor<TProperties> {
    /**
     * [descr:dxTextEditor.blur()]
     */
    blur(): void;
    /**
     * [descr:dxTextEditor.focus()]
     */
    focus(): void;
    /**
     * [descr:dxTextEditor.getButton(name)]
     */
    getButton(name: string): dxButton | undefined;
  }
  module dxTextEditor {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    type Properties = dxTextEditorOptions<TextEditorInstance>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface TextEditorInstance extends dxTextEditor<Properties> {}
  }
  /**
   * [descr:dxTextEditorButton]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxTextEditorButton {
    /**
     * [descr:dxTextEditorButton.location]
     */
    location?: 'after' | 'before';
    /**
     * [descr:dxTextEditorButton.name]
     */
    name?: string;
    /**
     * [descr:dxTextEditorButton.options]
     */
    options?: DevExpress.ui.dxButton.Properties;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxTextEditorOptions<TComponent>
    extends EditorOptions<TComponent> {
    /**
     * [descr:dxTextEditorOptions.buttons]
     */
    buttons?: Array<string | 'clear' | dxTextEditorButton>;
    /**
     * [descr:dxTextEditorOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxTextEditorOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxTextEditorOptions.inputAttr]
     */
    inputAttr?: any;
    /**
     * [descr:dxTextEditorOptions.label]
     */
    label?: string;
    /**
     * [descr:dxTextEditorOptions.labelMode]
     */
    labelMode?: 'static' | 'floating' | 'hidden';
    /**
     * [descr:dxTextEditorOptions.mask]
     */
    mask?: string;
    /**
     * [descr:dxTextEditorOptions.maskChar]
     */
    maskChar?: string;
    /**
     * [descr:dxTextEditorOptions.maskInvalidMessage]
     */
    maskInvalidMessage?: string;
    /**
     * [descr:dxTextEditorOptions.maskRules]
     */
    maskRules?: any;
    /**
     * [descr:dxTextEditorOptions.name]
     */
    name?: string;
    /**
     * [descr:dxTextEditorOptions.onChange]
     */
    onChange?: (e: DevExpress.events.NativeEventInfo<TComponent>) => void;
    /**
     * [descr:dxTextEditorOptions.onCopy]
     */
    onCopy?: (e: DevExpress.events.NativeEventInfo<TComponent>) => void;
    /**
     * [descr:dxTextEditorOptions.onCut]
     */
    onCut?: (e: DevExpress.events.NativeEventInfo<TComponent>) => void;
    /**
     * [descr:dxTextEditorOptions.onEnterKey]
     */
    onEnterKey?: (e: DevExpress.events.NativeEventInfo<TComponent>) => void;
    /**
     * [descr:dxTextEditorOptions.onFocusIn]
     */
    onFocusIn?: (e: DevExpress.events.NativeEventInfo<TComponent>) => void;
    /**
     * [descr:dxTextEditorOptions.onFocusOut]
     */
    onFocusOut?: (e: DevExpress.events.NativeEventInfo<TComponent>) => void;
    /**
     * [descr:dxTextEditorOptions.onInput]
     */
    onInput?: (e: DevExpress.events.NativeEventInfo<TComponent>) => void;
    /**
     * [descr:dxTextEditorOptions.onKeyDown]
     */
    onKeyDown?: (e: DevExpress.events.NativeEventInfo<TComponent>) => void;
    /**
     * [descr:dxTextEditorOptions.onKeyUp]
     */
    onKeyUp?: (e: DevExpress.events.NativeEventInfo<TComponent>) => void;
    /**
     * [descr:dxTextEditorOptions.onPaste]
     */
    onPaste?: (e: DevExpress.events.NativeEventInfo<TComponent>) => void;
    /**
     * [descr:dxTextEditorOptions.placeholder]
     */
    placeholder?: string;
    /**
     * [descr:dxTextEditorOptions.showClearButton]
     */
    showClearButton?: boolean;
    /**
     * [descr:dxTextEditorOptions.showMaskMode]
     */
    showMaskMode?: 'always' | 'onFocus';
    /**
     * [descr:dxTextEditorOptions.spellcheck]
     */
    spellcheck?: boolean;
    /**
     * [descr:dxTextEditorOptions.stylingMode]
     */
    stylingMode?: 'outlined' | 'underlined' | 'filled';
    /**
     * [descr:dxTextEditorOptions.text]
     */
    text?: string;
    /**
     * [descr:dxTextEditorOptions.useMaskedValue]
     */
    useMaskedValue?: boolean;
    /**
     * [descr:dxTextEditorOptions.value]
     */
    value?: any;
    /**
     * [descr:dxTextEditorOptions.valueChangeEvent]
     */
    valueChangeEvent?: string;
  }
  /**
   * [descr:dxTileView]
   */
  export class dxTileView extends CollectionWidget<DevExpress.ui.dxTileView.Properties> {
    /**
     * [descr:dxTileView.scrollPosition()]
     */
    scrollPosition(): number;
  }
  module dxTileView {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxTileView>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxTileView>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxTileView>;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<dxTileView> &
      DevExpress.events.ItemInfo;
    export type ItemContextMenuEvent =
      DevExpress.events.NativeEventInfo<dxTileView> &
        DevExpress.events.ItemInfo;
    export type ItemHoldEvent = DevExpress.events.NativeEventInfo<dxTileView> &
      DevExpress.events.ItemInfo;
    export type ItemRenderedEvent =
      DevExpress.events.NativeEventInfo<dxTileView> &
        DevExpress.events.ItemInfo;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxTileView> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends CollectionWidgetOptions<dxTileView> {
      /**
       * [descr:Properties.activeStateEnabled]
       */
      activeStateEnabled?: boolean;
      /**
       * [descr:Properties.baseItemHeight]
       */
      baseItemHeight?: number;
      /**
       * [descr:Properties.baseItemWidth]
       */
      baseItemWidth?: number;
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<
        string | Item | any
      >;
      /**
       * [descr:Properties.direction]
       */
      direction?: 'horizontal' | 'vertical';
      /**
       * [descr:Properties.focusStateEnabled]
       */
      focusStateEnabled?: boolean;
      /**
       * [descr:Properties.height]
       */
      height?: number | string | (() => number | string);
      /**
       * [descr:Properties.hoverStateEnabled]
       */
      hoverStateEnabled?: boolean;
      /**
       * [descr:Properties.itemMargin]
       */
      itemMargin?: number;
      /**
       * [descr:Properties.items]
       */
      items?: Array<string | Item | any>;
      /**
       * [descr:Properties.showScrollbar]
       */
      showScrollbar?: boolean;
    }
  }
  /**
   * [descr:dxToast]
   */
  export class dxToast extends dxOverlay<DevExpress.ui.dxToast.Properties> {}
  module dxToast {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxToast>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxToast>;
    export type HiddenEvent = DevExpress.events.EventInfo<dxToast>;
    export type HidingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxToast>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxToast>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxToast> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends dxOverlayOptions<dxToast> {
      /**
       * [descr:Properties.animation]
       */
      animation?: dxToastAnimation;
      /**
       * [descr:Properties.closeOnClick]
       */
      closeOnClick?: boolean;
      /**
       * [descr:Properties.closeOnOutsideClick]
       */
      closeOnOutsideClick?:
        | boolean
        | ((event: DevExpress.events.DxEvent) => boolean);
      /**
       * [descr:Properties.closeOnSwipe]
       */
      closeOnSwipe?: boolean;
      /**
       * [descr:Properties.displayTime]
       */
      displayTime?: number;
      /**
       * [descr:Properties.height]
       */
      height?: number | string | (() => number | string);
      /**
       * [descr:Properties.maxWidth]
       */
      maxWidth?: number | string | (() => number | string);
      /**
       * [descr:Properties.message]
       */
      message?: string;
      /**
       * [descr:Properties.minWidth]
       */
      minWidth?: number | string | (() => number | string);
      /**
       * [descr:Properties.position]
       */
      position?: PositionConfig | string;
      /**
       * [descr:Properties.shading]
       */
      shading?: boolean;
      /**
       * [descr:Properties.type]
       */
      type?: 'custom' | 'error' | 'info' | 'success' | 'warning';
      /**
       * [descr:Properties.width]
       */
      width?: number | string | (() => number | string);
    }
    export type ShowingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxToast>;
    export type ShownEvent = DevExpress.events.EventInfo<dxToast>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxToastAnimation extends dxOverlayAnimation {
    /**
     * [descr:dxToastOptions.animation.hide]
     */
    hide?: AnimationConfig;
    /**
     * [descr:dxToastOptions.animation.show]
     */
    show?: AnimationConfig;
  }
  /**
   * [descr:dxToolbar]
   */
  export class dxToolbar extends CollectionWidget<DevExpress.ui.dxToolbar.Properties> {}
  module dxToolbar {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxToolbar>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxToolbar>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxToolbar>;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<dxToolbar> &
      DevExpress.events.ItemInfo;
    export type ItemContextMenuEvent =
      DevExpress.events.NativeEventInfo<dxToolbar> & DevExpress.events.ItemInfo;
    export type ItemHoldEvent = DevExpress.events.NativeEventInfo<dxToolbar> &
      DevExpress.events.ItemInfo;
    export type ItemRenderedEvent =
      DevExpress.events.NativeEventInfo<dxToolbar> & DevExpress.events.ItemInfo;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxToolbar> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends CollectionWidgetOptions<dxToolbar> {
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<
        string | Item | any
      >;
      /**
       * [descr:Properties.items]
       */
      items?: Array<string | Item | any>;
      /**
       * [descr:Properties.menuItemTemplate]
       */
      menuItemTemplate?:
        | DevExpress.core.template
        | ((
            itemData: any,
            itemIndex: number,
            itemElement: DevExpress.core.DxElement
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:Properties.height]
       * @deprecated [depNote:Properties.height]
       */
      height?: number | string | (() => number | string);
    }
  }
  /**
   * [descr:dxTooltip]
   */
  export class dxTooltip extends dxPopover<DevExpress.ui.dxTooltip.Properties> {}
  module dxTooltip {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxTooltip>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxTooltip>;
    export type HiddenEvent = DevExpress.events.EventInfo<dxTooltip>;
    export type HidingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxTooltip>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxTooltip>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxTooltip> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties
      extends DevExpress.ui.dxPopover.Properties<dxTooltip> {}
    export type ShowingEvent = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxTooltip>;
    export type ShownEvent = DevExpress.events.EventInfo<dxTooltip>;
  }
  /**
   * [descr:dxTrackBar]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class dxTrackBar<TProperties> extends Editor<TProperties> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxTrackBarOptions<TComponent>
    extends EditorOptions<TComponent> {
    /**
     * [descr:dxTrackBarOptions.max]
     */
    max?: number;
    /**
     * [descr:dxTrackBarOptions.min]
     */
    min?: number;
  }
  /**
   * [descr:dxTreeList]
   */
  export class dxTreeList<TRowData = any, TKey = any>
    extends Widget<DevExpress.ui.dxTreeList.Properties<TRowData, TKey>>
    implements GridBase<TRowData, TKey>
  {
    /**
     * [descr:dxTreeList.addColumn(columnOptions)]
     */
    addColumn(
      columnOptions: DevExpress.ui.dxTreeList.Column<TRowData, TKey> | string
    ): void;
    /**
     * [descr:dxTreeList.addRow()]
     */
    addRow(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxTreeList.addRow(parentId)]
     */
    addRow(parentId: TKey): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxTreeList.collapseRow(key)]
     */
    collapseRow(key: TKey): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxTreeList.expandRow(key)]
     */
    expandRow(key: TKey): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxTreeList.forEachNode(callback)]
     */
    forEachNode(callback: Function): void;
    /**
     * [descr:dxTreeList.forEachNode(nodes, callback)]
     */
    forEachNode(
      nodes: Array<DevExpress.ui.dxTreeList.Node<TRowData, TKey>>,
      callback: Function
    ): void;
    /**
     * [descr:dxTreeList.getNodeByKey(key)]
     */
    getNodeByKey(key: TKey): DevExpress.ui.dxTreeList.Node<TRowData, TKey>;
    /**
     * [descr:dxTreeList.getRootNode()]
     */
    getRootNode(): DevExpress.ui.dxTreeList.Node<TRowData, TKey>;
    /**
     * [descr:dxTreeList.getSelectedRowKeys()]
     */
    getSelectedRowKeys(): Array<TKey>;
    /**
     * [descr:dxTreeList.getSelectedRowKeys(mode)]
     */
    getSelectedRowKeys(mode: string): Array<TKey>;
    /**
     * [descr:dxTreeList.getSelectedRowsData()]
     */
    getSelectedRowsData(): Array<TRowData>;
    /**
     * [descr:dxTreeList.getSelectedRowsData(mode)]
     */
    getSelectedRowsData(mode: string): Array<TRowData>;
    /**
     * [descr:dxTreeList.getVisibleColumns()]
     */
    getVisibleColumns(): Array<DevExpress.ui.dxTreeList.Column<TRowData, TKey>>;
    /**
     * [descr:dxTreeList.getVisibleColumns(headerLevel)]
     */
    getVisibleColumns(
      headerLevel: number
    ): Array<DevExpress.ui.dxTreeList.Column<TRowData, TKey>>;
    /**
     * [descr:dxTreeList.getVisibleRows()]
     */
    getVisibleRows(): Array<DevExpress.ui.dxTreeList.Row<TRowData, TKey>>;
    /**
     * [descr:dxTreeList.isRowExpanded(key)]
     */
    isRowExpanded(key: TKey): boolean;
    /**
     * [descr:dxTreeList.loadDescendants()]
     */
    loadDescendants(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxTreeList.loadDescendants(keys)]
     */
    loadDescendants(keys: Array<TKey>): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxTreeList.loadDescendants(keys, childrenOnly)]
     */
    loadDescendants(
      keys: Array<TKey>,
      childrenOnly: boolean
    ): DevExpress.core.utils.DxPromise<void>;

    beginCustomLoading(messageText: string): void;
    byKey(key: TKey): DevExpress.core.utils.DxPromise<TRowData>;
    cancelEditData(): void;
    cellValue(rowIndex: number, dataField: string): any;
    cellValue(rowIndex: number, dataField: string, value: any): void;
    cellValue(rowIndex: number, visibleColumnIndex: number): any;
    cellValue(rowIndex: number, visibleColumnIndex: number, value: any): void;
    clearFilter(): void;
    clearFilter(filterName: string): void;
    clearSelection(): void;
    clearSorting(): void;
    closeEditCell(): void;
    collapseAdaptiveDetailRow(): void;
    columnCount(): number;
    columnOption(id: number | string): any;
    columnOption(id: number | string, optionName: string): any;
    columnOption(
      id: number | string,
      optionName: string,
      optionValue: any
    ): void;
    columnOption(id: number | string, options: any): void;
    deleteColumn(id: number | string): void;
    deleteRow(rowIndex: number): void;
    deselectAll(): DevExpress.core.utils.DxPromise<void>;
    deselectRows(
      keys: Array<TKey>
    ): DevExpress.core.utils.DxPromise<Array<TRowData>>;
    editCell(rowIndex: number, dataField: string): void;
    editCell(rowIndex: number, visibleColumnIndex: number): void;
    editRow(rowIndex: number): void;
    endCustomLoading(): void;
    expandAdaptiveDetailRow(key: TKey): void;
    filter(): any;
    filter(filterExpr: any): void;
    focus(): void;
    focus(element: DevExpress.core.UserDefinedElement): void;
    getCellElement(
      rowIndex: number,
      dataField: string
    ): DevExpress.core.DxElement | undefined;
    getCellElement(
      rowIndex: number,
      visibleColumnIndex: number
    ): DevExpress.core.DxElement | undefined;
    getCombinedFilter(): any;
    getCombinedFilter(returnDataField: boolean): any;
    getDataSource(): DevExpress.data.DataSource<TRowData, TKey>;
    getKeyByRowIndex(rowIndex: number): TKey | undefined;
    getRowElement(
      rowIndex: number
    ): DevExpress.core.UserDefinedElementsArray | undefined;
    getRowIndexByKey(key: TKey): number;
    getScrollable(): dxScrollable;
    getVisibleColumnIndex(id: number | string): number;
    hasEditData(): boolean;
    hideColumnChooser(): void;
    isAdaptiveDetailRowExpanded(key: TKey): boolean;
    isRowFocused(key: TKey): boolean;
    isRowSelected(key: TKey): boolean;
    keyOf(obj: TRowData): TKey;
    navigateToRow(key: TKey): DevExpress.core.utils.DxPromise<void>;
    pageCount(): number;
    pageIndex(): number;
    pageIndex(newIndex: number): DevExpress.core.utils.DxPromise<void>;
    pageSize(): number;
    pageSize(value: number): void;
    refresh(): DevExpress.core.utils.DxPromise<void>;
    refresh(changesOnly: boolean): DevExpress.core.utils.DxPromise<void>;
    repaintRows(rowIndexes: Array<number>): void;
    saveEditData(): DevExpress.core.utils.DxPromise<void>;
    searchByText(text: string): void;
    selectAll(): DevExpress.core.utils.DxPromise<void>;
    selectRows(
      keys: Array<TKey>,
      preserve: boolean
    ): DevExpress.core.utils.DxPromise<Array<TRowData>>;
    selectRowsByIndexes(
      indexes: Array<number>
    ): DevExpress.core.utils.DxPromise<Array<TRowData>>;
    showColumnChooser(): void;
    state(): any;
    state(state: any): void;
    undeleteRow(rowIndex: number): void;
    updateDimensions(): void;
  }
  module dxTreeList {
    export type AdaptiveDetailRowPreparingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.AdaptiveDetailRowPreparingInfo;
    export type CellClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxTreeList<TRowData, TKey>> &
      CellInfo<TRowData, TKey>;
    export type CellDblClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxTreeList<TRowData, TKey>> &
      CellInfo<TRowData, TKey>;
    export type CellHoverChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      CellInfo<TRowData, TKey> & {
        readonly eventType: string;
      };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface CellInfo<TRowData = any, TKey = any> {
      readonly data: TRowData;
      readonly key: TKey;
      readonly value?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly cellElement: DevExpress.core.DxElement;
      readonly row: Row<TRowData, TKey>;
    }
    export type CellPreparedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      CellInfo<TRowData, TKey> & {
        readonly isSelected?: boolean;
        readonly isExpanded?: boolean;
        readonly isNewRow?: boolean;
        readonly watch?: Function;
        readonly oldValue?: any;
      };
    /**
     * [descr:Column]
     */
    export interface Column<TRowData = any, TKey = any>
      extends DevExpress.ui.dxDataGrid.ColumnBase<TRowData> {
      /**
       * [descr:dxTreeListColumn.buttons]
       */
      buttons?: Array<
        | 'add'
        | 'cancel'
        | 'delete'
        | 'edit'
        | 'save'
        | 'undelete'
        | ColumnButton<TRowData, TKey>
      >;
      /**
       * [descr:dxTreeListColumn.cellTemplate]
       */
      cellTemplate?:
        | DevExpress.core.template
        | ((
            cellElement: DevExpress.core.DxElement,
            cellInfo: ColumnCellTemplateData<TRowData, TKey>
          ) => any);
      /**
       * [descr:dxTreeListColumn.columns]
       */
      columns?: Array<Column<TRowData, TKey> | string>;
      /**
       * [descr:dxTreeListColumn.editCellTemplate]
       */
      editCellTemplate?:
        | DevExpress.core.template
        | ((
            cellElement: DevExpress.core.DxElement,
            cellInfo: ColumnEditCellTemplateData<TRowData, TKey>
          ) => any);
      /**
       * [descr:dxTreeListColumn.headerCellTemplate]
       */
      headerCellTemplate?:
        | DevExpress.core.template
        | ((
            columnHeader: DevExpress.core.DxElement,
            headerInfo: ColumnHeaderCellTemplateData<TRowData, TKey>
          ) => any);
      /**
       * [descr:dxTreeListColumn.type]
       */
      type?: 'adaptive' | 'buttons' | 'drag';
    }
    /**
     * [descr:ColumnButton]
     */
    export interface ColumnButton<TRowData = any, TKey = any>
      extends DevExpress.ui.dxDataGrid.ColumnButtonBase {
      /**
       * [descr:dxTreeListColumnButton.name]
       */
      name?:
        | 'add'
        | 'cancel'
        | 'delete'
        | 'edit'
        | 'save'
        | 'undelete'
        | string;
      /**
       * [descr:dxTreeListColumnButton.onClick]
       */
      onClick?: (e: ColumnButtonClickEvent<TRowData, TKey>) => void;
      /**
       * [descr:dxTreeListColumnButton.template]
       */
      template?:
        | DevExpress.core.template
        | ((
            cellElement: DevExpress.core.DxElement,
            cellInfo: ColumnButtonTemplateData<TRowData, TKey>
          ) => string | DevExpress.core.UserDefinedElement);
      /**
       * [descr:dxTreeListColumnButton.visible]
       */
      visible?:
        | boolean
        | ((options: {
            readonly component: dxTreeList<TRowData, TKey>;
            readonly row?: Row<TRowData, TKey>;
            readonly column: Column<TRowData, TKey>;
          }) => boolean);
      /**
       * [descr:dxTreeListColumnButton.disabled]
       */
      disabled?:
        | boolean
        | ((options: {
            readonly component: dxTreeList<TRowData, TKey>;
            readonly row?: Row<TRowData, TKey>;
            readonly column: Column<TRowData, TKey>;
          }) => boolean);
    }
    export type ColumnButtonClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxTreeList<TRowData, TKey>> & {
      row?: Row<TRowData, TKey>;
      column?: Column<TRowData, TKey>;
    };
    export type ColumnButtonTemplateData<TRowData = any, TKey = any> = {
      readonly component: dxTreeList<TRowData, TKey>;
      readonly data: TRowData;
      readonly key: TKey;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly row: Row<TRowData, TKey>;
    };
    export type ColumnCellTemplateData<TRowData = any, TKey = any> = {
      readonly data: TRowData;
      readonly component: dxTreeList<TRowData, TKey>;
      readonly value?: any;
      readonly oldValue?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly row: Row<TRowData, TKey>;
      readonly rowType: string;
      readonly watch?: Function;
    };
    export type ColumnEditCellTemplateData<TRowData = any, TKey = any> = {
      readonly setValue?: any;
      readonly data: TRowData;
      readonly component: dxTreeList<TRowData, TKey>;
      readonly value?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly row: Row<TRowData, TKey>;
      readonly rowType: string;
      readonly watch?: Function;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export type ColumnHeaderCellTemplateData<TRowData = any, TKey = any> = {
      readonly component: dxTreeList<TRowData, TKey>;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
    };
    export type ContentReadyEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>>;
    export type ContextMenuPreparingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> & {
      items?: Array<any>;
      readonly target: string;
      readonly targetElement: DevExpress.core.DxElement;
      readonly columnIndex: number;
      readonly column?: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly row?: Row<TRowData, TKey>;
    };
    export type DataErrorOccurredEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.DataErrorOccurredInfo;
    export type DisposingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    type dxTreeListDefaultToolbarItemName =
      | 'addRowButton'
      | 'applyFilterButton'
      | 'columnChooserButton'
      | 'revertButton'
      | 'saveButton'
      | 'searchPanel';
    export type EditCanceledEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.DataChangeInfo<TRowData, TKey>;
    export type EditCancelingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.DataChangeInfo<TRowData, TKey>;
    export interface Editing<TRowData = any, TKey = any>
      extends DevExpress.ui.dxDataGrid.EditingBase<TRowData, TKey> {
      /**
       * [descr:dxTreeListOptions.editing.allowAdding]
       */
      allowAdding?:
        | boolean
        | ((options: {
            readonly component: dxTreeList<TRowData, TKey>;
            readonly row?: Row<TRowData, TKey>;
          }) => boolean);
      /**
       * [descr:dxTreeListOptions.editing.allowDeleting]
       */
      allowDeleting?:
        | boolean
        | ((options: {
            readonly component: dxTreeList<TRowData, TKey>;
            readonly row?: Row<TRowData, TKey>;
          }) => boolean);
      /**
       * [descr:dxTreeListOptions.editing.allowUpdating]
       */
      allowUpdating?:
        | boolean
        | ((options: {
            readonly component: dxTreeList<TRowData, TKey>;
            readonly row?: Row<TRowData, TKey>;
          }) => boolean);
      /**
       * [descr:dxTreeListOptions.editing.texts]
       */
      texts?: EditingTexts;
    }
    export type EditingStartEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> & {
        readonly data: TRowData;
        readonly key: TKey;
        readonly column: Column<TRowData, TKey>;
      };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface EditingTexts
      extends DevExpress.ui.dxDataGrid.EditingTextsBase {
      /**
       * [descr:dxTreeListOptions.editing.texts.addRowToNode]
       */
      addRowToNode?: string;
    }
    export type EditorPreparedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> & {
      readonly parentType: string;
      readonly value?: any;
      readonly setValue?: any;
      readonly updateValueTimeout?: number;
      readonly width?: number;
      readonly disabled: boolean;
      readonly rtlEnabled: boolean;
      readonly editorElement: DevExpress.core.DxElement;
      readonly readOnly: boolean;
      readonly dataField?: string;
      readonly row?: Row<TRowData, TKey>;
    };
    export type EditorPreparingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> & {
        readonly parentType: string;
        readonly value?: any;
        readonly setValue?: any;
        updateValueTimeout?: number;
        readonly width?: number;
        readonly disabled: boolean;
        readonly rtlEnabled: boolean;
        readonly editorElement: DevExpress.core.DxElement;
        readonly readOnly: boolean;
        editorName: string;
        editorOptions: any;
        readonly dataField?: string;
        readonly row?: Row<TRowData, TKey>;
      };
    export type ExplicitTypes<TRowData, TKey> = {
      AdaptiveDetailRowPreparingEvent: AdaptiveDetailRowPreparingEvent<
        TRowData,
        TKey
      >;
      CellClickEvent: CellClickEvent<TRowData, TKey>;
      CellDblClickEvent: CellDblClickEvent<TRowData, TKey>;
      CellHoverChangedEvent: CellHoverChangedEvent<TRowData, TKey>;
      CellPreparedEvent: CellPreparedEvent<TRowData, TKey>;
      ColumnButtonClickEvent: ColumnButtonClickEvent<TRowData, TKey>;
      ColumnButtonTemplateData: ColumnButtonTemplateData<TRowData, TKey>;
      ColumnCellTemplateData: ColumnCellTemplateData<TRowData, TKey>;
      ColumnEditCellTemplateData: ColumnEditCellTemplateData<TRowData, TKey>;
      ContentReadyEvent: ContentReadyEvent<TRowData, TKey>;
      ContextMenuPreparingEvent: ContextMenuPreparingEvent<TRowData, TKey>;
      DataErrorOccurredEvent: DataErrorOccurredEvent<TRowData, TKey>;
      DisposingEvent: DisposingEvent<TRowData, TKey>;
      EditCanceledEvent: EditCanceledEvent<TRowData, TKey>;
      EditCancelingEvent: EditCancelingEvent<TRowData, TKey>;
      Editing: Editing<TRowData, TKey>;
      EditingStartEvent: EditingStartEvent<TRowData, TKey>;
      EditorPreparedEvent: EditorPreparedEvent<TRowData, TKey>;
      EditorPreparingEvent: EditorPreparingEvent<TRowData, TKey>;
      FocusedCellChangedEvent: FocusedCellChangedEvent<TRowData, TKey>;
      FocusedCellChangingEvent: FocusedCellChangingEvent<TRowData, TKey>;
      FocusedRowChangedEvent: FocusedRowChangedEvent<TRowData, TKey>;
      FocusedRowChangingEvent: FocusedRowChangingEvent<TRowData, TKey>;
      InitializedEvent: InitializedEvent<TRowData, TKey>;
      InitNewRowEvent: InitNewRowEvent<TRowData, TKey>;
      KeyDownEvent: KeyDownEvent<TRowData, TKey>;
      NodesInitializedEvent: NodesInitializedEvent<TRowData, TKey>;
      OptionChangedEvent: OptionChangedEvent<TRowData, TKey>;
      Properties: Properties<TRowData, TKey>;
      RowClickEvent: RowClickEvent<TRowData, TKey>;
      RowCollapsedEvent: RowCollapsedEvent<TRowData, TKey>;
      RowCollapsingEvent: RowCollapsingEvent<TRowData, TKey>;
      RowDblClickEvent: RowDblClickEvent<TRowData, TKey>;
      RowDraggingAddEvent: RowDraggingAddEvent<TRowData, TKey>;
      RowDraggingChangeEvent: RowDraggingChangeEvent<TRowData, TKey>;
      RowDraggingEndEvent: RowDraggingEndEvent<TRowData, TKey>;
      RowDraggingMoveEvent: RowDraggingMoveEvent<TRowData, TKey>;
      RowDraggingRemoveEvent: RowDraggingRemoveEvent<TRowData, TKey>;
      RowDraggingReorderEvent: RowDraggingReorderEvent<TRowData, TKey>;
      RowDraggingStartEvent: RowDraggingStartEvent<TRowData, TKey>;
      RowDraggingTemplateData: RowDraggingTemplateData<TRowData>;
      RowExpandedEvent: RowExpandedEvent<TRowData, TKey>;
      RowExpandingEvent: RowExpandingEvent<TRowData, TKey>;
      RowInsertedEvent: RowInsertedEvent<TRowData, TKey>;
      RowInsertingEvent: RowInsertingEvent<TRowData, TKey>;
      RowPreparedEvent: RowPreparedEvent<TRowData, TKey>;
      RowRemovedEvent: RowRemovedEvent<TRowData, TKey>;
      RowRemovingEvent: RowRemovingEvent<TRowData, TKey>;
      RowUpdatedEvent: RowUpdatedEvent<TRowData, TKey>;
      RowUpdatingEvent: RowUpdatingEvent<TRowData, TKey>;
      RowValidatingEvent: RowValidatingEvent<TRowData, TKey>;
      SavedEvent: SavedEvent<TRowData, TKey>;
      SavingEvent: SavingEvent<TRowData, TKey>;
      Scrolling: Scrolling;
      Selection: Selection;
      SelectionChangedEvent: SelectionChangedEvent<TRowData, TKey>;
      ToolbarPreparingEvent: ToolbarPreparingEvent<TRowData, TKey>;
    };
    export type FocusedCellChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> & {
      readonly cellElement: DevExpress.core.DxElement;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly row: Row<TRowData, TKey>;
      readonly column: Column<TRowData, TKey>;
    };
    export type FocusedCellChangingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxTreeList<TRowData, TKey>> & {
        readonly cellElement: DevExpress.core.DxElement;
        readonly prevColumnIndex: number;
        readonly prevRowIndex: number;
        newColumnIndex: number;
        newRowIndex: number;
        readonly rows: Array<Row<TRowData, TKey>>;
        readonly columns: Array<Column<TRowData, TKey>>;
        isHighlighted: boolean;
      };
    export type FocusedRowChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> & {
      readonly rowElement: DevExpress.core.DxElement;
      readonly rowIndex: number;
      readonly row: Row<TRowData, TKey>;
    };
    export type FocusedRowChangingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxTreeList<TRowData, TKey>> & {
      readonly rowElement: DevExpress.core.DxElement;
      readonly prevRowIndex: number;
      newRowIndex: number;
      readonly rows: Array<Row<TRowData, TKey>>;
    };
    export type InitializedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.InitializedEventInfo<dxTreeList<TRowData, TKey>>;
    export type InitNewRowEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.NewRowInfo<TRowData>;
    export type KeyDownEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.KeyDownInfo;
    /**
     * [descr:dxTreeListNode]
     */
    export interface Node<TRowData = any, TKey = any> {
      /**
       * [descr:dxTreeListNode.children]
       */
      children?: Array<Node<TRowData, TKey>>;
      /**
       * [descr:dxTreeListNode.data]
       */
      data?: TRowData;
      /**
       * [descr:dxTreeListNode.hasChildren]
       */
      hasChildren?: boolean;
      /**
       * [descr:dxTreeListNode.key]
       */
      key: TKey;
      /**
       * [descr:dxTreeListNode.level]
       */
      level: number;
      /**
       * [descr:dxTreeListNode.parent]
       */
      parent?: Node<TRowData, TKey>;
      /**
       * [descr:dxTreeListNode.visible]
       */
      visible?: boolean;
    }
    export type NodesInitializedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> & {
      readonly root: Node<TRowData, TKey>;
    };
    export type OptionChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface Paging extends DevExpress.ui.dxDataGrid.PagingBase {
      /**
       * [descr:dxTreeListOptions.paging.enabled]
       */
      enabled?: boolean;
    }
    /**
     * [descr:Properties]
     */
    export interface Properties<TRowData = any, TKey = any>
      extends GridBaseOptions<dxTreeList<TRowData, TKey>, TRowData, TKey> {
      /**
       * [descr:Properties.autoExpandAll]
       */
      autoExpandAll?: boolean;
      /**
       * [descr:Properties.columns]
       */
      columns?: Array<Column<TRowData, TKey> | string>;
      /**
       * [descr:Properties.customizeColumns]
       */
      customizeColumns?: (columns: Array<Column<TRowData, TKey>>) => void;
      /**
       * [descr:Properties.dataStructure]
       */
      dataStructure?: 'plain' | 'tree';
      /**
       * [descr:Properties.editing]
       */
      editing?: Editing<TRowData, TKey>;
      /**
       * [descr:Properties.expandNodesOnFiltering]
       */
      expandNodesOnFiltering?: boolean;
      /**
       * [descr:Properties.expandedRowKeys]
       */
      expandedRowKeys?: Array<TKey>;
      /**
       * [descr:Properties.filterMode]
       */
      filterMode?: 'fullBranch' | 'withAncestors' | 'matchOnly';
      /**
       * [descr:Properties.hasItemsExpr]
       */
      hasItemsExpr?: string | Function;
      /**
       * [descr:Properties.itemsExpr]
       */
      itemsExpr?: string | Function;
      /**
       * [descr:Properties.keyExpr]
       */
      keyExpr?: string | Function;
      /**
       * [descr:Properties.onCellClick]
       */
      onCellClick?: (e: CellClickEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onCellDblClick]
       */
      onCellDblClick?: (e: CellDblClickEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onCellHoverChanged]
       */
      onCellHoverChanged?: (e: CellHoverChangedEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onCellPrepared]
       */
      onCellPrepared?: (e: CellPreparedEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onContextMenuPreparing]
       */
      onContextMenuPreparing?: (
        e: ContextMenuPreparingEvent<TRowData, TKey>
      ) => void;
      /**
       * [descr:Properties.onEditingStart]
       */
      onEditingStart?: (e: EditingStartEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onEditorPrepared]
       */
      onEditorPrepared?: (options: EditorPreparedEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onEditorPreparing]
       */
      onEditorPreparing?: (e: EditorPreparingEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onFocusedCellChanged]
       */
      onFocusedCellChanged?: (
        e: FocusedCellChangedEvent<TRowData, TKey>
      ) => void;
      /**
       * [descr:Properties.onFocusedCellChanging]
       */
      onFocusedCellChanging?: (
        e: FocusedCellChangingEvent<TRowData, TKey>
      ) => void;
      /**
       * [descr:Properties.onFocusedRowChanged]
       */
      onFocusedRowChanged?: (e: FocusedRowChangedEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onFocusedRowChanging]
       */
      onFocusedRowChanging?: (
        e: FocusedRowChangingEvent<TRowData, TKey>
      ) => void;
      /**
       * [descr:Properties.onNodesInitialized]
       */
      onNodesInitialized?: (e: NodesInitializedEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onRowClick]
       */
      onRowClick?: (e: RowClickEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onRowDblClick]
       */
      onRowDblClick?: (e: RowDblClickEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.onRowPrepared]
       */
      onRowPrepared?: (e: RowPreparedEvent<TRowData, TKey>) => void;
      /**
       * [descr:Properties.paging]
       */
      paging?: Paging;
      /**
       * [descr:Properties.parentIdExpr]
       */
      parentIdExpr?: string | Function;
      /**
       * [descr:Properties.remoteOperations]
       */
      remoteOperations?:
        | {
            /**
             * [descr:Properties.remoteOperations.filtering]
             */
            filtering?: boolean;
            /**
             * [descr:Properties.remoteOperations.grouping]
             */
            grouping?: boolean;
            /**
             * [descr:Properties.remoteOperations.sorting]
             */
            sorting?: boolean;
          }
        | 'auto';
      /**
       * [descr:Properties.rootValue]
       */
      rootValue?: TKey;
      /**
       * [descr:Properties.scrolling]
       */
      scrolling?: Scrolling;
      /**
       * [descr:Properties.selection]
       */
      selection?: Selection;
      /**
       * [descr:Properties.toolbar]
       */
      toolbar?: dxTreeListToolbar;
    }
    /**
     * [descr:dxTreeListRowObject]
     */
    export interface Row<TRowData = any, TKey = any> {
      /**
       * [descr:dxTreeListRowObject.isEditing]
       */
      readonly isEditing?: boolean;
      /**
       * [descr:dxTreeListRowObject.isExpanded]
       */
      readonly isExpanded?: boolean;
      /**
       * [descr:dxTreeListRowObject.isNewRow]
       */
      readonly isNewRow?: boolean;
      /**
       * [descr:dxTreeListRowObject.isSelected]
       */
      readonly isSelected?: boolean;
      /**
       * [descr:dxTreeListRowObject.key]
       */
      readonly key: TKey;
      /**
       * [descr:dxTreeListRowObject.level]
       */
      readonly level: number;
      /**
       * [descr:dxTreeListRowObject.node]
       */
      readonly node: Node<TRowData, TKey>;
      /**
       * [descr:dxTreeListRowObject.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:dxTreeListRowObject.rowType]
       */
      readonly rowType: string;
      /**
       * [descr:dxTreeListRowObject.values]
       */
      readonly values: Array<any>;
      /**
       * [descr:dxTreeListRowObject.data]
       */
      readonly data: TRowData;
    }
    export type RowClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxTreeList<TRowData, TKey>> & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly values: Array<any>;
      readonly columns: Array<Column<TRowData, TKey>>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly isSelected?: boolean;
      readonly isExpanded?: boolean;
      readonly isNewRow?: boolean;
      readonly rowElement: DevExpress.core.DxElement;
      readonly handled: boolean;
      readonly node: Node<TRowData, TKey>;
      readonly level: number;
    };
    export type RowCollapsedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowKeyInfo<TKey>;
    export type RowCollapsingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowKeyInfo<TKey>;
    export type RowDblClickEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.NativeEventInfo<dxTreeList<TRowData, TKey>> & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly values: Array<any>;
      readonly columns: Array<Column<TRowData, TKey>>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly isSelected?: boolean;
      readonly isExpanded?: boolean;
      readonly isNewRow?: boolean;
      readonly rowElement: DevExpress.core.DxElement;
    };
    export type RowDraggingAddEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.ui.dxDataGrid.RowDraggingEventInfo<
      dxTreeList<TRowData, TKey>,
      TRowData,
      TKey
    > &
      DevExpress.ui.dxDataGrid.DragDropInfo;
    export type RowDraggingChangeEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.ui.dxDataGrid.RowDraggingEventInfo<
        dxTreeList<TRowData, TKey>,
        TRowData,
        TKey
      > &
      DevExpress.ui.dxDataGrid.DragDropInfo;
    export type RowDraggingEndEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.ui.dxDataGrid.RowDraggingEventInfo<
        dxTreeList<TRowData, TKey>,
        TRowData,
        TKey
      > &
      DevExpress.ui.dxDataGrid.DragDropInfo;
    export type RowDraggingMoveEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.ui.dxDataGrid.RowDraggingEventInfo<
        dxTreeList<TRowData, TKey>,
        TRowData,
        TKey
      > &
      DevExpress.ui.dxDataGrid.DragDropInfo;
    export type RowDraggingRemoveEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.ui.dxDataGrid.RowDraggingEventInfo<
      dxTreeList<TRowData, TKey>,
      TRowData,
      TKey
    >;
    export type RowDraggingReorderEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.ui.dxDataGrid.RowDraggingEventInfo<
      dxTreeList<TRowData, TKey>,
      TRowData,
      TKey
    > &
      DevExpress.ui.dxDataGrid.DragReorderInfo;
    export type RowDraggingStartEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.ui.dxDataGrid.DragStartEventInfo<
        dxTreeList<TRowData, TKey>,
        TRowData,
        TKey
      >;
    export type RowDraggingTemplateData<TRowData = any> =
      DevExpress.ui.dxDataGrid.RowDraggingTemplateDataModel<TRowData>;
    export type RowExpandedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowKeyInfo<TKey>;
    export type RowExpandingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.Cancelable &
      DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowKeyInfo<TKey>;
    export type RowInsertedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowInsertedInfo<TRowData, TKey>;
    export type RowInsertingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowInsertingInfo<TRowData>;
    export type RowPreparedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> & {
      readonly data: TRowData;
      readonly key: TKey;
      readonly values: Array<any>;
      readonly columns: Array<Column<TRowData, TKey>>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly isSelected?: boolean;
      readonly isExpanded?: boolean;
      readonly isNewRow?: boolean;
      readonly rowElement: DevExpress.core.DxElement;
      readonly node: Node<TRowData, TKey>;
      readonly level: number;
    };
    export type RowRemovedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowRemovedInfo<TRowData, TKey>;
    export type RowRemovingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowRemovingInfo<TRowData, TKey>;
    export type RowUpdatedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowUpdatedInfo<TRowData, TKey>;
    export type RowUpdatingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowUpdatingInfo<TRowData, TKey>;
    export type RowValidatingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.RowValidatingInfo<TRowData, TKey>;
    export type SavedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.DataChangeInfo<TRowData, TKey>;
    export type SavingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.SavingInfo<TRowData, TKey>;
    export interface Scrolling extends DevExpress.ui.dxDataGrid.ScrollingBase {
      /**
       * [descr:dxTreeListOptions.scrolling.mode]
       */
      mode?: 'standard' | 'virtual';
    }
    export interface Selection extends DevExpress.ui.dxDataGrid.SelectionBase {
      /**
       * [descr:dxTreeListOptions.selection.recursive]
       */
      recursive?: boolean;
    }
    export type SelectionChangedEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.SelectionChangedInfo<TRowData, TKey>;
    export type ToolbarPreparingEvent<
      TRowData = any,
      TKey = any
    > = DevExpress.events.EventInfo<dxTreeList<TRowData, TKey>> &
      DevExpress.ui.dxDataGrid.ToolbarPreparingInfo;
  }
  /**
   * @deprecated Use DevExpress.ui.dxTreeList.Editing instead
   */
  export type dxTreeListEditing<
    TRowData = any,
    TKey = any
  > = DevExpress.ui.dxTreeList.Editing<TRowData, TKey>;
  /**
   * @deprecated 
   */
  export type dxTreeListEditingTexts = DevExpress.ui.dxTreeList.EditingTexts;
  /**
   * @deprecated Use DevExpress.ui.dxTreeList.Node instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type dxTreeListNode<
    TRowData = any,
    TKey = any
  > = DevExpress.ui.dxTreeList.Node<TRowData, TKey>;
  /**
   * @deprecated 
   */
  export type dxTreeListPaging = DevExpress.ui.dxTreeList.Paging;
  /**
   * @deprecated Use DevExpress.ui.dxTreeList.Scrolling instead
   */
  export type dxTreeListScrolling = DevExpress.ui.dxTreeList.Scrolling;
  /**
   * @deprecated Use DevExpress.ui.dxTreeList.Selection instead
   */
  export type dxTreeListSelection = DevExpress.ui.dxTreeList.Selection;
  /**
   * [descr:dxTreeListToolbar]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxTreeListToolbar {
    /**
     * [descr:dxTreeListToolbar.items]
     */
    items?: (
      | DevExpress.ui.dxTreeList.dxTreeListDefaultToolbarItemName
      | dxTreeListToolbarItem
    )[];
    /**
     * [descr:dxTreeListToolbar.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxTreeListToolbar.disabled]
     */
    disabled?: boolean;
  }
  /**
   * [descr:dxTreeListToolbarItem]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxTreeListToolbarItem extends DevExpress.ui.dxToolbar.Item {
    /**
     * [descr:dxTreeListToolbarItem.name]
     */
    name?: DevExpress.ui.dxTreeList.dxTreeListDefaultToolbarItemName | string;
    /**
     * [descr:dxTreeListToolbarItem.location]
     */
    location?: 'after' | 'before' | 'center';
  }
  /**
   * [descr:dxTreeView]
   */
  export class dxTreeView extends HierarchicalCollectionWidget<DevExpress.ui.dxTreeView.Properties> {
    /**
     * [descr:dxTreeView.collapseAll()]
     */
    collapseAll(): void;
    /**
     * [descr:dxTreeView.collapseItem(itemData)]
     */
    collapseItem(itemData: any): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxTreeView.collapseItem(itemElement)]
     */
    collapseItem(itemElement: Element): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxTreeView.collapseItem(key)]
     */
    collapseItem(key: any): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxTreeView.expandAll()]
     */
    expandAll(): void;
    /**
     * [descr:dxTreeView.expandItem(itemData)]
     */
    expandItem(itemData: any): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxTreeView.expandItem(itemElement)]
     */
    expandItem(itemElement: Element): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxTreeView.expandItem(key)]
     */
    expandItem(key: any): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxTreeView.getNodes()]
     */
    getNodes(): Array<DevExpress.ui.dxTreeView.Node>;
    /**
     * [descr:dxTreeView.getSelectedNodes()]
     */
    getSelectedNodes(): Array<DevExpress.ui.dxTreeView.Node>;
    /**
     * [descr:dxTreeView.getSelectedNodeKeys()]
     */
    getSelectedNodeKeys(): Array<any>;
    /**
     * [descr:dxTreeView.selectAll()]
     */
    selectAll(): void;
    /**
     * [descr:dxTreeView.selectItem(itemData)]
     */
    selectItem(itemData: any): boolean;
    /**
     * [descr:dxTreeView.selectItem(itemElement)]
     */
    selectItem(itemElement: Element): boolean;
    /**
     * [descr:dxTreeView.selectItem(key)]
     */
    selectItem(key: any): boolean;
    /**
     * [descr:dxTreeView.unselectAll()]
     */
    unselectAll(): void;
    /**
     * [descr:dxTreeView.unselectItem(itemData)]
     */
    unselectItem(itemData: any): boolean;
    /**
     * [descr:dxTreeView.unselectItem(itemElement)]
     */
    unselectItem(itemElement: Element): boolean;
    /**
     * [descr:dxTreeView.unselectItem(key)]
     */
    unselectItem(key: any): boolean;
    /**
     * [descr:dxTreeView.updateDimensions()]
     */
    updateDimensions(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxTreeView.scrollToItem(itemData)]
     */
    scrollToItem(itemData: any): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxTreeView.scrollToItem(itemElement)]
     */
    scrollToItem(itemElement: Element): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:dxTreeView.scrollToItem(key)]
     */
    scrollToItem(key: any): DevExpress.core.utils.DxPromise<void>;
  }
  module dxTreeView {
    export type ContentReadyEvent = DevExpress.events.EventInfo<dxTreeView>;
    export type DisposingEvent = DevExpress.events.EventInfo<dxTreeView>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxTreeView>;
    export type ItemClickEvent =
      DevExpress.events.NativeEventInfo<dxTreeView> & {
        readonly itemData?: any;
        readonly itemElement?: DevExpress.core.DxElement;
        readonly itemIndex?: number;
        readonly node?: Node;
      };
    export type ItemCollapsedEvent =
      DevExpress.events.NativeEventInfo<dxTreeView> & {
        readonly itemData?: any;
        readonly itemElement?: DevExpress.core.DxElement;
        readonly itemIndex?: number;
        readonly node?: Node;
      };
    export type ItemContextMenuEvent =
      DevExpress.events.NativeEventInfo<dxTreeView> & {
        readonly itemData?: any;
        readonly itemElement?: DevExpress.core.DxElement;
        readonly itemIndex?: number;
        readonly node?: Node;
      };
    export type ItemExpandedEvent =
      DevExpress.events.NativeEventInfo<dxTreeView> & {
        readonly itemData?: any;
        readonly itemElement?: DevExpress.core.DxElement;
        readonly itemIndex?: number;
        readonly node?: Node;
      };
    export type ItemHoldEvent =
      DevExpress.events.NativeEventInfo<dxTreeView> & {
        readonly itemData?: any;
        readonly itemElement?: DevExpress.core.DxElement;
        readonly itemIndex?: number;
        readonly node?: Node;
      };
    export type ItemRenderedEvent =
      DevExpress.events.NativeEventInfo<dxTreeView> & {
        readonly itemData?: any;
        readonly itemElement?: DevExpress.core.DxElement;
        readonly itemIndex?: number;
        readonly node?: Node;
      };
    export type ItemSelectionChangedEvent =
      DevExpress.events.EventInfo<dxTreeView> & {
        readonly node?: Node;
        readonly itemElement?: DevExpress.core.DxElement;
        readonly itemData?: any;
        readonly itemIndex?: number;
      };
    /**
     * [descr:Node]
     */
    export interface Node {
      /**
       * [descr:Node.children]
       */
      children?: Array<Node>;
      /**
       * [descr:Node.disabled]
       */
      disabled?: boolean;
      /**
       * [descr:Node.expanded]
       */
      expanded?: boolean;
      /**
       * [descr:Node.itemData]
       */
      itemData?: any;
      /**
       * [descr:Node.key]
       */
      key?: any;
      /**
       * [descr:Node.parent]
       */
      parent?: Node;
      /**
       * [descr:Node.selected]
       */
      selected?: boolean;
      /**
       * [descr:Node.text]
       */
      text?: string;
    }
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxTreeView> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties
      extends DevExpress.core.Skip<
          HierarchicalCollectionWidgetOptions<dxTreeView>,
          'dataSource'
        >,
        SearchBoxMixinOptions {
      /**
       * [descr:Properties.animationEnabled]
       */
      animationEnabled?: boolean;
      /**
       * [descr:Properties.createChildren]
       */
      createChildren?: (parentNode: Node) => PromiseLike<any> | Array<any>;
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<Item>;
      /**
       * [descr:Properties.dataStructure]
       */
      dataStructure?: 'plain' | 'tree';
      /**
       * [descr:Properties.expandAllEnabled]
       */
      expandAllEnabled?: boolean;
      /**
       * [descr:Properties.expandEvent]
       */
      expandEvent?: 'dblclick' | 'click';
      /**
       * [descr:Properties.expandNodesRecursive]
       */
      expandNodesRecursive?: boolean;
      /**
       * [descr:Properties.expandedExpr]
       */
      expandedExpr?: string | Function;
      /**
       * [descr:Properties.hasItemsExpr]
       */
      hasItemsExpr?: string | Function;
      /**
       * [descr:Properties.items]
       */
      items?: Array<Item>;
      /**
       * [descr:Properties.onItemClick]
       */
      onItemClick?: (e: ItemClickEvent) => void;
      /**
       * [descr:Properties.onItemCollapsed]
       */
      onItemCollapsed?: (e: ItemCollapsedEvent) => void;
      /**
       * [descr:Properties.onItemContextMenu]
       */
      onItemContextMenu?: (e: ItemContextMenuEvent) => void;
      /**
       * [descr:Properties.onItemExpanded]
       */
      onItemExpanded?: (e: ItemExpandedEvent) => void;
      /**
       * [descr:Properties.onItemHold]
       */
      onItemHold?: (e: ItemHoldEvent) => void;
      /**
       * [descr:Properties.onItemRendered]
       */
      onItemRendered?: (e: ItemRenderedEvent) => void;
      /**
       * [descr:Properties.onItemSelectionChanged]
       */
      onItemSelectionChanged?: (e: ItemSelectionChangedEvent) => void;
      /**
       * [descr:Properties.onSelectAllValueChanged]
       */
      onSelectAllValueChanged?: (e: SelectAllValueChangedEvent) => void;
      /**
       * [descr:Properties.onSelectionChanged]
       */
      onSelectionChanged?: (e: SelectionChangedEvent) => void;
      /**
       * [descr:Properties.parentIdExpr]
       */
      parentIdExpr?: string | Function;
      /**
       * [descr:Properties.rootValue]
       */
      rootValue?: any;
      /**
       * [descr:Properties.scrollDirection]
       */
      scrollDirection?: 'both' | 'horizontal' | 'vertical';
      /**
       * [descr:Properties.selectAllText]
       */
      selectAllText?: string;
      /**
       * [descr:Properties.selectByClick]
       */
      selectByClick?: boolean;
      /**
       * [descr:Properties.selectNodesRecursive]
       */
      selectNodesRecursive?: boolean;
      /**
       * [descr:Properties.selectionMode]
       */
      selectionMode?: 'multiple' | 'single';
      /**
       * [descr:Properties.showCheckBoxesMode]
       */
      showCheckBoxesMode?: 'none' | 'normal' | 'selectAll';
      /**
       * [descr:Properties.virtualModeEnabled]
       */
      virtualModeEnabled?: boolean;
      /**
       * [descr:Properties.useNativeScrolling]
       */
      useNativeScrolling?: boolean;
    }
    export type SelectAllValueChangedEvent =
      DevExpress.events.EventInfo<dxTreeView> & {
        readonly value?: boolean | undefined;
      };
    export type SelectionChangedEvent = DevExpress.events.EventInfo<dxTreeView>;
  }
  /**
   * [descr:dxValidationGroup]
   */
  export class dxValidationGroup extends DOMComponent<DevExpress.ui.dxValidationGroup.Properties> {
    /**
     * [descr:dxValidationGroup.reset()]
     */
    reset(): void;
    /**
     * [descr:dxValidationGroup.validate()]
     */
    validate(): DevExpress.ui.dxValidationGroup.ValidationResult;
  }
  module dxValidationGroup {
    export type DisposingEvent = DevExpress.events.EventInfo<dxValidationGroup>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxValidationGroup>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxValidationGroup> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties
      extends DOMComponentOptions<dxValidationGroup> {}
    /**
     * [descr:ValidationResult]
     */
    export interface ValidationResult {
      /**
       * [descr:ValidationResult.brokenRules]
       */
      brokenRules?: Array<
        | RequiredRule
        | NumericRule
        | RangeRule
        | StringLengthRule
        | CustomRule
        | CompareRule
        | PatternRule
        | EmailRule
        | AsyncRule
      >;
      /**
       * [descr:ValidationResult.complete]
       */
      complete?: DevExpress.core.utils.DxPromise<ValidationResult>;
      /**
       * [descr:ValidationResult.isValid]
       */
      isValid?: boolean;
      /**
       * [descr:ValidationResult.status]
       */
      status?: 'valid' | 'invalid' | 'pending';
      /**
       * [descr:ValidationResult.validators]
       */
      validators?: Array<any>;
    }
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class dxValidationMessage extends dxOverlay<DevExpress.ui.dxValidationMessage.Properties> {}
  module dxValidationMessage {
    /**
     * [descr:Properties]
     */
    export interface Properties extends dxOverlayOptions<dxValidationMessage> {
      mode?: string;

      validationErrors?: Array<object> | null;

      positionRequest?: string;

      boundary?: String | DevExpress.core.UserDefinedElement;

      offset?: object;
    }
  }
  /**
   * [descr:dxValidationSummary]
   */
  export class dxValidationSummary extends CollectionWidget<DevExpress.ui.dxValidationSummary.Properties> {}
  module dxValidationSummary {
    export type ContentReadyEvent =
      DevExpress.events.EventInfo<dxValidationSummary>;
    export type DisposingEvent =
      DevExpress.events.EventInfo<dxValidationSummary>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxValidationSummary>;
    export type ItemClickEvent =
      DevExpress.events.NativeEventInfo<dxValidationSummary> &
        DevExpress.events.ItemInfo;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxValidationSummary> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties
      extends CollectionWidgetOptions<dxValidationSummary> {
      /**
       * [descr:Properties.validationGroup]
       */
      validationGroup?: string;
    }
  }
  /**
   * [descr:dxValidator]
   */
  export class dxValidator extends DOMComponent<DevExpress.ui.dxValidator.Properties> {
    /**
     * [descr:dxValidator.focus()]
     */
    focus(): void;
    /**
     * [descr:dxValidator.reset()]
     */
    reset(): void;
    /**
     * [descr:dxValidator.validate()]
     */
    validate(): DevExpress.ui.dxValidator.ValidationResult;
  }
  module dxValidator {
    export type DisposingEvent = DevExpress.events.EventInfo<dxValidator>;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxValidator>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxValidator> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends DOMComponentOptions<dxValidator> {
      /**
       * [descr:Properties.adapter]
       */
      adapter?: {
        /**
         * [descr:Properties.adapter.applyValidationResults]
         */
        applyValidationResults?: Function;
        /**
         * [descr:Properties.adapter.bypass]
         */
        bypass?: Function;
        /**
         * [descr:Properties.adapter.focus]
         */
        focus?: Function;
        /**
         * [descr:Properties.adapter.getValue]
         */
        getValue?: Function;
        /**
         * [descr:Properties.adapter.reset]
         */
        reset?: Function;
        /**
         * [descr:Properties.adapter.validationRequestsCallbacks]
         */
        validationRequestsCallbacks?: Array<Function>;
      };
      /**
       * [descr:Properties.name]
       */
      name?: string;
      /**
       * [descr:Properties.onValidated]
       */
      onValidated?: (validatedInfo: ValidatedEvent) => void;
      /**
       * [descr:Properties.validationGroup]
       */
      validationGroup?: string;
      /**
       * [descr:Properties.validationRules]
       */
      validationRules?: Array<ValidationRule>;
    }
    export type ValidatedEvent = {
      name?: string;
      isValid?: boolean;
      value?: any;
      validationRules?: Array<ValidationRule>;
      brokenRule?: ValidationRule;
      brokenRules?: ValidationRule;
      status?: 'valid' | 'invalid' | 'pending';
    };
    /**
     * [descr:ValidationResult]
     */
    export interface ValidationResult {
      /**
       * [descr:ValidationResult.brokenRule]
       */
      brokenRule?: ValidationRule;
      /**
       * [descr:ValidationResult.brokenRules]
       */
      brokenRules?: Array<ValidationRule>;
      /**
       * [descr:ValidationResult.complete]
       */
      complete?: DevExpress.core.utils.DxPromise<ValidationResult>;
      /**
       * [descr:ValidationResult.isValid]
       */
      isValid?: boolean;
      /**
       * [descr:ValidationResult.pendingRules]
       */
      pendingRules?: Array<AsyncRule>;
      /**
       * [descr:ValidationResult.status]
       */
      status?: 'valid' | 'invalid' | 'pending';
      /**
       * [descr:ValidationResult.validationRules]
       */
      validationRules?: Array<ValidationRule>;
      /**
       * [descr:ValidationResult.value]
       */
      value?: any;
    }
  }
  /**
   * [descr:Editor]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class Editor<
    TProperties = DevExpress.ui.Editor.Properties
  > extends Widget<TProperties> {
    /**
     * [descr:Editor.reset()]
     */
    reset(): void;
  }
  module Editor {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface EditorInstance extends Editor<Properties> {}
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    type Properties = EditorOptions<EditorInstance>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ValueChangedInfo {
      readonly previousValue?: any;
      readonly value?: any;
    }
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface EditorOptions<TComponent> extends WidgetOptions<TComponent> {
    /**
     * [descr:EditorOptions.isValid]
     */
    isValid?: boolean;
    /**
     * [descr:EditorOptions.onValueChanged]
     */
    onValueChanged?: (
      e: DevExpress.events.NativeEventInfo<TComponent> &
        DevExpress.ui.Editor.ValueChangedInfo
    ) => void;
    /**
     * [descr:EditorOptions.readOnly]
     */
    readOnly?: boolean;
    /**
     * [descr:EditorOptions.validationError]
     */
    validationError?: any;
    /**
     * [descr:EditorOptions.validationErrors]
     */
    validationErrors?: Array<any>;
    /**
     * [descr:EditorOptions.validationMessageMode]
     */
    validationMessageMode?: 'always' | 'auto';
    /**
     * [descr:EditorOptions.validationStatus]
     */
    validationStatus?: 'valid' | 'invalid' | 'pending';
    /**
     * [descr:EditorOptions.value]
     */
    value?: any;
    /**
     * [descr:EditorOptions.stylingMode]
     */
    stylingMode?: 'outlined' | 'underlined' | 'filled';
  }
  /**
   * [descr:EmailRule]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface EmailRule {
    /**
     * [descr:EmailRule.ignoreEmptyValue]
     */
    ignoreEmptyValue?: boolean;
    /**
     * [descr:EmailRule.message]
     */
    message?: string;
    /**
     * [descr:EmailRule.type]
     */
    type: 'email';
  }
  /**
   * [descr:Format]
   */
  export type Format =
    | FormatObject
    | PredefinedFormat
    | string
    | ((value: number | Date) => string)
    | ExternalFormat;
  /**
   * [descr:GridBase]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface GridBase<TRowData = any, TKey = any> {
    /**
     * [descr:GridBase.beginCustomLoading(messageText)]
     */
    beginCustomLoading(messageText: string): void;
    /**
     * [descr:GridBase.byKey(key)]
     */
    byKey(key: TKey): DevExpress.core.utils.DxPromise<TRowData>;
    /**
     * [descr:GridBase.cancelEditData()]
     */
    cancelEditData(): void;
    /**
     * [descr:GridBase.cellValue(rowIndex, dataField)]
     */
    cellValue(rowIndex: number, dataField: string): any;
    /**
     * [descr:GridBase.cellValue(rowIndex, dataField, value)]
     */
    cellValue(rowIndex: number, dataField: string, value: any): void;
    /**
     * [descr:GridBase.cellValue(rowIndex, visibleColumnIndex)]
     */
    cellValue(rowIndex: number, visibleColumnIndex: number): any;
    /**
     * [descr:GridBase.cellValue(rowIndex, visibleColumnIndex, value)]
     */
    cellValue(rowIndex: number, visibleColumnIndex: number, value: any): void;
    /**
     * [descr:GridBase.clearFilter()]
     */
    clearFilter(): void;
    /**
     * [descr:GridBase.clearFilter(filterName)]
     */
    clearFilter(filterName: string): void;
    /**
     * [descr:GridBase.clearSelection()]
     */
    clearSelection(): void;
    /**
     * [descr:GridBase.clearSorting()]
     */
    clearSorting(): void;
    /**
     * [descr:GridBase.closeEditCell()]
     */
    closeEditCell(): void;
    /**
     * [descr:GridBase.collapseAdaptiveDetailRow()]
     */
    collapseAdaptiveDetailRow(): void;
    /**
     * [descr:GridBase.columnCount()]
     */
    columnCount(): number;
    /**
     * [descr:GridBase.columnOption(id)]
     */
    columnOption(id: number | string): any;
    /**
     * [descr:GridBase.columnOption(id, optionName)]
     */
    columnOption(id: number | string, optionName: string): any;
    /**
     * [descr:GridBase.columnOption(id, optionName, optionValue)]
     */
    columnOption(
      id: number | string,
      optionName: string,
      optionValue: any
    ): void;
    /**
     * [descr:GridBase.columnOption(id, options)]
     */
    columnOption(id: number | string, options: any): void;
    /**
     * [descr:GridBase.deleteColumn(id)]
     */
    deleteColumn(id: number | string): void;
    /**
     * [descr:GridBase.deleteRow(rowIndex)]
     */
    deleteRow(rowIndex: number): void;
    /**
     * [descr:GridBase.deselectAll()]
     */
    deselectAll(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:GridBase.deselectRows(keys)]
     */
    deselectRows(keys: Array<any>): DevExpress.core.utils.DxPromise<any>;
    /**
     * [descr:GridBase.editCell(rowIndex, dataField)]
     */
    editCell(rowIndex: number, dataField: string): void;
    /**
     * [descr:GridBase.editCell(rowIndex, visibleColumnIndex)]
     */
    editCell(rowIndex: number, visibleColumnIndex: number): void;
    /**
     * [descr:GridBase.editRow(rowIndex)]
     */
    editRow(rowIndex: number): void;
    /**
     * [descr:GridBase.endCustomLoading()]
     */
    endCustomLoading(): void;
    /**
     * [descr:GridBase.expandAdaptiveDetailRow(key)]
     */
    expandAdaptiveDetailRow(key: TKey): void;
    /**
     * [descr:GridBase.filter()]
     */
    filter(): any;
    /**
     * [descr:GridBase.filter(filterExpr)]
     */
    filter(filterExpr: any): void;
    focus(): void;
    /**
     * [descr:GridBase.focus(element)]
     */
    focus(element: DevExpress.core.UserDefinedElement): void;
    /**
     * [descr:GridBase.getCellElement(rowIndex, dataField)]
     */
    getCellElement(
      rowIndex: number,
      dataField: string
    ): DevExpress.core.DxElement | undefined;
    /**
     * [descr:GridBase.getCellElement(rowIndex, visibleColumnIndex)]
     */
    getCellElement(
      rowIndex: number,
      visibleColumnIndex: number
    ): DevExpress.core.DxElement | undefined;
    /**
     * [descr:GridBase.getCombinedFilter()]
     */
    getCombinedFilter(): any;
    /**
     * [descr:GridBase.getCombinedFilter(returnDataField)]
     */
    getCombinedFilter(returnDataField: boolean): any;
    getDataSource(): DevExpress.data.DataSource<TRowData, TKey>;
    /**
     * [descr:GridBase.getKeyByRowIndex(rowIndex)]
     */
    getKeyByRowIndex(rowIndex: number): TKey | undefined;
    /**
     * [descr:GridBase.getRowElement(rowIndex)]
     */
    getRowElement(
      rowIndex: number
    ): DevExpress.core.UserDefinedElementsArray | undefined;
    /**
     * [descr:GridBase.getRowIndexByKey(key)]
     */
    getRowIndexByKey(key: TKey): number;
    /**
     * [descr:GridBase.getScrollable()]
     */
    getScrollable(): dxScrollable;
    /**
     * [descr:GridBase.getVisibleColumnIndex(id)]
     */
    getVisibleColumnIndex(id: number | string): number;
    /**
     * [descr:GridBase.hasEditData()]
     */
    hasEditData(): boolean;
    /**
     * [descr:GridBase.hideColumnChooser()]
     */
    hideColumnChooser(): void;
    /**
     * [descr:GridBase.isAdaptiveDetailRowExpanded(key)]
     */
    isAdaptiveDetailRowExpanded(key: TKey): boolean;
    /**
     * [descr:GridBase.isRowFocused(key)]
     */
    isRowFocused(key: TKey): boolean;
    /**
     * [descr:GridBase.isRowSelected(key)]
     */
    isRowSelected(key: TKey): boolean;
    /**
     * [descr:GridBase.keyOf(obj)]
     */
    keyOf(obj: TRowData): TKey;
    /**
     * [descr:GridBase.navigateToRow(key)]
     */
    navigateToRow(key: TKey): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:GridBase.pageCount()]
     */
    pageCount(): number;
    /**
     * [descr:GridBase.pageIndex()]
     */
    pageIndex(): number;
    /**
     * [descr:GridBase.pageIndex(newIndex)]
     */
    pageIndex(newIndex: number): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:GridBase.pageSize()]
     */
    pageSize(): number;
    /**
     * [descr:GridBase.pageSize(value)]
     */
    pageSize(value: number): void;
    /**
     * [descr:GridBase.refresh()]
     */
    refresh(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:GridBase.refresh(changesOnly)]
     */
    refresh(changesOnly: boolean): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:GridBase.repaintRows(rowIndexes)]
     */
    repaintRows(rowIndexes: Array<number>): void;
    /**
     * [descr:GridBase.saveEditData()]
     */
    saveEditData(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:GridBase.searchByText(text)]
     */
    searchByText(text: string): void;
    /**
     * [descr:GridBase.selectAll()]
     */
    selectAll(): DevExpress.core.utils.DxPromise<void>;
    /**
     * [descr:GridBase.selectRows(keys, preserve)]
     */
    selectRows(
      keys: Array<TKey>,
      preserve: boolean
    ): DevExpress.core.utils.DxPromise<Array<TRowData>>;
    /**
     * [descr:GridBase.selectRowsByIndexes(indexes)]
     */
    selectRowsByIndexes(
      indexes: Array<number>
    ): DevExpress.core.utils.DxPromise<Array<TRowData>>;
    /**
     * [descr:GridBase.showColumnChooser()]
     */
    showColumnChooser(): void;
    /**
     * [descr:GridBase.state()]
     */
    state(): any;
    /**
     * [descr:GridBase.state(state)]
     */
    state(state: any): void;
    /**
     * [descr:GridBase.undeleteRow(rowIndex)]
     */
    undeleteRow(rowIndex: number): void;
    /**
     * [descr:GridBase.updateDimensions()]
     */
    updateDimensions(): void;
  }
  /**
   * @deprecated 
   */
  export type GridBaseColumn<TRowData = any> =
    DevExpress.ui.dxDataGrid.ColumnBase<TRowData>;
  /**
   * @deprecated 
   */
  export type GridBaseColumnButton = DevExpress.ui.dxDataGrid.ColumnButtonBase;
  /**
   * @deprecated 
   */
  export type GridBaseEditing<
    TRowData = any,
    TKey = any
  > = DevExpress.ui.dxDataGrid.EditingBase<TRowData, TKey>;
  /**
   * @deprecated 
   */
  export type GridBaseEditingTexts = DevExpress.ui.dxDataGrid.EditingTextsBase;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface GridBaseOptions<
    TComponent extends GridBase<TRowData, TKey>,
    TRowData = any,
    TKey = any
  > extends WidgetOptions<TComponent> {
    /**
     * [descr:GridBaseOptions.allowColumnReordering]
     */
    allowColumnReordering?: boolean;
    /**
     * [descr:GridBaseOptions.allowColumnResizing]
     */
    allowColumnResizing?: boolean;
    /**
     * [descr:GridBaseOptions.autoNavigateToFocusedRow]
     */
    autoNavigateToFocusedRow?: boolean;
    /**
     * [descr:GridBaseOptions.cacheEnabled]
     */
    cacheEnabled?: boolean;
    /**
     * [descr:GridBaseOptions.cellHintEnabled]
     */
    cellHintEnabled?: boolean;
    /**
     * [descr:GridBaseOptions.columnAutoWidth]
     */
    columnAutoWidth?: boolean;
    /**
     * [descr:GridBaseOptions.columnChooser]
     */
    columnChooser?: DevExpress.ui.dxDataGrid.ColumnChooser;
    /**
     * [descr:GridBaseOptions.columnFixing]
     */
    columnFixing?: DevExpress.ui.dxDataGrid.ColumnFixing;
    /**
     * [descr:GridBaseOptions.columnHidingEnabled]
     */
    columnHidingEnabled?: boolean;
    /**
     * [descr:GridBaseOptions.columnMinWidth]
     */
    columnMinWidth?: number;
    /**
     * [descr:GridBaseOptions.columnResizingMode]
     */
    columnResizingMode?: 'nextColumn' | 'widget';
    /**
     * [descr:GridBaseOptions.columnWidth]
     */
    columnWidth?: number | 'auto';
    /**
     * [descr:GridBaseOptions.columns]
     */
    columns?: Array<DevExpress.ui.dxDataGrid.ColumnBase<TRowData> | string>;
    /**
     * [descr:GridBaseOptions.dataSource]
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<TRowData, TKey>;
    /**
     * [descr:GridBaseOptions.dateSerializationFormat]
     */
    dateSerializationFormat?: string;
    /**
     * [descr:GridBaseOptions.editing]
     */
    editing?: DevExpress.ui.dxDataGrid.EditingBase<TRowData, TKey>;
    /**
     * [descr:GridBaseOptions.errorRowEnabled]
     */
    errorRowEnabled?: boolean;
    /**
     * [descr:GridBaseOptions.filterBuilder]
     */
    filterBuilder?: DevExpress.ui.dxFilterBuilder.Properties;
    /**
     * [descr:GridBaseOptions.filterBuilderPopup]
     */
    filterBuilderPopup?: DevExpress.ui.dxPopup.Properties;
    /**
     * [descr:GridBaseOptions.filterPanel]
     */
    filterPanel?: DevExpress.ui.dxDataGrid.FilterPanel<
      TComponent,
      TRowData,
      TKey
    >;
    /**
     * [descr:GridBaseOptions.filterRow]
     */
    filterRow?: DevExpress.ui.dxDataGrid.FilterRow;
    /**
     * [descr:GridBaseOptions.filterSyncEnabled]
     */
    filterSyncEnabled?: boolean | 'auto';
    /**
     * [descr:GridBaseOptions.filterValue]
     */
    filterValue?: string | Array<any> | Function;
    /**
     * [descr:GridBaseOptions.focusedColumnIndex]
     */
    focusedColumnIndex?: number;
    /**
     * [descr:GridBaseOptions.focusedRowEnabled]
     */
    focusedRowEnabled?: boolean;
    /**
     * [descr:GridBaseOptions.focusedRowIndex]
     */
    focusedRowIndex?: number;
    /**
     * [descr:GridBaseOptions.focusedRowKey]
     */
    focusedRowKey?: TKey;
    /**
     * [descr:GridBaseOptions.headerFilter]
     */
    headerFilter?: DevExpress.ui.dxDataGrid.HeaderFilter;
    /**
     * [descr:GridBaseOptions.highlightChanges]
     */
    highlightChanges?: boolean;
    /**
     * [descr:GridBaseOptions.keyboardNavigation]
     */
    keyboardNavigation?: DevExpress.ui.dxDataGrid.KeyboardNavigation;
    /**
     * [descr:GridBaseOptions.loadPanel]
     */
    loadPanel?: DevExpress.ui.dxDataGrid.LoadPanel;
    /**
     * [descr:GridBaseOptions.noDataText]
     */
    noDataText?: string;
    /**
     * [descr:GridBaseOptions.onAdaptiveDetailRowPreparing]
     */
    onAdaptiveDetailRowPreparing?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.AdaptiveDetailRowPreparingInfo
    ) => void;
    /**
     * [descr:GridBaseOptions.onDataErrorOccurred]
     */
    onDataErrorOccurred?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.DataErrorOccurredInfo
    ) => void;
    /**
     * [descr:GridBaseOptions.onEditCanceled]
     */
    onEditCanceled?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.DataChangeInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onEditCanceling]
     */
    onEditCanceling?: (
      e: DevExpress.events.Cancelable &
        DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.DataChangeInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onInitNewRow]
     */
    onInitNewRow?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.NewRowInfo<TRowData>
    ) => void;
    /**
     * [descr:GridBaseOptions.onKeyDown]
     */
    onKeyDown?: (
      e: DevExpress.events.NativeEventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.KeyDownInfo
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowCollapsed]
     */
    onRowCollapsed?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowKeyInfo<TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowCollapsing]
     */
    onRowCollapsing?: (
      e: DevExpress.events.Cancelable &
        DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowKeyInfo<TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowExpanded]
     */
    onRowExpanded?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowKeyInfo<TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowExpanding]
     */
    onRowExpanding?: (
      e: DevExpress.events.Cancelable &
        DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowKeyInfo<TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowInserted]
     */
    onRowInserted?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowInsertedInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowInserting]
     */
    onRowInserting?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowInsertingInfo<TRowData>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowRemoved]
     */
    onRowRemoved?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowRemovedInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowRemoving]
     */
    onRowRemoving?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowRemovingInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowUpdated]
     */
    onRowUpdated?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowUpdatedInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowUpdating]
     */
    onRowUpdating?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowUpdatingInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowValidating]
     */
    onRowValidating?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.RowValidatingInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onSaved]
     */
    onSaved?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.DataChangeInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onSaving]
     */
    onSaving?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.SavingInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onSelectionChanged]
     */
    onSelectionChanged?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.SelectionChangedInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onToolbarPreparing]
     * @deprecated [depNote:GridBaseOptions.onToolbarPreparing]
     */
    onToolbarPreparing?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.ui.dxDataGrid.ToolbarPreparingInfo
    ) => void;
    /**
     * [descr:GridBaseOptions.pager]
     */
    pager?: DevExpress.ui.dxDataGrid.Pager;
    /**
     * [descr:GridBaseOptions.paging]
     */
    paging?: DevExpress.ui.dxDataGrid.PagingBase;
    /**
     * [descr:GridBaseOptions.renderAsync]
     */
    renderAsync?: boolean;
    /**
     * [descr:GridBaseOptions.repaintChangesOnly]
     */
    repaintChangesOnly?: boolean;
    /**
     * [descr:GridBaseOptions.rowAlternationEnabled]
     */
    rowAlternationEnabled?: boolean;
    /**
     * [descr:GridBaseOptions.rowDragging]
     */
    rowDragging?: DevExpress.ui.dxDataGrid.RowDragging<
      TComponent,
      TRowData,
      TKey
    >;
    /**
     * [descr:GridBaseOptions.scrolling]
     */
    scrolling?: DevExpress.ui.dxDataGrid.ScrollingBase;
    /**
     * [descr:GridBaseOptions.searchPanel]
     */
    searchPanel?: DevExpress.ui.dxDataGrid.SearchPanel;
    /**
     * [descr:GridBaseOptions.selectedRowKeys]
     */
    selectedRowKeys?: Array<TKey>;
    /**
     * [descr:GridBaseOptions.selection]
     */
    selection?: DevExpress.ui.dxDataGrid.SelectionBase;
    /**
     * [descr:GridBaseOptions.showBorders]
     */
    showBorders?: boolean;
    /**
     * [descr:GridBaseOptions.showColumnHeaders]
     */
    showColumnHeaders?: boolean;
    /**
     * [descr:GridBaseOptions.showColumnLines]
     */
    showColumnLines?: boolean;
    /**
     * [descr:GridBaseOptions.showRowLines]
     */
    showRowLines?: boolean;
    /**
     * [descr:GridBaseOptions.sorting]
     */
    sorting?: DevExpress.ui.dxDataGrid.Sorting;
    /**
     * [descr:GridBaseOptions.stateStoring]
     */
    stateStoring?: DevExpress.ui.dxDataGrid.StateStoring;
    /**
     * [descr:GridBaseOptions.twoWayBindingEnabled]
     */
    twoWayBindingEnabled?: boolean;
    /**
     * [descr:GridBaseOptions.wordWrapEnabled]
     */
    wordWrapEnabled?: boolean;
  }
  /**
   * @deprecated 
   */
  export type GridBasePaging = DevExpress.ui.dxDataGrid.PagingBase;
  /**
   * @deprecated 
   */
  export type GridBaseScrolling = DevExpress.ui.dxDataGrid.ScrollingBase;
  /**
   * @deprecated 
   */
  export type GridBaseSelection = DevExpress.ui.dxDataGrid.SelectionBase;
  /**
   * [descr:HierarchicalCollectionWidget]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class HierarchicalCollectionWidget<
    TProperties
  > extends CollectionWidget<TProperties> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface HierarchicalCollectionWidgetOptions<TComponent>
    extends CollectionWidgetOptions<TComponent> {
    /**
     * [descr:HierarchicalCollectionWidgetOptions.disabledExpr]
     */
    disabledExpr?: string | Function;
    /**
     * [descr:HierarchicalCollectionWidgetOptions.displayExpr]
     */
    displayExpr?: string | ((item: any) => string);
    /**
     * [descr:HierarchicalCollectionWidgetOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:HierarchicalCollectionWidgetOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:HierarchicalCollectionWidgetOptions.itemsExpr]
     */
    itemsExpr?: string | Function;
    /**
     * [descr:HierarchicalCollectionWidgetOptions.keyExpr]
     */
    keyExpr?: string | Function;
    /**
     * [descr:HierarchicalCollectionWidgetOptions.selectedExpr]
     */
    selectedExpr?: string | Function;
  }
  export interface MapLocation {
    /**
     * [descr:MapLocation.lat]
     */
    lat: number;
    /**
     * [descr:MapLocation.lng]
     */
    lng: number;
  }
  /**
   * [descr:ui.notify(message,type,displayTime)]
   */
  export function notify(
    message: string,
    type?: string,
    displayTime?: number
  ): void;
  /**
   * [descr:ui.notify(options,type,displayTime)]
   */
  export function notify(
    options: any,
    type?: string,
    displayTime?: number
  ): void;
  /**
   * [descr:NumericRule]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface NumericRule {
    /**
     * [descr:NumericRule.ignoreEmptyValue]
     */
    ignoreEmptyValue?: boolean;
    /**
     * [descr:NumericRule.message]
     */
    message?: string;
    /**
     * [descr:NumericRule.type]
     */
    type: 'numeric';
  }
  /**
   * [descr:PatternRule]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface PatternRule {
    /**
     * [descr:PatternRule.ignoreEmptyValue]
     */
    ignoreEmptyValue?: boolean;
    /**
     * [descr:PatternRule.message]
     */
    message?: string;
    /**
     * [descr:PatternRule.pattern]
     */
    pattern?: RegExp | string;
    /**
     * [descr:PatternRule.type]
     */
    type: 'pattern';
  }
  /**
   * [descr:RangeRule]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface RangeRule {
    /**
     * [descr:RangeRule.ignoreEmptyValue]
     */
    ignoreEmptyValue?: boolean;
    /**
     * [descr:RangeRule.max]
     */
    max?: Date | number;
    /**
     * [descr:RangeRule.message]
     */
    message?: string;
    /**
     * [descr:RangeRule.min]
     */
    min?: Date | number;
    /**
     * [descr:RangeRule.reevaluate]
     */
    reevaluate?: boolean;
    /**
     * [descr:RangeRule.type]
     */
    type: 'range';
  }
  /**
   * [descr:ui.repaintFloatingActionButton()]
   */
  export function repaintFloatingActionButton(): void;
  /**
   * [descr:RequiredRule]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface RequiredRule {
    /**
     * [descr:RequiredRule.message]
     */
    message?: string;
    /**
     * [descr:RequiredRule.trim]
     */
    trim?: boolean;
    /**
     * [descr:RequiredRule.type]
     */
    type: 'required';
  }
  /**
   * [descr:SearchBoxMixin]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class SearchBoxMixin {
    constructor(options?: SearchBoxMixinOptions);
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface SearchBoxMixinOptions {
    /**
     * [descr:SearchBoxMixinOptions.searchEditorOptions]
     */
    searchEditorOptions?: DevExpress.ui.dxTextBox.Properties;
    /**
     * [descr:SearchBoxMixinOptions.searchEnabled]
     */
    searchEnabled?: boolean;
    /**
     * [descr:SearchBoxMixinOptions.searchExpr]
     */
    searchExpr?: string | Function | Array<string | Function>;
    /**
     * [descr:SearchBoxMixinOptions.searchMode]
     */
    searchMode?: 'contains' | 'startswith' | 'equals';
    /**
     * [descr:SearchBoxMixinOptions.searchTimeout]
     */
    searchTimeout?: number;
    /**
     * [descr:SearchBoxMixinOptions.searchValue]
     */
    searchValue?: string;
  }
  /**
   * [descr:StringLengthRule]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface StringLengthRule {
    /**
     * [descr:StringLengthRule.ignoreEmptyValue]
     */
    ignoreEmptyValue?: boolean;
    /**
     * [descr:StringLengthRule.max]
     */
    max?: number;
    /**
     * [descr:StringLengthRule.message]
     */
    message?: string;
    /**
     * [descr:StringLengthRule.min]
     */
    min?: number;
    /**
     * [descr:StringLengthRule.trim]
     */
    trim?: boolean;
    /**
     * [descr:StringLengthRule.type]
     */
    type: 'stringLength';
  }
  /**
   * [descr:ui.template]
   * @deprecated [depNote:ui.template]
   */
  export type Template = DevExpress.core.template;
  /**
   * [descr:ui.themes]
   */
  export class themes {
    /**
     * [descr:ui.themes.current()]
     */
    static current(): string;
    /**
     * [descr:ui.themes.current(themeName)]
     */
    static current(themeName: string): void;
    /**
     * [descr:ui.themes.ready(callback)]
     */
    static ready(callback: Function): void;
    /**
     * [descr:ui.themes.initialized(callback)]
     */
    static initialized(callback: Function): void;
    static isMaterial(theme: string): boolean;
  }
  export interface ValidationCallbackData {
    value?: string | number;
    rule: any;
    validator: any;
    data?: any;
    column?: any;
    formItem?: any;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type ValidationRule =
    | AsyncRule
    | CompareRule
    | CustomRule
    | EmailRule
    | NumericRule
    | PatternRule
    | RangeRule
    | RequiredRule
    | StringLengthRule;
  /**
   * [descr:Widget]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class Widget<TProperties> extends DOMComponent<TProperties> {
    /**
     * [descr:Widget.focus()]
     */
    focus(): void;
    /**
     * [descr:Widget.registerKeyHandler(key, handler)]
     */
    registerKeyHandler(key: string, handler: Function): void;
    /**
     * [descr:Widget.repaint()]
     */
    repaint(): void;
  }
  module Widget {
    /**
     * [descr:format]
     * @deprecated [depNote:format]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export type format = Format;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface WidgetOptions<TComponent>
    extends DOMComponentOptions<TComponent> {
    /**
     * [descr:WidgetOptions.accessKey]
     */
    accessKey?: string;
    /**
     * [descr:WidgetOptions.activeStateEnabled]
     */
    activeStateEnabled?: boolean;
    /**
     * [descr:WidgetOptions.disabled]
     */
    disabled?: boolean;
    /**
     * [descr:WidgetOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:WidgetOptions.hint]
     */
    hint?: string;
    /**
     * [descr:WidgetOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:WidgetOptions.onContentReady]
     */
    onContentReady?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * [descr:WidgetOptions.tabIndex]
     */
    tabIndex?: number;
    /**
     * [descr:WidgetOptions.visible]
     */
    visible?: boolean;
  }
}
declare module DevExpress.ui.dialog {
  /**
   * [descr:ui.dialog.alert(messageHtml,title)]
   */
  export function alert(
    messageHtml: string,
    title: string
  ): DevExpress.core.utils.DxPromise<void>;
  /**
   * [descr:ui.dialog.confirm(messageHtml,title)]
   */
  export function confirm(
    messageHtml: string,
    title: string
  ): DevExpress.core.utils.DxPromise<boolean>;
  /**
   * [descr:ui.dialog.custom(options)]
   */
  export function custom(options: CustomDialogOptions): any;
}
declare module DevExpress.ui.dxAccordion {
  /**
   * [descr:Item]
   */
  export interface Item extends CollectionWidgetItem {
    /**
     * [descr:Item.icon]
     */
    icon?: string;
    /**
     * [descr:Item.title]
     */
    title?: string;
  }
}
declare module DevExpress.ui.dxActionSheet {
  /**
   * [descr:Item]
   */
  export interface Item extends CollectionWidgetItem {
    /**
     * [descr:Item.icon]
     */
    icon?: string;
    /**
     * [descr:Item.onClick]
     */
    onClick?:
      | ((e: {
          component?: dxActionSheet;
          element?: DevExpress.core.DxElement;
          model?: any;
          event?: DevExpress.events.DxEvent;
        }) => void)
      | string;
    /**
     * [descr:Item.type]
     */
    type?: 'back' | 'danger' | 'default' | 'normal' | 'success';
    /**
     * [descr:Item.stylingMode]
     */
    stylingMode?: 'text' | 'outlined' | 'contained';
  }
}
declare module DevExpress.ui.dxBox {
  /**
   * [descr:Item]
   */
  export interface Item extends CollectionWidgetItem {
    /**
     * [descr:Item.baseSize]
     */
    baseSize?: number | 'auto';
    /**
     * [descr:Item.box]
     */
    box?: Properties;
    /**
     * [descr:Item.ratio]
     */
    ratio?: number;
    /**
     * [descr:Item.shrink]
     */
    shrink?: number;
  }
}
declare module DevExpress.ui.dxButtonGroup {
  /**
   * [descr:Item]
   */
  export interface Item extends CollectionWidgetItem {
    /**
     * [descr:Item.hint]
     */
    hint?: string;
    /**
     * [descr:Item.icon]
     */
    icon?: string;
    /**
     * [descr:Item.type]
     */
    type?: 'back' | 'danger' | 'default' | 'normal' | 'success';

    /**
     * [descr:Item.elementAttr]
     */
    elementAttr?: { [key: string]: any };
  }
}
declare module DevExpress.ui.dxContextMen {
  /**
   * [descr:Item]
   */
  export interface Item extends dxMenuBaseItem {
    /**
     * [descr:Item.items]
     */
    items?: Array<Item>;
  }
}
declare module DevExpress.ui.dxDiagram {
  /**
   * [descr:Item]
   */
  export interface Item {
    /**
     * [descr:Item.dataItem]
     */
    dataItem?: any;
    /**
     * [descr:Item.id]
     */
    id?: string;
    /**
     * [descr:Item.key]
     */
    key?: Object;
    /**
     * [descr:Item.itemType]
     */
    itemType?: 'shape' | 'connector';
  }
}
declare module DevExpress.ui.dxDropDownButton {
  /**
   * [descr:Item]
   */
  export interface Item extends DevExpress.ui.dxList.Item {
    /**
     * [descr:Item.onClick]
     */
    onClick?: ((e: ItemClickEvent) => void) | string;
  }
}
declare module DevExpress.ui.dxFileManager {
  /**
   * [descr:ContextMenuItem]
   */
  export interface ContextMenuItem extends DevExpress.ui.dxContextMen.Item {
    /**
     * [descr:ContextMenuItem.items]
     */
    items?: Array<ContextMenuItem>;
    /**
     * [descr:ContextMenuItem.name]
     */
    name?:
      | 'create'
      | 'upload'
      | 'refresh'
      | 'download'
      | 'move'
      | 'copy'
      | 'rename'
      | 'delete'
      | string;
    /**
     * [descr:ContextMenuItem.visible]
     */
    visible?: boolean;
    /**
     * [descr:ContextMenuItem.template]
     */
    template?:
      | DevExpress.core.template
      | (() => string | DevExpress.core.UserDefinedElement);
  }
  /**
   * [descr:ToolbarItem]
   */
  export interface ToolbarItem extends DevExpress.ui.dxToolbar.Item {
    /**
     * [descr:ToolbarItem.icon]
     */
    icon?: string;
    /**
     * [descr:ToolbarItem.location]
     */
    location?: 'after' | 'before' | 'center';
    /**
     * [descr:ToolbarItem.name]
     */
    name?:
      | 'showNavPane'
      | 'create'
      | 'upload'
      | 'refresh'
      | 'switchView'
      | 'download'
      | 'move'
      | 'copy'
      | 'rename'
      | 'delete'
      | 'clearSelection'
      | 'separator'
      | string;
    /**
     * [descr:ToolbarItem.visible]
     */
    visible?: boolean;
    /**
     * [descr:ToolbarItem.html]
     */
    html?: string;
    /**
     * [descr:ToolbarItem.template]
     */
    template?:
      | DevExpress.core.template
      | (() => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:ToolbarItem.menuItemTemplate]
     */
    menuItemTemplate?:
      | DevExpress.core.template
      | (() => string | DevExpress.core.UserDefinedElement);
  }
}
declare module DevExpress.ui.dxForm {
  /**
   * [descr:ButtonItem]
   */
  export interface ButtonItem {
    /**
     * [descr:ButtonItem.buttonOptions]
     */
    buttonOptions?: DevExpress.ui.dxButton.Properties;
    /**
     * [descr:ButtonItem.colSpan]
     */
    colSpan?: number;
    /**
     * [descr:ButtonItem.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:ButtonItem.horizontalAlignment]
     */
    horizontalAlignment?: 'center' | 'left' | 'right';
    /**
     * [descr:ButtonItem.itemType]
     */
    itemType?: 'empty' | 'group' | 'simple' | 'tabbed' | 'button';
    /**
     * [descr:ButtonItem.name]
     */
    name?: string;
    /**
     * [descr:ButtonItem.verticalAlignment]
     */
    verticalAlignment?: 'bottom' | 'center' | 'top';
    /**
     * [descr:ButtonItem.visible]
     */
    visible?: boolean;
    /**
     * [descr:ButtonItem.visibleIndex]
     */
    visibleIndex?: number;
  }
  /**
   * [descr:EmptyItem]
   */
  export interface EmptyItem {
    /**
     * [descr:EmptyItem.colSpan]
     */
    colSpan?: number;
    /**
     * [descr:EmptyItem.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:EmptyItem.itemType]
     */
    itemType?: 'empty' | 'group' | 'simple' | 'tabbed' | 'button';
    /**
     * [descr:EmptyItem.name]
     */
    name?: string;
    /**
     * [descr:EmptyItem.visible]
     */
    visible?: boolean;
    /**
     * [descr:EmptyItem.visibleIndex]
     */
    visibleIndex?: number;
  }
  /**
   * [descr:GroupItem]
   */
  export interface GroupItem {
    /**
     * [descr:GroupItem.alignItemLabels]
     */
    alignItemLabels?: boolean;
    /**
     * [descr:GroupItem.caption]
     */
    caption?: string;
    /**
     * [descr:GroupItem.colCount]
     */
    colCount?: number;
    /**
     * [descr:GroupItem.colCountByScreen]
     */
    colCountByScreen?: any;
    /**
     * [descr:GroupItem.colSpan]
     */
    colSpan?: number;
    /**
     * [descr:GroupItem.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:GroupItem.itemType]
     */
    itemType?: 'empty' | 'group' | 'simple' | 'tabbed' | 'button';
    /**
     * [descr:GroupItem.items]
     */
    items?: Array<Item>;
    /**
     * [descr:GroupItem.name]
     */
    name?: string;
    /**
     * [descr:GroupItem.template]
     */
    template?:
      | DevExpress.core.template
      | ((
          data: GroupItemTemplateData,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:GroupItem.visible]
     */
    visible?: boolean;
    /**
     * [descr:GroupItem.visibleIndex]
     */
    visibleIndex?: number;
  }
  export type Item =
    | SimpleItem
    | GroupItem
    | TabbedItem
    | EmptyItem
    | ButtonItem;
  /**
   * [descr:SimpleItem]
   */
  export interface SimpleItem {
    /**
     * [descr:SimpleItem.colSpan]
     */
    colSpan?: number;
    /**
     * [descr:SimpleItem.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:SimpleItem.dataField]
     */
    dataField?: string;
    /**
     * [descr:SimpleItem.editorOptions]
     */
    editorOptions?: any;
    /**
     * [descr:SimpleItem.editorType]
     */
    editorType?:
      | 'dxAutocomplete'
      | 'dxCalendar'
      | 'dxCheckBox'
      | 'dxColorBox'
      | 'dxDateBox'
      | 'dxDropDownBox'
      | 'dxHtmlEditor'
      | 'dxLookup'
      | 'dxNumberBox'
      | 'dxRadioGroup'
      | 'dxRangeSlider'
      | 'dxSelectBox'
      | 'dxSlider'
      | 'dxSwitch'
      | 'dxTagBox'
      | 'dxTextArea'
      | 'dxTextBox';
    /**
     * [descr:SimpleItem.helpText]
     */
    helpText?: string;
    /**
     * [descr:SimpleItem.isRequired]
     */
    isRequired?: boolean;
    /**
     * [descr:SimpleItem.itemType]
     */
    itemType?: 'empty' | 'group' | 'simple' | 'tabbed' | 'button';
    /**
     * [descr:SimpleItem.label]
     */
    label?: {
      /**
       * [descr:SimpleItem.label.alignment]
       */
      alignment?: 'center' | 'left' | 'right';
      /**
       * [descr:SimpleItem.label.location]
       */
      location?: 'left' | 'right' | 'top';
      /**
       * [descr:SimpleItem.label.showColon]
       */
      showColon?: boolean;
      /**
       * [descr:SimpleItem.label.text]
       */
      text?: string;
      /**
       * [descr:SimpleItem.label.visible]
       */
      visible?: boolean;
    };
    /**
     * [descr:SimpleItem.name]
     */
    name?: string;
    /**
     * [descr:SimpleItem.template]
     */
    template?:
      | DevExpress.core.template
      | ((
          data: SimpleItemTemplateData,
          itemElement: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:SimpleItem.validationRules]
     */
    validationRules?: Array<
      | RequiredRule
      | NumericRule
      | RangeRule
      | StringLengthRule
      | CustomRule
      | CompareRule
      | PatternRule
      | EmailRule
      | AsyncRule
    >;
    /**
     * [descr:SimpleItem.visible]
     */
    visible?: boolean;
    /**
     * [descr:SimpleItem.visibleIndex]
     */
    visibleIndex?: number;
  }
  /**
   * [descr:TabbedItem]
   */
  export interface TabbedItem {
    /**
     * [descr:TabbedItem.colSpan]
     */
    colSpan?: number;
    /**
     * [descr:TabbedItem.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:TabbedItem.itemType]
     */
    itemType?: 'empty' | 'group' | 'simple' | 'tabbed' | 'button';
    /**
     * [descr:TabbedItem.name]
     */
    name?: string;
    /**
     * [descr:TabbedItem.tabPanelOptions]
     */
    tabPanelOptions?: DevExpress.ui.dxTabPanel.Properties;
    /**
     * [descr:TabbedItem.tabs]
     */
    tabs?: Array<{
      /**
       * [descr:TabbedItem.tabs.alignItemLabels]
       */
      alignItemLabels?: boolean;
      /**
       * [descr:TabbedItem.tabs.badge]
       */
      badge?: string;
      /**
       * [descr:TabbedItem.tabs.colCount]
       */
      colCount?: number;
      /**
       * [descr:TabbedItem.tabs.colCountByScreen]
       */
      colCountByScreen?: any;
      /**
       * [descr:TabbedItem.tabs.disabled]
       */
      disabled?: boolean;
      /**
       * [descr:TabbedItem.tabs.icon]
       */
      icon?: string;
      /**
       * [descr:TabbedItem.tabs.items]
       */
      items?: Array<Item>;
      /**
       * [descr:TabbedItem.tabs.tabTemplate]
       */
      tabTemplate?:
        | DevExpress.core.template
        | ((
            tabData: any,
            tabIndex: number,
            tabElement: DevExpress.core.DxElement
          ) => any);
      /**
       * [descr:TabbedItem.tabs.template]
       */
      template?:
        | DevExpress.core.template
        | ((
            tabData: any,
            tabIndex: number,
            tabElement: DevExpress.core.DxElement
          ) => any);
      /**
       * [descr:TabbedItem.tabs.title]
       */
      title?: string;
    }>;
    /**
     * [descr:TabbedItem.visible]
     */
    visible?: boolean;
    /**
     * [descr:TabbedItem.visibleIndex]
     */
    visibleIndex?: number;
  }
}
declare module DevExpress.ui.dxGallery {
  /**
   * [descr:Item]
   */
  export interface Item extends CollectionWidgetItem {
    /**
     * [descr:Item.imageAlt]
     */
    imageAlt?: string;
    /**
     * [descr:Item.imageSrc]
     */
    imageSrc?: string;
  }
}
declare module DevExpress.ui.dxGantt {
  /**
   * [descr:ContextMenuItem]
   */
  export interface ContextMenuItem extends DevExpress.ui.dxContextMen.Item {
    /**
     * [descr:ContextMenuItem.name]
     */
    name?:
      | 'undo'
      | 'redo'
      | 'expandAll'
      | 'collapseAll'
      | 'addTask'
      | 'deleteTask'
      | 'zoomIn'
      | 'zoomOut'
      | 'deleteDependency'
      | 'taskDetails'
      | 'resourceManager'
      | string;
  }
  /**
   * [descr:ToolbarItem]
   */
  export interface ToolbarItem extends DevExpress.ui.dxToolbar.Item {
    /**
     * [descr:ToolbarItem.name]
     */
    name?:
      | 'separator'
      | 'undo'
      | 'redo'
      | 'expandAll'
      | 'collapseAll'
      | 'addTask'
      | 'deleteTask'
      | 'zoomIn'
      | 'zoomOut'
      | 'taskDetails'
      | 'fullScreen'
      | 'resourceManager'
      | 'toggleResources'
      | 'toggleDependencies'
      | string;
    /**
     * [descr:ToolbarItem.location]
     */
    location?: 'after' | 'before' | 'center';
  }
}
declare module DevExpress.ui.dxHtmlEditor {
  /**
   * [descr:ContextMenuItem]
   */
  export interface ContextMenuItem
    extends DevExpress.ui.dxMenu.MenuBasePlainItem {
    /**
     * [descr:ContextMenuItem.name]
     */
    name?:
      | 'background'
      | 'bold'
      | 'color'
      | 'font'
      | 'italic'
      | 'link'
      | 'image'
      | 'strike'
      | 'subscript'
      | 'superscript'
      | 'underline'
      | 'blockquote'
      | 'header'
      | 'increaseIndent'
      | 'decreaseIndent'
      | 'orderedList'
      | 'bulletList'
      | 'alignLeft'
      | 'alignCenter'
      | 'alignRight'
      | 'alignJustify'
      | 'codeBlock'
      | 'variable'
      | 'separator'
      | 'undo'
      | 'redo'
      | 'clear'
      | 'insertTable'
      | 'insertRowAbove'
      | 'insertRowBelow'
      | 'insertColumnLeft'
      | 'insertColumnRight'
      | 'deleteColumn'
      | 'deleteRow'
      | 'deleteTable';
    /**
     * [descr:ContextMenuItem.items]
     */
    items?: Array<
      | ContextMenuItem
      | 'background'
      | 'bold'
      | 'color'
      | 'font'
      | 'italic'
      | 'link'
      | 'image'
      | 'strike'
      | 'subscript'
      | 'superscript'
      | 'underline'
      | 'blockquote'
      | 'header'
      | 'increaseIndent'
      | 'decreaseIndent'
      | 'orderedList'
      | 'bulletList'
      | 'alignLeft'
      | 'alignCenter'
      | 'alignRight'
      | 'alignJustify'
      | 'codeBlock'
      | 'variable'
      | 'separator'
      | 'undo'
      | 'redo'
      | 'clear'
      | 'insertTable'
      | 'insertRowAbove'
      | 'insertRowBelow'
      | 'insertColumnLeft'
      | 'insertColumnRight'
      | 'deleteColumn'
      | 'deleteRow'
      | 'deleteTable'
    >;
  }
  /**
   * [descr:ToolbarItem]
   */
  export interface ToolbarItem extends DevExpress.ui.dxToolbar.Item {
    /**
     * [descr:ToolbarItem.name]
     */
    name?:
      | 'background'
      | 'bold'
      | 'color'
      | 'font'
      | 'italic'
      | 'link'
      | 'image'
      | 'size'
      | 'strike'
      | 'subscript'
      | 'superscript'
      | 'underline'
      | 'blockquote'
      | 'header'
      | 'increaseIndent'
      | 'decreaseIndent'
      | 'orderedList'
      | 'bulletList'
      | 'alignLeft'
      | 'alignCenter'
      | 'alignRight'
      | 'alignJustify'
      | 'codeBlock'
      | 'variable'
      | 'separator'
      | 'undo'
      | 'redo'
      | 'clear'
      | 'insertTable'
      | 'insertHeaderRow'
      | 'insertRowAbove'
      | 'insertRowBelow'
      | 'insertColumnLeft'
      | 'insertColumnRight'
      | 'deleteColumn'
      | 'deleteRow'
      | 'deleteTable'
      | 'cellProperties'
      | 'tableProperties'
      | string;
    /**
     * [descr:ToolbarItem.formatName]
     * @deprecated [depNote:ToolbarItem.formatName]
     */
    formatName?:
      | 'background'
      | 'bold'
      | 'color'
      | 'font'
      | 'italic'
      | 'link'
      | 'image'
      | 'size'
      | 'strike'
      | 'subscript'
      | 'superscript'
      | 'underline'
      | 'blockquote'
      | 'header'
      | 'increaseIndent'
      | 'decreaseIndent'
      | 'orderedList'
      | 'bulletList'
      | 'alignLeft'
      | 'alignCenter'
      | 'alignRight'
      | 'alignJustify'
      | 'codeBlock'
      | 'variable'
      | 'separator'
      | 'undo'
      | 'redo'
      | 'clear'
      | 'insertTable'
      | 'insertHeaderRow'
      | 'insertRowAbove'
      | 'insertRowBelow'
      | 'insertColumnLeft'
      | 'insertColumnRight'
      | 'deleteColumn'
      | 'deleteRow'
      | 'deleteTable'
      | 'cellProperties'
      | 'tableProperties'
      | string;
    /**
     * [descr:ToolbarItem.acceptedValues]
     */
    acceptedValues?: Array<string | number | boolean>;
    /**
     * [descr:ToolbarItem.formatValues]
     * @deprecated [depNote:ToolbarItem.formatValues]
     */
    formatValues?: Array<string | number | boolean>;
    /**
     * [descr:ToolbarItem.location]
     */
    location?: 'after' | 'before' | 'center';
  }
}
declare module DevExpress.ui.dxList {
  /**
   * [descr:Item]
   */
  export interface Item extends CollectionWidgetItem {
    /**
     * [descr:Item.badge]
     */
    badge?: string;
    /**
     * [descr:Item.icon]
     */
    icon?: string;
    /**
     * [descr:Item.key]
     */
    key?: string;
    /**
     * [descr:Item.showChevron]
     */
    showChevron?: boolean;
  }
}
declare module DevExpress.ui.dxMenu {
  /**
   * [descr:Item]
   */
  export interface Item extends dxMenuBaseItem {
    /**
     * [descr:Item.items]
     */
    items?: Array<Item>;
  }
}
declare module DevExpress.ui.dxMultiView {
  /**
   * [descr:Item]
   */
  export interface Item extends CollectionWidgetItem {}
}
declare module DevExpress.ui.dxNavBar {
  /**
   * [descr:Item]
   */
  export interface Item extends DevExpress.ui.dxTabs.Item {
    /**
     * [descr:Item.badge]
     */
    badge?: string;
  }
}
declare module DevExpress.ui.dxOverlay {
  /**
   * [descr:ui.dxOverlay.baseZIndex(zIndex)]
   */
  export function baseZIndex(zIndex: number): void;
}
declare module DevExpress.ui.dxPivotGrid {
  /**
   * [descr:Cell]
   */
  export interface Cell {
    /**
     * [descr:Cell.columnPath]
     */
    columnPath?: Array<string | number | Date>;
    /**
     * [descr:Cell.columnType]
     */
    columnType?: 'D' | 'T' | 'GT';
    /**
     * [descr:Cell.dataIndex]
     */
    dataIndex?: number;
    /**
     * [descr:Cell.expanded]
     */
    expanded?: boolean;
    /**
     * [descr:Cell.path]
     */
    path?: Array<string | number | Date>;
    /**
     * [descr:Cell.rowPath]
     */
    rowPath?: Array<string | number | Date>;
    /**
     * [descr:Cell.rowType]
     */
    rowType?: 'D' | 'T' | 'GT';
    /**
     * [descr:Cell.text]
     */
    text?: string;
    /**
     * [descr:Cell.type]
     */
    type?: 'D' | 'T' | 'GT';
    /**
     * [descr:Cell.value]
     */
    value?: any;
  }
}
declare module DevExpress.ui.dxPopup {
  /**
   * [descr:ToolbarItem]
   */
  export interface ToolbarItem {
    /**
     * [descr:dxPopupOptions.toolbarItems.disabled]
     */
    disabled?: boolean;
    /**
     * [descr:dxPopupOptions.toolbarItems.html]
     */
    html?: string;
    /**
     * [descr:dxPopupOptions.toolbarItems.location]
     */
    location?: 'after' | 'before' | 'center';
    /**
     * [descr:dxPopupOptions.toolbarItems.options]
     */
    options?: any;
    /**
     * [descr:dxPopupOptions.toolbarItems.template]
     */
    template?: DevExpress.core.template;
    /**
     * [descr:dxPopupOptions.toolbarItems.text]
     */
    text?: string;
    /**
     * [descr:dxPopupOptions.toolbarItems.toolbar]
     */
    toolbar?: 'bottom' | 'top';
    /**
     * [descr:dxPopupOptions.toolbarItems.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxPopupOptions.toolbarItems.widget]
     */
    widget?:
      | 'dxAutocomplete'
      | 'dxButton'
      | 'dxCheckBox'
      | 'dxDateBox'
      | 'dxMenu'
      | 'dxSelectBox'
      | 'dxTabs'
      | 'dxTextBox'
      | 'dxButtonGroup'
      | 'dxDropDownButton';
  }
}
declare module DevExpress.ui.dxResponsiveBox {
  /**
   * [descr:Item]
   */
  export interface Item extends CollectionWidgetItem {
    /**
     * [descr:Item.location]
     */
    location?:
      | {
          /**
           * [descr:Item.location.col]
           */
          col?: number;
          /**
           * [descr:Item.location.colspan]
           */
          colspan?: number;
          /**
           * [descr:Item.location.row]
           */
          row?: number;
          /**
           * [descr:Item.location.rowspan]
           */
          rowspan?: number;
          /**
           * [descr:Item.location.screen]
           */
          screen?: string;
        }
      | Array<{
          col?: number;
          colspan?: number;
          row?: number;
          rowspan?: number;
          screen?: string;
        }>;
  }
}
declare module DevExpress.ui.dxSlideOut {
  /**
   * [descr:Item]
   */
  export interface Item extends CollectionWidgetItem {
    /**
     * [descr:Item.menuTemplate]
     */
    menuTemplate?:
      | DevExpress.core.template
      | (() => string | DevExpress.core.UserDefinedElement);
  }
}
declare module DevExpress.ui.dxTabPanel {
  /**
   * [descr:Item]
   */
  export interface Item extends DevExpress.ui.dxMultiView.Item {
    /**
     * [descr:Item.badge]
     */
    badge?: string;
    /**
     * [descr:Item.icon]
     */
    icon?: string;
    /**
     * [descr:Item.tabTemplate]
     */
    tabTemplate?:
      | DevExpress.core.template
      | (() => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:Item.title]
     */
    title?: string;
  }
}
declare module DevExpress.ui.dxTabs {
  /**
   * [descr:Item]
   */
  export interface Item extends CollectionWidgetItem {
    /**
     * [descr:Item.badge]
     */
    badge?: string;
    /**
     * [descr:Item.icon]
     */
    icon?: string;
  }
}
declare module DevExpress.ui.dxTileView {
  /**
   * [descr:Item]
   */
  export interface Item extends CollectionWidgetItem {
    /**
     * [descr:Item.heightRatio]
     */
    heightRatio?: number;
    /**
     * [descr:Item.widthRatio]
     */
    widthRatio?: number;
  }
}
declare module DevExpress.ui.dxToolbar {
  /**
   * [descr:Item]
   */
  export interface Item extends CollectionWidgetItem {
    /**
     * [descr:Item.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:Item.locateInMenu]
     */
    locateInMenu?: 'always' | 'auto' | 'never';
    /**
     * [descr:Item.location]
     */
    location?: 'after' | 'before' | 'center';
    /**
     * [descr:Item.menuItemTemplate]
     */
    menuItemTemplate?:
      | DevExpress.core.template
      | (() => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:Item.options]
     */
    options?: any;
    /**
     * [descr:Item.showText]
     */
    showText?: 'always' | 'inMenu';
    /**
     * [descr:Item.widget]
     */
    widget?:
      | 'dxAutocomplete'
      | 'dxButton'
      | 'dxCheckBox'
      | 'dxDateBox'
      | 'dxMenu'
      | 'dxSelectBox'
      | 'dxTabs'
      | 'dxTextBox'
      | 'dxButtonGroup'
      | 'dxDropDownButton';
  }
}
declare module DevExpress.ui.dxTreeView {
  /**
   * [descr:Item]
   */
  export interface Item extends CollectionWidgetItem {
    /**
     * [descr:Item.expanded]
     */
    expanded?: boolean;
    /**
     * [descr:Item.hasItems]
     */
    hasItems?: boolean;
    /**
     * [descr:Item.icon]
     */
    icon?: string;
    /**
     * [descr:Item.items]
     */
    items?: Array<Item>;
    /**
     * [descr:Item.id]
     */
    id?: number | string;
    /**
     * [descr:Item.parentId]
     */
    parentId?: number | string;
    /**
     * [descr:Item.selected]
     */
    selected?: boolean;
  }
}
declare module DevExpress.utils {
  /**
   * [descr:utils.cancelAnimationFrame(requestID)]
   */
  export function cancelAnimationFrame(requestID: number): void;
  /**
   * [descr:utils.getTimeZones(date)]
   */
  export function getTimeZones(date?: Date): Array<dxSchedulerTimeZone>;
  /**
   * [descr:utils.initMobileViewport(options)]
   */
  export function initMobileViewport(options: {
    allowZoom?: boolean;
    allowPan?: boolean;
    allowSelection?: boolean;
  }): void;
  /**
   * [descr:utils.requestAnimationFrame(callback)]
   */
  export function requestAnimationFrame(callback: Function): number;
}
declare module DevExpress.viz {
  /**
   * [descr:BarGaugeBarInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BarGaugeBarInfo {
    /**
     * [descr:BarGaugeBarInfo.color]
     */
    color?: string;
    /**
     * [descr:BarGaugeBarInfo.index]
     */
    index?: number;
    /**
     * [descr:BarGaugeBarInfo.value]
     */
    value?: number;
  }
  /**
   * [descr:BaseChart]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class BaseChart<TProperties> extends BaseWidget<TProperties> {
    /**
     * [descr:BaseChart.clearSelection()]
     */
    clearSelection(): void;
    /**
     * [descr:BaseChart.getAllSeries()]
     */
    getAllSeries(): Array<baseSeriesObject>;
    getDataSource(): DevExpress.data.DataSource;
    /**
     * [descr:BaseChart.getSeriesByName(seriesName)]
     */
    getSeriesByName(seriesName: any): chartSeriesObject;
    /**
     * [descr:BaseChart.getSeriesByPos(seriesIndex)]
     */
    getSeriesByPos(seriesIndex: number): chartSeriesObject;
    /**
     * [descr:BaseChart.hideTooltip()]
     */
    hideTooltip(): void;
    /**
     * [descr:BaseChart.refresh()]
     */
    refresh(): void;
    render(): void;
    /**
     * [descr:BaseChart.render(renderOptions)]
     */
    render(renderOptions: any): void;
  }
  module BaseChart {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface PointInteractionInfo {
      readonly target: basePointObject;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface TooltipInfo {
      target?: basePointObject | dxChartAnnotationConfig | any;
    }
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseChartAdaptiveLayout {
    /**
     * [descr:BaseChartOptions.adaptiveLayout.height]
     */
    height?: number;
    /**
     * [descr:BaseChartOptions.adaptiveLayout.keepLabels]
     */
    keepLabels?: boolean;
    /**
     * [descr:BaseChartOptions.adaptiveLayout.width]
     */
    width?: number;
  }
  /**
   * [descr:BaseChartAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseChartAnnotationConfig
    extends BaseWidgetAnnotationConfig {
    /**
     * [descr:BaseChartAnnotationConfig.argument]
     */
    argument?: number | Date | string;
    /**
     * [descr:BaseChartAnnotationConfig.series]
     */
    series?: string;
    /**
     * [descr:BaseChartAnnotationConfig.value]
     */
    value?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseChartLegend extends BaseLegend {
    /**
     * [descr:BaseChartOptions.legend.customizeItems]
     */
    customizeItems?: (
      items: Array<BaseChartLegendItem>
    ) => Array<BaseChartLegendItem>;
    /**
     * [descr:BaseChartOptions.legend.markerTemplate]
     */
    markerTemplate?:
      | DevExpress.core.template
      | ((
          legendItem: BaseChartLegendItem,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
  }
  /**
   * [descr:BaseChartLegendItem]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseChartLegendItem extends BaseLegendItem {
    /**
     * [descr:BaseChartLegendItem.series]
     */
    series?: baseSeriesObject;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseChartOptions<TComponent>
    extends BaseWidgetOptions<TComponent> {
    /**
     * [descr:BaseChartOptions.adaptiveLayout]
     */
    adaptiveLayout?: BaseChartAdaptiveLayout;
    /**
     * [descr:BaseChartOptions.animation]
     */
    animation?:
      | {
          /**
           * [descr:BaseChartOptions.animation.duration]
           */
          duration?: number;
          /**
           * [descr:BaseChartOptions.animation.easing]
           */
          easing?: 'easeOutCubic' | 'linear';
          /**
           * [descr:BaseChartOptions.animation.enabled]
           */
          enabled?: boolean;
          /**
           * [descr:BaseChartOptions.animation.maxPointCountSupported]
           */
          maxPointCountSupported?: number;
        }
      | boolean;
    /**
     * [descr:BaseChartOptions.customizeLabel]
     */
    customizeLabel?: (pointInfo: any) => dxChartSeriesTypesCommonSeriesLabel;
    /**
     * [descr:BaseChartOptions.customizePoint]
     */
    customizePoint?: (pointInfo: any) => dxChartSeriesTypesCommonSeriesPoint;
    /**
     * [descr:BaseChartOptions.dataSource]
     */
    dataSource?: DevExpress.data.DataSource.DataSourceLike<any>;
    /**
     * [descr:BaseChartOptions.legend]
     */
    legend?: BaseChartLegend;
    /**
     * [descr:BaseChartOptions.onDone]
     */
    onDone?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * [descr:BaseChartOptions.onPointClick]
     */
    onPointClick?:
      | ((
          e: DevExpress.events.NativeEventInfo<TComponent> &
            DevExpress.viz.BaseChart.PointInteractionInfo
        ) => void)
      | string;
    /**
     * [descr:BaseChartOptions.onPointHoverChanged]
     */
    onPointHoverChanged?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.viz.BaseChart.PointInteractionInfo
    ) => void;
    /**
     * [descr:BaseChartOptions.onPointSelectionChanged]
     */
    onPointSelectionChanged?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.viz.BaseChart.PointInteractionInfo
    ) => void;
    /**
     * [descr:BaseChartOptions.onTooltipHidden]
     */
    onTooltipHidden?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.viz.BaseChart.TooltipInfo
    ) => void;
    /**
     * [descr:BaseChartOptions.onTooltipShown]
     */
    onTooltipShown?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.viz.BaseChart.TooltipInfo
    ) => void;
    /**
     * [descr:BaseChartOptions.palette]
     */
    palette?: Array<string> | PaletteType;
    /**
     * [descr:BaseChartOptions.paletteExtensionMode]
     */
    paletteExtensionMode?: PaletteExtensionModeType;
    /**
     * [descr:BaseChartOptions.pointSelectionMode]
     */
    pointSelectionMode?: 'multiple' | 'single';
    /**
     * [descr:BaseChartOptions.series]
     */
    series?: any | Array<any>;
    /**
     * [descr:BaseChartOptions.tooltip]
     */
    tooltip?: BaseChartTooltip;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseChartTooltip extends BaseWidgetTooltip {
    /**
     * [descr:BaseChartOptions.tooltip.argumentFormat]
     */
    argumentFormat?: DevExpress.ui.Format;
    /**
     * [descr:BaseChartOptions.tooltip.contentTemplate]
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          pointInfo: any,
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:BaseChartOptions.tooltip.customizeTooltip]
     */
    customizeTooltip?: (pointInfo: any) => any;
    /**
     * [descr:BaseChartOptions.tooltip.shared]
     */
    shared?: boolean;
    /**
     * [descr:BaseChartOptions.tooltip.interactive]
     */
    interactive?: boolean;
  }
  /**
   * [descr:BaseGauge]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class BaseGauge<TProperties> extends BaseWidget<TProperties> {
    /**
     * [descr:BaseGauge.subvalues()]
     */
    subvalues(): Array<number>;
    /**
     * [descr:BaseGauge.subvalues(subvalues)]
     */
    subvalues(subvalues: Array<number>): void;
    /**
     * [descr:BaseGauge.value()]
     */
    value(): number;
    /**
     * [descr:BaseGauge.value(value)]
     */
    value(value: number): void;
  }
  module BaseGauge {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export type GaugeIndicatorType =
      | 'circle'
      | 'rangeBar'
      | 'rectangle'
      | 'rectangleNeedle'
      | 'rhombus'
      | 'textCloud'
      | 'triangleMarker'
      | 'triangleNeedle'
      | 'twoColorNeedle';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface TooltipInfo {
      target: any;
    }
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseGaugeAnimation {
    /**
     * [descr:BaseGaugeOptions.animation.duration]
     */
    duration?: number;
    /**
     * [descr:BaseGaugeOptions.animation.easing]
     */
    easing?: 'easeOutCubic' | 'linear';
    /**
     * [descr:BaseGaugeOptions.animation.enabled]
     */
    enabled?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseGaugeLoadingIndicator
    extends BaseWidgetLoadingIndicator {
    /**
     * [descr:BaseGaugeOptions.loadingIndicator.enabled]
     */
    enabled?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseGaugeOptions<TComponent>
    extends BaseWidgetOptions<TComponent> {
    /**
     * [descr:BaseGaugeOptions.animation]
     */
    animation?: BaseGaugeAnimation;
    /**
     * [descr:BaseGaugeOptions.containerBackgroundColor]
     */
    containerBackgroundColor?: string;
    /**
     * [descr:BaseGaugeOptions.loadingIndicator]
     */
    loadingIndicator?: BaseGaugeLoadingIndicator;
    /**
     * [descr:BaseGaugeOptions.onTooltipHidden]
     */
    onTooltipHidden?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.viz.BaseGauge.TooltipInfo
    ) => void;
    /**
     * [descr:BaseGaugeOptions.onTooltipShown]
     */
    onTooltipShown?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.viz.BaseGauge.TooltipInfo
    ) => void;
    /**
     * [descr:BaseGaugeOptions.rangeContainer]
     */
    rangeContainer?: BaseGaugeRangeContainer;
    /**
     * [descr:BaseGaugeOptions.scale]
     */
    scale?: BaseGaugeScale;
    /**
     * [descr:BaseGaugeOptions.subvalues]
     */
    subvalues?: Array<number>;
    /**
     * [descr:BaseGaugeOptions.tooltip]
     */
    tooltip?: BaseGaugeTooltip;
    /**
     * [descr:BaseGaugeOptions.value]
     */
    value?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseGaugeRangeContainer {
    /**
     * [descr:BaseGaugeOptions.rangeContainer.backgroundColor]
     */
    backgroundColor?: string;
    /**
     * [descr:BaseGaugeOptions.rangeContainer.offset]
     */
    offset?: number;
    /**
     * [descr:BaseGaugeOptions.rangeContainer.palette]
     */
    palette?: Array<string> | PaletteType;
    /**
     * [descr:BaseGaugeOptions.rangeContainer.paletteExtensionMode]
     */
    paletteExtensionMode?: PaletteExtensionModeType;
    /**
     * [descr:BaseGaugeOptions.rangeContainer.ranges]
     */
    ranges?: Array<{
      /**
       * [descr:BaseGaugeOptions.rangeContainer.ranges.color]
       */
      color?: string;
      /**
       * [descr:BaseGaugeOptions.rangeContainer.ranges.endValue]
       */
      endValue?: number;
      /**
       * [descr:BaseGaugeOptions.rangeContainer.ranges.startValue]
       */
      startValue?: number;
    }>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseGaugeScale {
    /**
     * [descr:BaseGaugeOptions.scale.allowDecimals]
     */
    allowDecimals?: boolean;
    /**
     * [descr:BaseGaugeOptions.scale.customMinorTicks]
     */
    customMinorTicks?: Array<number>;
    /**
     * [descr:BaseGaugeOptions.scale.customTicks]
     */
    customTicks?: Array<number>;
    /**
     * [descr:BaseGaugeOptions.scale.endValue]
     */
    endValue?: number;
    /**
     * [descr:BaseGaugeOptions.scale.label]
     */
    label?: BaseGaugeScaleLabel;
    /**
     * [descr:BaseGaugeOptions.scale.minorTick]
     */
    minorTick?: {
      /**
       * [descr:BaseGaugeOptions.scale.minorTick.color]
       */
      color?: string;
      /**
       * [descr:BaseGaugeOptions.scale.minorTick.length]
       */
      length?: number;
      /**
       * [descr:BaseGaugeOptions.scale.minorTick.opacity]
       */
      opacity?: number;
      /**
       * [descr:BaseGaugeOptions.scale.minorTick.visible]
       */
      visible?: boolean;
      /**
       * [descr:BaseGaugeOptions.scale.minorTick.width]
       */
      width?: number;
    };
    /**
     * [descr:BaseGaugeOptions.scale.minorTickInterval]
     */
    minorTickInterval?: number;
    /**
     * [descr:BaseGaugeOptions.scale.scaleDivisionFactor]
     */
    scaleDivisionFactor?: number;
    /**
     * [descr:BaseGaugeOptions.scale.startValue]
     */
    startValue?: number;
    /**
     * [descr:BaseGaugeOptions.scale.tick]
     */
    tick?: {
      /**
       * [descr:BaseGaugeOptions.scale.tick.color]
       */
      color?: string;
      /**
       * [descr:BaseGaugeOptions.scale.tick.length]
       */
      length?: number;
      /**
       * [descr:BaseGaugeOptions.scale.tick.opacity]
       */
      opacity?: number;
      /**
       * [descr:BaseGaugeOptions.scale.tick.visible]
       */
      visible?: boolean;
      /**
       * [descr:BaseGaugeOptions.scale.tick.width]
       */
      width?: number;
    };
    /**
     * [descr:BaseGaugeOptions.scale.tickInterval]
     */
    tickInterval?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseGaugeScaleLabel {
    /**
     * [descr:BaseGaugeOptions.scale.label.customizeText]
     */
    customizeText?: (scaleValue: {
      value?: number;
      valueText?: string;
    }) => string;
    /**
     * [descr:BaseGaugeOptions.scale.label.font]
     */
    font?: Font;
    /**
     * [descr:BaseGaugeOptions.scale.label.format]
     */
    format?: DevExpress.ui.Format;
    /**
     * [descr:BaseGaugeOptions.scale.label.overlappingBehavior]
     */
    overlappingBehavior?: 'hide' | 'none';
    /**
     * [descr:BaseGaugeOptions.scale.label.useRangeColors]
     */
    useRangeColors?: boolean;
    /**
     * [descr:BaseGaugeOptions.scale.label.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseGaugeTooltip extends BaseWidgetTooltip {
    /**
     * [descr:BaseGaugeOptions.tooltip.contentTemplate]
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          scaleValue: { value?: number; valueText?: string },
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:BaseGaugeOptions.tooltip.customizeTooltip]
     */
    customizeTooltip?: (scaleValue: {
      value?: number;
      valueText?: string;
    }) => any;
    /**
     * [descr:BaseGaugeOptions.tooltip.interactive]
     */
    interactive?: boolean;
  }
  /**
   * [descr:baseLabelObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface baseLabelObject {
    /**
     * [descr:baseLabelObject.getBoundingRect()]
     */
    getBoundingRect(): any;
    /**
     * [descr:baseLabelObject.hide()]
     */
    hide(): void;
    /**
     * [descr:baseLabelObject.hide(holdInvisible)]
     */
    hide(holdInvisible: boolean): void;
    /**
     * [descr:baseLabelObject.isVisible()]
     */
    isVisible(): boolean;
    /**
     * [descr:baseLabelObject.show()]
     */
    show(): void;
    /**
     * [descr:baseLabelObject.show(holdVisible)]
     */
    show(holdVisible: boolean): void;
  }
  /**
   * [descr:BaseLegend]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseLegend {
    /**
     * [descr:BaseLegend.backgroundColor]
     */
    backgroundColor?: string;
    /**
     * [descr:BaseLegend.border]
     */
    border?: {
      /**
       * [descr:BaseLegend.border.color]
       */
      color?: string;
      /**
       * [descr:BaseLegend.border.cornerRadius]
       */
      cornerRadius?: number;
      /**
       * [descr:BaseLegend.border.dashStyle]
       */
      dashStyle?: DashStyleType;
      /**
       * [descr:BaseLegend.border.opacity]
       */
      opacity?: number;
      /**
       * [descr:BaseLegend.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:BaseLegend.border.width]
       */
      width?: number;
    };
    /**
     * [descr:BaseLegend.columnCount]
     */
    columnCount?: number;
    /**
     * [descr:BaseLegend.columnItemSpacing]
     */
    columnItemSpacing?: number;
    /**
     * [descr:BaseLegend.font]
     */
    font?: Font;
    /**
     * [descr:BaseLegend.horizontalAlignment]
     */
    horizontalAlignment?: 'center' | 'left' | 'right';
    /**
     * [descr:BaseLegend.itemTextPosition]
     */
    itemTextPosition?: 'bottom' | 'left' | 'right' | 'top';
    /**
     * [descr:BaseLegend.itemsAlignment]
     */
    itemsAlignment?: 'center' | 'left' | 'right';
    /**
     * [descr:BaseLegend.margin]
     */
    margin?:
      | number
      | {
          /**
           * [descr:BaseLegend.margin.bottom]
           */
          bottom?: number;
          /**
           * [descr:BaseLegend.margin.left]
           */
          left?: number;
          /**
           * [descr:BaseLegend.margin.right]
           */
          right?: number;
          /**
           * [descr:BaseLegend.margin.top]
           */
          top?: number;
        };
    /**
     * [descr:BaseLegend.markerSize]
     */
    markerSize?: number;
    /**
     * [descr:BaseLegend.orientation]
     */
    orientation?: 'horizontal' | 'vertical';
    /**
     * [descr:BaseLegend.paddingLeftRight]
     */
    paddingLeftRight?: number;
    /**
     * [descr:BaseLegend.paddingTopBottom]
     */
    paddingTopBottom?: number;
    /**
     * [descr:BaseLegend.rowCount]
     */
    rowCount?: number;
    /**
     * [descr:BaseLegend.rowItemSpacing]
     */
    rowItemSpacing?: number;
    /**
     * [descr:BaseLegend.title]
     */
    title?:
      | {
          /**
           * [descr:BaseLegend.title.font]
           */
          font?: Font;
          /**
           * [descr:BaseLegend.title.horizontalAlignment]
           */
          horizontalAlignment?: 'center' | 'left' | 'right';
          /**
           * [descr:BaseLegend.title.margin]
           */
          margin?: {
            /**
             * [descr:BaseLegend.title.margin.bottom]
             */
            bottom?: number;
            /**
             * [descr:BaseLegend.title.margin.left]
             */
            left?: number;
            /**
             * [descr:BaseLegend.title.margin.right]
             */
            right?: number;
            /**
             * [descr:BaseLegend.title.margin.top]
             */
            top?: number;
          };
          /**
           * [descr:BaseLegend.title.placeholderSize]
           */
          placeholderSize?: number;
          /**
           * [descr:BaseLegend.title.subtitle]
           */
          subtitle?:
            | {
                /**
                 * [descr:BaseLegend.title.subtitle.font]
                 */
                font?: Font;
                /**
                 * [descr:BaseLegend.title.subtitle.offset]
                 */
                offset?: number;
                /**
                 * [descr:BaseLegend.title.subtitle.text]
                 */
                text?: string;
              }
            | string;
          /**
           * [descr:BaseLegend.title.text]
           */
          text?: string;
          /**
           * [descr:BaseLegend.title.verticalAlignment]
           */
          verticalAlignment?: 'bottom' | 'top';
        }
      | string;
    /**
     * [descr:BaseLegend.verticalAlignment]
     */
    verticalAlignment?: 'bottom' | 'top';
    /**
     * [descr:BaseLegend.visible]
     */
    visible?: boolean;
  }
  /**
   * [descr:BaseLegendItem]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseLegendItem {
    /**
     * [descr:BaseLegendItem.marker]
     */
    marker?: {
      /**
       * [descr:BaseLegendItem.marker.fill]
       */
      fill?: string;
      /**
       * [descr:BaseLegendItem.marker.opacity]
       */
      opacity?: number;
      /**
       * [descr:BaseLegendItem.marker.size]
       */
      size?: number;
      /**
       * [descr:BaseLegendItem.marker.state]
       */
      state?: 'normal' | 'hovered' | 'selected';
    };
    /**
     * [descr:BaseLegendItem.text]
     */
    text?: string;
    /**
     * [descr:BaseLegendItem.visible]
     */
    visible?: boolean;
  }
  /**
   * [descr:basePointObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface basePointObject {
    /**
     * [descr:basePointObject.clearHover()]
     */
    clearHover(): void;
    /**
     * [descr:basePointObject.clearSelection()]
     */
    clearSelection(): void;
    /**
     * [descr:basePointObject.data]
     */
    data?: any;
    /**
     * [descr:basePointObject.fullState]
     */
    fullState?: number;
    /**
     * [descr:basePointObject.getColor()]
     */
    getColor(): string;
    /**
     * [descr:basePointObject.getLabel()]
     */
    getLabel(): baseLabelObject & Array<baseLabelObject>;
    /**
     * [descr:basePointObject.hideTooltip()]
     */
    hideTooltip(): void;
    /**
     * [descr:basePointObject.hover()]
     */
    hover(): void;
    /**
     * [descr:basePointObject.isHovered()]
     */
    isHovered(): boolean;
    /**
     * [descr:basePointObject.isSelected()]
     */
    isSelected(): boolean;
    /**
     * [descr:basePointObject.originalArgument]
     */
    originalArgument?: string | number | Date;
    /**
     * [descr:basePointObject.originalValue]
     */
    originalValue?: string | number | Date;
    /**
     * [descr:basePointObject.select()]
     */
    select(): void;
    /**
     * [descr:basePointObject.series]
     */
    series?: any;
    /**
     * [descr:basePointObject.showTooltip()]
     */
    showTooltip(): void;
    /**
     * [descr:basePointObject.tag]
     */
    tag?: any;
  }
  /**
   * [descr:baseSeriesObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface baseSeriesObject {
    /**
     * [descr:baseSeriesObject.clearHover()]
     */
    clearHover(): void;
    /**
     * [descr:baseSeriesObject.clearSelection()]
     */
    clearSelection(): void;
    /**
     * [descr:baseSeriesObject.deselectPoint(point)]
     */
    deselectPoint(point: basePointObject): void;
    /**
     * [descr:baseSeriesObject.fullState]
     */
    fullState?: number;
    /**
     * [descr:baseSeriesObject.getAllPoints()]
     */
    getAllPoints(): Array<basePointObject>;
    /**
     * [descr:baseSeriesObject.getColor()]
     */
    getColor(): string;
    /**
     * [descr:baseSeriesObject.getPointByPos(positionIndex)]
     */
    getPointByPos(positionIndex: number): basePointObject;
    /**
     * [descr:baseSeriesObject.getPointsByArg(pointArg)]
     */
    getPointsByArg(pointArg: number | string | Date): Array<basePointObject>;
    /**
     * [descr:baseSeriesObject.getVisiblePoints()]
     */
    getVisiblePoints(): Array<basePointObject>;
    /**
     * [descr:baseSeriesObject.hide()]
     */
    hide(): void;
    /**
     * [descr:baseSeriesObject.hover()]
     */
    hover(): void;
    /**
     * [descr:baseSeriesObject.isHovered()]
     */
    isHovered(): boolean;
    /**
     * [descr:baseSeriesObject.isSelected()]
     */
    isSelected(): boolean;
    /**
     * [descr:baseSeriesObject.isVisible()]
     */
    isVisible(): boolean;
    /**
     * [descr:baseSeriesObject.name]
     */
    name?: any;
    /**
     * [descr:baseSeriesObject.select()]
     */
    select(): void;
    /**
     * [descr:baseSeriesObject.selectPoint(point)]
     */
    selectPoint(point: basePointObject): void;
    /**
     * [descr:baseSeriesObject.show()]
     */
    show(): void;
    /**
     * [descr:baseSeriesObject.tag]
     */
    tag?: any;
    /**
     * [descr:baseSeriesObject.type]
     */
    type?: string;
  }
  /**
   * [descr:BaseSparkline]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class BaseSparkline<TProperties> extends BaseWidget<TProperties> {
    /**
     * [descr:BaseSparkline.hideLoadingIndicator()]
     */
    hideLoadingIndicator(): void;
    /**
     * [descr:BaseSparkline.showLoadingIndicator()]
     */
    showLoadingIndicator(): void;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseSparklineOptions<TComponent>
    extends BaseWidgetOptions<TComponent> {
    /**
     * [descr:BaseSparklineOptions.export]
     */
    export?: BaseWidgetExport;
    /**
     * [descr:BaseSparklineOptions.loadingIndicator]
     */
    loadingIndicator?: BaseWidgetLoadingIndicator;
    /**
     * [descr:BaseSparklineOptions.onTooltipHidden]
     */
    onTooltipHidden?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * [descr:BaseSparklineOptions.onTooltipShown]
     */
    onTooltipShown?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * [descr:BaseSparklineOptions.redrawOnResize]
     */
    redrawOnResize?: boolean;
    /**
     * [descr:BaseSparklineOptions.title]
     */
    title?: BaseWidgetTitle | string;
    /**
     * [descr:BaseSparklineOptions.tooltip]
     */
    tooltip?: BaseSparklineTooltip;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseSparklineTooltip extends BaseWidgetTooltip {
    /**
     * [descr:BaseSparklineOptions.tooltip.contentTemplate]
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          pointsInfo: any,
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:BaseSparklineOptions.tooltip.customizeTooltip]
     */
    customizeTooltip?: (pointsInfo: any) => any;
    /**
     * [descr:BaseSparklineOptions.tooltip.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:BaseSparklineOptions.tooltip.interactive]
     */
    interactive?: boolean;
  }
  /**
   * [descr:BaseWidget]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export class BaseWidget<TProperties> extends DOMComponent<TProperties> {
    /**
     * [descr:BaseWidget.defaultOptions(rule)]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    static defaultOptions<TProperties>(
      rule: DevExpress.core.DefaultOptionsRule<TProperties>
    ): void;
    /**
     * [descr:BaseWidget.exportTo(fileName, format)]
     */
    exportTo(fileName: string, format: string): void;
    /**
     * [descr:BaseWidget.getSize()]
     */
    getSize(): BaseWidgetSize;
    /**
     * [descr:BaseWidget.hideLoadingIndicator()]
     */
    hideLoadingIndicator(): void;
    /**
     * [descr:BaseWidget.print()]
     */
    print(): void;
    /**
     * [descr:BaseWidget.render()]
     */
    render(): void;
    /**
     * [descr:BaseWidget.showLoadingIndicator()]
     */
    showLoadingIndicator(): void;
    /**
     * [descr:BaseWidget.svg()]
     */
    svg(): string;
  }
  module BaseWidget {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface ExportInfo {
      readonly fileName: string;
      readonly format: string;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export type FileSavingEventInfo<T> = DevExpress.events.Cancelable & {
      readonly component: T;
      readonly element: DevExpress.core.DxElement;
      readonly fileName: string;
      readonly format: string;
      readonly data: Blob;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface IncidentInfo {
      readonly target: any;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export type VizTextOverflowType = 'ellipsis' | 'hide' | 'none';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export type WordWrapType = 'normal' | 'breakWord' | 'none';
  }
  /**
   * [descr:BaseWidgetAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseWidgetAnnotationConfig {
    /**
     * [descr:BaseWidgetAnnotationConfig.allowDragging]
     */
    allowDragging?: boolean;
    /**
     * [descr:BaseWidgetAnnotationConfig.arrowLength]
     */
    arrowLength?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.arrowWidth]
     */
    arrowWidth?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.border]
     */
    border?: {
      /**
       * [descr:BaseWidgetAnnotationConfig.border.color]
       */
      color?: string;
      /**
       * [descr:BaseWidgetAnnotationConfig.border.cornerRadius]
       */
      cornerRadius?: number;
      /**
       * [descr:BaseWidgetAnnotationConfig.border.dashStyle]
       */
      dashStyle?: DashStyleType;
      /**
       * [descr:BaseWidgetAnnotationConfig.border.opacity]
       */
      opacity?: number;
      /**
       * [descr:BaseWidgetAnnotationConfig.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:BaseWidgetAnnotationConfig.border.width]
       */
      width?: number;
    };
    /**
     * [descr:BaseWidgetAnnotationConfig.color]
     */
    color?: string;
    /**
     * [descr:BaseWidgetAnnotationConfig.data]
     */
    data?: any;
    /**
     * [descr:BaseWidgetAnnotationConfig.description]
     */
    description?: string;
    /**
     * [descr:BaseWidgetAnnotationConfig.font]
     */
    font?: Font;
    /**
     * [descr:BaseWidgetAnnotationConfig.height]
     */
    height?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.image]
     */
    image?:
      | string
      | {
          /**
           * [descr:BaseWidgetAnnotationConfig.image.height]
           */
          height?: number;
          /**
           * [descr:BaseWidgetAnnotationConfig.image.url]
           */
          url?: string;
          /**
           * [descr:BaseWidgetAnnotationConfig.image.width]
           */
          width?: number;
        };
    /**
     * [descr:BaseWidgetAnnotationConfig.offsetX]
     */
    offsetX?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.offsetY]
     */
    offsetY?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.opacity]
     */
    opacity?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.paddingLeftRight]
     */
    paddingLeftRight?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.paddingTopBottom]
     */
    paddingTopBottom?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.shadow]
     */
    shadow?: {
      /**
       * [descr:BaseWidgetAnnotationConfig.shadow.blur]
       */
      blur?: number;
      /**
       * [descr:BaseWidgetAnnotationConfig.shadow.color]
       */
      color?: string;
      /**
       * [descr:BaseWidgetAnnotationConfig.shadow.offsetX]
       */
      offsetX?: number;
      /**
       * [descr:BaseWidgetAnnotationConfig.shadow.offsetY]
       */
      offsetY?: number;
      /**
       * [descr:BaseWidgetAnnotationConfig.shadow.opacity]
       */
      opacity?: number;
    };
    /**
     * [descr:BaseWidgetAnnotationConfig.text]
     */
    text?: string;
    /**
     * [descr:BaseWidgetAnnotationConfig.textOverflow]
     */
    textOverflow?: DevExpress.viz.BaseWidget.VizTextOverflowType;
    /**
     * [descr:BaseWidgetAnnotationConfig.tooltipEnabled]
     */
    tooltipEnabled?: boolean;
    /**
     * [descr:BaseWidgetAnnotationConfig.type]
     */
    type?: 'text' | 'image' | 'custom';
    /**
     * [descr:BaseWidgetAnnotationConfig.width]
     */
    width?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.wordWrap]
     */
    wordWrap?: DevExpress.viz.BaseWidget.WordWrapType;
    /**
     * [descr:BaseWidgetAnnotationConfig.x]
     */
    x?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.y]
     */
    y?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseWidgetExport {
    /**
     * [descr:BaseWidgetOptions.export.backgroundColor]
     */
    backgroundColor?: string;
    /**
     * [descr:BaseWidgetOptions.export.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:BaseWidgetOptions.export.fileName]
     */
    fileName?: string;
    /**
     * [descr:BaseWidgetOptions.export.formats]
     */
    formats?: Array<'GIF' | 'JPEG' | 'PDF' | 'PNG' | 'SVG'>;
    /**
     * [descr:BaseWidgetOptions.export.margin]
     */
    margin?: number;
    /**
     * [descr:BaseWidgetOptions.export.printingEnabled]
     */
    printingEnabled?: boolean;
    /**
     * [descr:BaseWidgetOptions.export.proxyUrl]
     * @deprecated [depNote:BaseWidgetOptions.export.proxyUrl]
     */
    proxyUrl?: string;
    /**
     * [descr:BaseWidgetOptions.export.svgToCanvas]
     */
    svgToCanvas?: (
      svg: SVGElement,
      canvas: HTMLCanvasElement
    ) => PromiseLike<void>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseWidgetLoadingIndicator {
    /**
     * [descr:BaseWidgetOptions.loadingIndicator.backgroundColor]
     */
    backgroundColor?: string;
    /**
     * [descr:BaseWidgetOptions.loadingIndicator.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:BaseWidgetOptions.loadingIndicator.font]
     */
    font?: Font;
    /**
     * [descr:BaseWidgetOptions.loadingIndicator.show]
     */
    show?: boolean;
    /**
     * [descr:BaseWidgetOptions.loadingIndicator.text]
     */
    text?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseWidgetMargin {
    /**
     * [descr:BaseWidgetOptions.margin.bottom]
     */
    bottom?: number;
    /**
     * [descr:BaseWidgetOptions.margin.left]
     */
    left?: number;
    /**
     * [descr:BaseWidgetOptions.margin.right]
     */
    right?: number;
    /**
     * [descr:BaseWidgetOptions.margin.top]
     */
    top?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseWidgetOptions<TComponent>
    extends DOMComponentOptions<TComponent> {
    /**
     * [descr:BaseWidgetOptions.disabled]
     */
    disabled?: boolean;
    /**
     * [descr:BaseWidgetOptions.export]
     */
    export?: BaseWidgetExport;
    /**
     * [descr:BaseWidgetOptions.height]
     */
    height?: number | string | (() => number | string);
    /**
     * [descr:BaseWidgetOptions.loadingIndicator]
     */
    loadingIndicator?: BaseWidgetLoadingIndicator;
    /**
     * [descr:BaseWidgetOptions.margin]
     */
    margin?: BaseWidgetMargin;
    /**
     * [descr:BaseWidgetOptions.onDrawn]
     */
    onDrawn?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * [descr:BaseWidgetOptions.onExported]
     */
    onExported?: (e: DevExpress.events.EventInfo<TComponent>) => void;
    /**
     * [descr:BaseWidgetOptions.onExporting]
     */
    onExporting?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.viz.BaseWidget.ExportInfo
    ) => void;
    /**
     * [descr:BaseWidgetOptions.onFileSaving]
     */
    onFileSaving?: (
      e: DevExpress.viz.BaseWidget.FileSavingEventInfo<TComponent>
    ) => void;
    /**
     * [descr:BaseWidgetOptions.onIncidentOccurred]
     */
    onIncidentOccurred?: (
      e: DevExpress.events.EventInfo<TComponent> &
        DevExpress.viz.BaseWidget.IncidentInfo
    ) => void;
    /**
     * [descr:BaseWidgetOptions.pathModified]
     */
    pathModified?: boolean;
    /**
     * [descr:BaseWidgetOptions.redrawOnResize]
     */
    redrawOnResize?: boolean;
    /**
     * [descr:BaseWidgetOptions.rtlEnabled]
     */
    rtlEnabled?: boolean;
    /**
     * [descr:BaseWidgetOptions.size]
     */
    size?: BaseWidgetSize;
    /**
     * [descr:BaseWidgetOptions.theme]
     */
    theme?:
      | 'generic.dark'
      | 'generic.light'
      | 'generic.contrast'
      | 'generic.carmine'
      | 'generic.darkmoon'
      | 'generic.darkviolet'
      | 'generic.greenmist'
      | 'generic.softblue'
      | 'material.blue.light'
      | 'material.lime.light'
      | 'material.orange.light'
      | 'material.purple.light'
      | 'material.teal.light';
    /**
     * [descr:BaseWidgetOptions.title]
     */
    title?: BaseWidgetTitle | string;
    /**
     * [descr:BaseWidgetOptions.tooltip]
     */
    tooltip?: BaseWidgetTooltip;
    /**
     * [descr:BaseWidgetOptions.width]
     */
    width?: number | string | (() => number | string);
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseWidgetSize {
    /**
     * [descr:BaseWidgetOptions.size.height]
     */
    height?: number;
    /**
     * [descr:BaseWidgetOptions.size.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseWidgetTitle {
    /**
     * [descr:BaseWidgetOptions.title.font]
     */
    font?: Font;
    /**
     * [descr:BaseWidgetOptions.title.horizontalAlignment]
     */
    horizontalAlignment?: 'center' | 'left' | 'right';
    /**
     * [descr:BaseWidgetOptions.title.margin]
     */
    margin?:
      | number
      | {
          /**
           * [descr:BaseWidgetOptions.title.margin.bottom]
           */
          bottom?: number;
          /**
           * [descr:BaseWidgetOptions.title.margin.left]
           */
          left?: number;
          /**
           * [descr:BaseWidgetOptions.title.margin.right]
           */
          right?: number;
          /**
           * [descr:BaseWidgetOptions.title.margin.top]
           */
          top?: number;
        };
    /**
     * [descr:BaseWidgetOptions.title.placeholderSize]
     */
    placeholderSize?: number;
    /**
     * [descr:BaseWidgetOptions.title.subtitle]
     */
    subtitle?:
      | {
          /**
           * [descr:BaseWidgetOptions.title.subtitle.font]
           */
          font?: Font;
          /**
           * [descr:BaseWidgetOptions.title.subtitle.offset]
           */
          offset?: number;
          /**
           * [descr:BaseWidgetOptions.title.subtitle.text]
           */
          text?: string;
          /**
           * [descr:BaseWidgetOptions.title.subtitle.textOverflow]
           */
          textOverflow?: DevExpress.viz.BaseWidget.VizTextOverflowType;
          /**
           * [descr:BaseWidgetOptions.title.subtitle.wordWrap]
           */
          wordWrap?: DevExpress.viz.BaseWidget.WordWrapType;
        }
      | string;
    /**
     * [descr:BaseWidgetOptions.title.text]
     */
    text?: string;
    /**
     * [descr:BaseWidgetOptions.title.textOverflow]
     */
    textOverflow?: DevExpress.viz.BaseWidget.VizTextOverflowType;
    /**
     * [descr:BaseWidgetOptions.title.verticalAlignment]
     */
    verticalAlignment?: 'bottom' | 'top';
    /**
     * [descr:BaseWidgetOptions.title.wordWrap]
     */
    wordWrap?: DevExpress.viz.BaseWidget.WordWrapType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface BaseWidgetTooltip {
    /**
     * [descr:BaseWidgetOptions.tooltip.arrowLength]
     */
    arrowLength?: number;
    /**
     * [descr:BaseWidgetOptions.tooltip.border]
     */
    border?: {
      /**
       * [descr:BaseWidgetOptions.tooltip.border.color]
       */
      color?: string;
      /**
       * [descr:BaseWidgetOptions.tooltip.border.dashStyle]
       */
      dashStyle?: DashStyleType;
      /**
       * [descr:BaseWidgetOptions.tooltip.border.opacity]
       */
      opacity?: number;
      /**
       * [descr:BaseWidgetOptions.tooltip.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:BaseWidgetOptions.tooltip.border.width]
       */
      width?: number;
    };
    /**
     * [descr:BaseWidgetOptions.tooltip.color]
     */
    color?: string;
    /**
     * [descr:BaseWidgetOptions.tooltip.container]
     */
    container?: string | DevExpress.core.UserDefinedElement;
    /**
     * [descr:BaseWidgetOptions.tooltip.cornerRadius]
     */
    cornerRadius?: number;
    /**
     * [descr:BaseWidgetOptions.tooltip.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:BaseWidgetOptions.tooltip.font]
     */
    font?: Font;
    /**
     * [descr:BaseWidgetOptions.tooltip.format]
     */
    format?: DevExpress.ui.Format;
    /**
     * [descr:BaseWidgetOptions.tooltip.opacity]
     */
    opacity?: number;
    /**
     * [descr:BaseWidgetOptions.tooltip.paddingLeftRight]
     */
    paddingLeftRight?: number;
    /**
     * [descr:BaseWidgetOptions.tooltip.paddingTopBottom]
     */
    paddingTopBottom?: number;
    /**
     * [descr:BaseWidgetOptions.tooltip.shadow]
     */
    shadow?: {
      /**
       * [descr:BaseWidgetOptions.tooltip.shadow.blur]
       */
      blur?: number;
      /**
       * [descr:BaseWidgetOptions.tooltip.shadow.color]
       */
      color?: string;
      /**
       * [descr:BaseWidgetOptions.tooltip.shadow.offsetX]
       */
      offsetX?: number;
      /**
       * [descr:BaseWidgetOptions.tooltip.shadow.offsetY]
       */
      offsetY?: number;
      /**
       * [descr:BaseWidgetOptions.tooltip.shadow.opacity]
       */
      opacity?: number;
    };
    /**
     * [descr:BaseWidgetOptions.tooltip.zIndex]
     */
    zIndex?: number;
  }
  /**
   * [descr:chartAxisObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface chartAxisObject {
    /**
     * [descr:chartAxisObject.visualRange()]
     */
    visualRange(): VizRange;
    /**
     * [descr:chartAxisObject.visualRange(visualRange)]
     */
    visualRange(visualRange: Array<number | string | Date> | VizRange): void;
  }
  /**
   * [descr:chartPointAggregationInfoObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface chartPointAggregationInfoObject {
    /**
     * [descr:chartPointAggregationInfoObject.aggregationInterval]
     */
    aggregationInterval?: any;
    /**
     * [descr:chartPointAggregationInfoObject.data]
     */
    data?: Array<any>;
    /**
     * [descr:chartPointAggregationInfoObject.intervalEnd]
     */
    intervalEnd?: any;
    /**
     * [descr:chartPointAggregationInfoObject.intervalStart]
     */
    intervalStart?: any;
  }
  /**
   * [descr:chartPointObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface chartPointObject extends basePointObject {
    /**
     * [descr:chartPointObject.aggregationInfo]
     */
    aggregationInfo?: chartPointAggregationInfoObject;
    /**
     * [descr:chartPointObject.getBoundingRect()]
     */
    getBoundingRect(): any;
    /**
     * [descr:chartPointObject.originalCloseValue]
     */
    originalCloseValue?: number | string;
    /**
     * [descr:chartPointObject.originalHighValue]
     */
    originalHighValue?: number | string;
    /**
     * [descr:chartPointObject.originalLowValue]
     */
    originalLowValue?: number | string;
    /**
     * [descr:chartPointObject.originalMinValue]
     */
    originalMinValue?: string | number | Date;
    /**
     * [descr:chartPointObject.originalOpenValue]
     */
    originalOpenValue?: number | string;
    /**
     * [descr:chartPointObject.size]
     */
    size?: number | string;
  }
  /**
   * [descr:ChartSeries]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface ChartSeries extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:ChartSeries.name]
     */
    name?: string;
    /**
     * [descr:ChartSeries.tag]
     */
    tag?: any;
    /**
     * [descr:ChartSeries.type]
     */
    type?: ChartSeriesType;
  }
  /**
   * [descr:chartSeriesObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface chartSeriesObject extends baseSeriesObject {
    /**
     * [descr:chartSeriesObject.axis]
     */
    axis?: string;
    /**
     * [descr:chartSeriesObject.barOverlapGroup]
     */
    barOverlapGroup?: string;
    /**
     * [descr:chartSeriesObject.getArgumentAxis()]
     */
    getArgumentAxis(): chartAxisObject;
    /**
     * [descr:chartSeriesObject.getValueAxis()]
     */
    getValueAxis(): chartAxisObject;
    /**
     * [descr:chartSeriesObject.pane]
     */
    pane?: string;
    /**
     * [descr:chartSeriesObject.stack]
     */
    stack?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type ChartSeriesType =
    | 'area'
    | 'bar'
    | 'bubble'
    | 'candlestick'
    | 'fullstackedarea'
    | 'fullstackedbar'
    | 'fullstackedline'
    | 'fullstackedspline'
    | 'fullstackedsplinearea'
    | 'line'
    | 'rangearea'
    | 'rangebar'
    | 'scatter'
    | 'spline'
    | 'splinearea'
    | 'stackedarea'
    | 'stackedbar'
    | 'stackedline'
    | 'stackedspline'
    | 'stackedsplinearea'
    | 'steparea'
    | 'stepline'
    | 'stock';
  /**
   * [descr:CommonIndicator]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface CommonIndicator {
    /**
     * [descr:CommonIndicator.arrowLength]
     */
    arrowLength?: number;
    /**
     * [descr:CommonIndicator.backgroundColor]
     */
    backgroundColor?: string;
    /**
     * [descr:CommonIndicator.baseValue]
     */
    baseValue?: number;
    /**
     * [descr:CommonIndicator.beginAdaptingAtRadius]
     */
    beginAdaptingAtRadius?: number;
    /**
     * [descr:CommonIndicator.color]
     */
    color?: string;
    /**
     * [descr:CommonIndicator.horizontalOrientation]
     */
    horizontalOrientation?: 'left' | 'right';
    /**
     * [descr:CommonIndicator.indentFromCenter]
     */
    indentFromCenter?: number;
    /**
     * [descr:CommonIndicator.length]
     */
    length?: number;
    /**
     * [descr:CommonIndicator.offset]
     */
    offset?: number;
    /**
     * [descr:CommonIndicator.palette]
     */
    palette?: Array<string> | PaletteType;
    /**
     * [descr:CommonIndicator.secondColor]
     */
    secondColor?: string;
    /**
     * [descr:CommonIndicator.secondFraction]
     */
    secondFraction?: number;
    /**
     * [descr:CommonIndicator.size]
     */
    size?: number;
    /**
     * [descr:CommonIndicator.spindleGapSize]
     */
    spindleGapSize?: number;
    /**
     * [descr:CommonIndicator.spindleSize]
     */
    spindleSize?: number;
    /**
     * [descr:CommonIndicator.text]
     */
    text?: {
      /**
       * [descr:CommonIndicator.text.customizeText]
       */
      customizeText?: (indicatedValue: {
        value?: number;
        valueText?: string;
      }) => string;
      /**
       * [descr:CommonIndicator.text.font]
       */
      font?: Font;
      /**
       * [descr:CommonIndicator.text.format]
       */
      format?: DevExpress.ui.Format;
      /**
       * [descr:CommonIndicator.text.indent]
       */
      indent?: number;
    };
    /**
     * [descr:CommonIndicator.verticalOrientation]
     */
    verticalOrientation?: 'bottom' | 'top';
    /**
     * [descr:CommonIndicator.width]
     */
    width?: number;
  }
  /**
   * [descr:viz.currentPalette()]
   */
  export function currentPalette(): string;
  /**
   * [descr:viz.currentPalette(paletteName)]
   */
  export function currentPalette(paletteName: string): void;
  /**
   * [descr:viz.currentTheme()]
   */
  export function currentTheme(): string;
  /**
   * [descr:viz.currentTheme(platform, colorScheme)]
   */
  export function currentTheme(platform: string, colorScheme: string): void;
  /**
   * [descr:viz.currentTheme(theme)]
   */
  export function currentTheme(theme: string): void;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type DashStyleType = 'dash' | 'dot' | 'longDash' | 'solid';
  /**
   * [descr:dxBarGauge]
   */
  export class dxBarGauge extends BaseWidget<DevExpress.viz.dxBarGauge.Properties> {
    /**
     * [descr:dxBarGauge.values()]
     */
    values(): Array<number>;
    /**
     * [descr:dxBarGauge.values(newValues)]
     */
    values(values: Array<number>): void;
  }
  module dxBarGauge {
    export type DisposingEvent = DevExpress.events.EventInfo<dxBarGauge>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxBarGauge>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxBarGauge>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxBarGauge> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxBarGauge>;
    export type IncidentOccurredEvent =
      DevExpress.events.EventInfo<dxBarGauge> &
        DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxBarGauge>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxBarGauge> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends BaseWidgetOptions<dxBarGauge> {
      /**
       * [descr:Properties.animation]
       */
      animation?: any;
      /**
       * [descr:Properties.backgroundColor]
       */
      backgroundColor?: string;
      /**
       * [descr:Properties.barSpacing]
       */
      barSpacing?: number;
      /**
       * [descr:Properties.baseValue]
       */
      baseValue?: number;
      /**
       * [descr:Properties.endValue]
       */
      endValue?: number;
      /**
       * [descr:Properties.geometry]
       */
      geometry?: {
        /**
         * [descr:Properties.geometry.endAngle]
         */
        endAngle?: number;
        /**
         * [descr:Properties.geometry.startAngle]
         */
        startAngle?: number;
      };
      /**
       * [descr:Properties.label]
       */
      label?: {
        /**
         * [descr:Properties.label.connectorColor]
         */
        connectorColor?: string;
        /**
         * [descr:Properties.label.connectorWidth]
         */
        connectorWidth?: number;
        /**
         * [descr:Properties.label.customizeText]
         */
        customizeText?: (barValue: {
          value?: number;
          valueText?: string;
        }) => string;
        /**
         * [descr:Properties.label.font]
         */
        font?: Font;
        /**
         * [descr:Properties.label.format]
         */
        format?: DevExpress.ui.Format;
        /**
         * [descr:Properties.label.indent]
         */
        indent?: number;
        /**
         * [descr:Properties.label.visible]
         */
        visible?: boolean;
      };
      /**
       * [descr:Properties.legend]
       */
      legend?: dxBarGaugeLegend;
      /**
       * [descr:Properties.loadingIndicator]
       */
      loadingIndicator?: dxBarGaugeLoadingIndicator;
      /**
       * [descr:Properties.onTooltipHidden]
       */
      onTooltipHidden?: (e: TooltipHiddenEvent) => void;
      /**
       * [descr:Properties.onTooltipShown]
       */
      onTooltipShown?: (e: TooltipShownEvent) => void;
      /**
       * [descr:Properties.palette]
       */
      palette?: Array<string> | PaletteType;
      /**
       * [descr:Properties.paletteExtensionMode]
       */
      paletteExtensionMode?: PaletteExtensionModeType;
      /**
       * [descr:Properties.relativeInnerRadius]
       */
      relativeInnerRadius?: number;
      /**
       * [descr:Properties.resolveLabelOverlapping]
       */
      resolveLabelOverlapping?: 'hide' | 'none';
      /**
       * [descr:Properties.startValue]
       */
      startValue?: number;
      /**
       * [descr:Properties.tooltip]
       */
      tooltip?: dxBarGaugeTooltip;
      /**
       * [descr:Properties.values]
       */
      values?: Array<number>;
    }
    export type TooltipHiddenEvent = DevExpress.events.EventInfo<dxBarGauge> &
      TooltipInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface TooltipInfo {
      target?: any;
    }
    export type TooltipShownEvent = DevExpress.events.EventInfo<dxBarGauge> &
      TooltipInfo;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxBarGaugeLegend extends BaseLegend {
    /**
     * [descr:dxBarGaugeOptions.legend.customizeHint]
     */
    customizeHint?: (arg: { item?: BarGaugeBarInfo; text?: string }) => string;
    /**
     * [descr:dxBarGaugeOptions.legend.customizeItems]
     */
    customizeItems?: (
      items: Array<DevExpress.viz.dxBarGauge.LegendItem>
    ) => Array<DevExpress.viz.dxBarGauge.LegendItem>;
    /**
     * [descr:dxBarGaugeOptions.legend.customizeText]
     */
    customizeText?: (arg: { item?: BarGaugeBarInfo; text?: string }) => string;
    /**
     * [descr:dxBarGaugeOptions.legend.itemTextFormat]
     */
    itemTextFormat?: DevExpress.ui.Format;
    /**
     * [descr:dxBarGaugeOptions.legend.markerTemplate]
     */
    markerTemplate?:
      | DevExpress.core.template
      | ((
          legendItem: DevExpress.viz.dxBarGauge.LegendItem,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
    /**
     * [descr:dxBarGaugeOptions.legend.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxBarGaugeLoadingIndicator
    extends BaseWidgetLoadingIndicator {
    /**
     * [descr:dxBarGaugeOptions.loadingIndicator.enabled]
     */
    enabled?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxBarGaugeTooltip extends BaseWidgetTooltip {
    /**
     * [descr:dxBarGaugeOptions.tooltip.contentTemplate]
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          scaleValue: { value?: number; valueText?: string; index?: number },
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:dxBarGaugeOptions.tooltip.customizeTooltip]
     */
    customizeTooltip?: (scaleValue: {
      value?: number;
      valueText?: string;
      index?: number;
    }) => any;
    /**
     * [descr:dxBarGaugeOptions.tooltip.interactive]
     */
    interactive?: boolean;
  }
  /**
   * [descr:dxBullet]
   */
  export class dxBullet extends BaseSparkline<DevExpress.viz.dxBullet.Properties> {}
  module dxBullet {
    export type DisposingEvent = DevExpress.events.EventInfo<dxBullet>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxBullet>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxBullet>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxBullet> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxBullet>;
    export type IncidentOccurredEvent = DevExpress.events.EventInfo<dxBullet> &
      DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxBullet>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxBullet> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends BaseSparklineOptions<dxBullet> {
      /**
       * [descr:Properties.color]
       */
      color?: string;
      /**
       * [descr:Properties.endScaleValue]
       */
      endScaleValue?: number;
      /**
       * [descr:Properties.showTarget]
       */
      showTarget?: boolean;
      /**
       * [descr:Properties.showZeroLevel]
       */
      showZeroLevel?: boolean;
      /**
       * [descr:Properties.startScaleValue]
       */
      startScaleValue?: number;
      /**
       * [descr:Properties.target]
       */
      target?: number;
      /**
       * [descr:Properties.targetColor]
       */
      targetColor?: string;
      /**
       * [descr:Properties.targetWidth]
       */
      targetWidth?: number;
      /**
       * [descr:Properties.value]
       */
      value?: number;
    }
    export type TooltipHiddenEvent = DevExpress.events.EventInfo<dxBullet>;
    export type TooltipShownEvent = DevExpress.events.EventInfo<dxBullet>;
  }
  /**
   * [descr:dxChart]
   */
  export class dxChart extends BaseChart<DevExpress.viz.dxChart.Properties> {
    /**
     * [descr:dxChart.getArgumentAxis()]
     */
    getArgumentAxis(): chartAxisObject;
    /**
     * [descr:dxChart.getValueAxis()]
     */
    getValueAxis(): chartAxisObject;
    /**
     * [descr:dxChart.getValueAxis(name)]
     */
    getValueAxis(name: string): chartAxisObject;
    /**
     * [descr:dxChart.resetVisualRange()]
     */
    resetVisualRange(): void;
    /**
     * [descr:dxChart.zoomArgument(startValue,endValue)]
     */
    zoomArgument(
      startValue: number | Date | string,
      endValue: number | Date | string
    ): void;
  }
  module dxChart {
    export type ArgumentAxisClickEvent =
      DevExpress.events.NativeEventInfo<dxChart> & {
        readonly argument: Date | number | string;
      };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export type ChartSingleValueSeriesAggregationMethodType =
      | 'avg'
      | 'count'
      | 'max'
      | 'min'
      | 'sum'
      | 'custom';
    export type DisposingEvent = DevExpress.events.EventInfo<dxChart>;
    export type DoneEvent = DevExpress.events.EventInfo<dxChart>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxChart>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxChart>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxChart> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxChart>;
    export type IncidentOccurredEvent = DevExpress.events.EventInfo<dxChart> &
      DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxChart>;
    export type LegendClickEvent =
      DevExpress.events.NativeEventInfo<dxChart> & {
        readonly target: chartSeriesObject;
      };
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxChart> &
      DevExpress.events.ChangedOptionInfo;
    export type PointClickEvent = DevExpress.events.NativeEventInfo<dxChart> &
      DevExpress.viz.BaseChart.PointInteractionInfo;
    export type PointHoverChangedEvent = DevExpress.events.EventInfo<dxChart> &
      DevExpress.viz.BaseChart.PointInteractionInfo;
    export type PointSelectionChangedEvent =
      DevExpress.events.EventInfo<dxChart> &
        DevExpress.viz.BaseChart.PointInteractionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends BaseChartOptions<dxChart> {
      /**
       * [descr:Properties.adjustOnZoom]
       */
      adjustOnZoom?: boolean;
      /**
       * [descr:Properties.annotations]
       */
      annotations?: Array<dxChartAnnotationConfig | any>;
      /**
       * [descr:Properties.argumentAxis]
       */
      argumentAxis?: dxChartArgumentAxis;
      /**
       * [descr:Properties.autoHidePointMarkers]
       */
      autoHidePointMarkers?: boolean;
      /**
       * [descr:Properties.barGroupPadding]
       */
      barGroupPadding?: number;
      /**
       * [descr:Properties.barGroupWidth]
       */
      barGroupWidth?: number;
      /**
       * [descr:Properties.commonAnnotationSettings]
       */
      commonAnnotationSettings?: dxChartCommonAnnotationConfig;
      /**
       * [descr:Properties.commonAxisSettings]
       */
      commonAxisSettings?: dxChartCommonAxisSettings;
      /**
       * [descr:Properties.commonPaneSettings]
       */
      commonPaneSettings?: dxChartCommonPaneSettings;
      /**
       * [descr:Properties.commonSeriesSettings]
       */
      commonSeriesSettings?: dxChartCommonSeriesSettings;
      /**
       * [descr:Properties.containerBackgroundColor]
       */
      containerBackgroundColor?: string;
      /**
       * [descr:Properties.crosshair]
       */
      crosshair?: {
        /**
         * [descr:Properties.crosshair.color]
         */
        color?: string;
        /**
         * [descr:Properties.crosshair.dashStyle]
         */
        dashStyle?: DashStyleType;
        /**
         * [descr:Properties.crosshair.enabled]
         */
        enabled?: boolean;
        /**
         * [descr:Properties.crosshair.horizontalLine]
         */
        horizontalLine?:
          | {
              /**
               * [descr:Properties.crosshair.horizontalLine.color]
               */
              color?: string;
              /**
               * [descr:Properties.crosshair.horizontalLine.dashStyle]
               */
              dashStyle?: DashStyleType;
              /**
               * [descr:Properties.crosshair.horizontalLine.label]
               */
              label?: {
                /**
                 * [descr:Properties.crosshair.horizontalLine.label.backgroundColor]
                 */
                backgroundColor?: string;
                /**
                 * [descr:Properties.crosshair.horizontalLine.label.customizeText]
                 */
                customizeText?: (info: {
                  value?: Date | number | string;
                  valueText?: string;
                  point?: chartPointObject;
                }) => string;
                /**
                 * [descr:Properties.crosshair.horizontalLine.label.font]
                 */
                font?: Font;
                /**
                 * [descr:Properties.crosshair.horizontalLine.label.format]
                 */
                format?: DevExpress.ui.Format;
                /**
                 * [descr:Properties.crosshair.horizontalLine.label.visible]
                 */
                visible?: boolean;
              };
              /**
               * [descr:Properties.crosshair.horizontalLine.opacity]
               */
              opacity?: number;
              /**
               * [descr:Properties.crosshair.horizontalLine.visible]
               */
              visible?: boolean;
              /**
               * [descr:Properties.crosshair.horizontalLine.width]
               */
              width?: number;
            }
          | boolean;
        /**
         * [descr:Properties.crosshair.label]
         */
        label?: {
          /**
           * [descr:Properties.crosshair.label.backgroundColor]
           */
          backgroundColor?: string;
          /**
           * [descr:Properties.crosshair.label.customizeText]
           */
          customizeText?: (info: {
            value?: Date | number | string;
            valueText?: string;
            point?: chartPointObject;
          }) => string;
          /**
           * [descr:Properties.crosshair.label.font]
           */
          font?: Font;
          /**
           * [descr:Properties.crosshair.label.format]
           */
          format?: DevExpress.ui.Format;
          /**
           * [descr:Properties.crosshair.label.visible]
           */
          visible?: boolean;
        };
        /**
         * [descr:Properties.crosshair.opacity]
         */
        opacity?: number;
        /**
         * [descr:Properties.crosshair.verticalLine]
         */
        verticalLine?:
          | {
              /**
               * [descr:Properties.crosshair.verticalLine.color]
               */
              color?: string;
              /**
               * [descr:Properties.crosshair.verticalLine.dashStyle]
               */
              dashStyle?: DashStyleType;
              /**
               * [descr:Properties.crosshair.verticalLine.label]
               */
              label?: {
                /**
                 * [descr:Properties.crosshair.verticalLine.label.backgroundColor]
                 */
                backgroundColor?: string;
                /**
                 * [descr:Properties.crosshair.verticalLine.label.customizeText]
                 */
                customizeText?: (info: {
                  value?: Date | number | string;
                  valueText?: string;
                  point?: chartPointObject;
                }) => string;
                /**
                 * [descr:Properties.crosshair.verticalLine.label.font]
                 */
                font?: Font;
                /**
                 * [descr:Properties.crosshair.verticalLine.label.format]
                 */
                format?: DevExpress.ui.Format;
                /**
                 * [descr:Properties.crosshair.verticalLine.label.visible]
                 */
                visible?: boolean;
              };
              /**
               * [descr:Properties.crosshair.verticalLine.opacity]
               */
              opacity?: number;
              /**
               * [descr:Properties.crosshair.verticalLine.visible]
               */
              visible?: boolean;
              /**
               * [descr:Properties.crosshair.verticalLine.width]
               */
              width?: number;
            }
          | boolean;
        /**
         * [descr:Properties.crosshair.width]
         */
        width?: number;
      };
      /**
       * [descr:Properties.customizeAnnotation]
       */
      customizeAnnotation?: (
        annotation: dxChartAnnotationConfig | any
      ) => dxChartAnnotationConfig;
      /**
       * [descr:Properties.dataPrepareSettings]
       */
      dataPrepareSettings?: {
        /**
         * [descr:Properties.dataPrepareSettings.checkTypeForAllData]
         */
        checkTypeForAllData?: boolean;
        /**
         * [descr:Properties.dataPrepareSettings.convertToAxisDataType]
         */
        convertToAxisDataType?: boolean;
        /**
         * [descr:Properties.dataPrepareSettings.sortingMethod]
         */
        sortingMethod?: boolean | ((a: any, b: any) => number);
      };
      /**
       * [descr:Properties.defaultPane]
       */
      defaultPane?: string;
      /**
       * [descr:Properties.legend]
       */
      legend?: dxChartLegend;
      /**
       * [descr:Properties.maxBubbleSize]
       */
      maxBubbleSize?: number;
      /**
       * [descr:Properties.minBubbleSize]
       */
      minBubbleSize?: number;
      /**
       * [descr:Properties.negativesAsZeroes]
       */
      negativesAsZeroes?: boolean;
      /**
       * [descr:Properties.onArgumentAxisClick]
       */
      onArgumentAxisClick?: ((e: ArgumentAxisClickEvent) => void) | string;
      /**
       * [descr:Properties.onLegendClick]
       */
      onLegendClick?: ((e: LegendClickEvent) => void) | string;
      /**
       * [descr:Properties.onSeriesClick]
       */
      onSeriesClick?: ((e: SeriesClickEvent) => void) | string;
      /**
       * [descr:Properties.onSeriesHoverChanged]
       */
      onSeriesHoverChanged?: (e: SeriesHoverChangedEvent) => void;
      /**
       * [descr:Properties.onSeriesSelectionChanged]
       */
      onSeriesSelectionChanged?: (e: SeriesSelectionChangedEvent) => void;
      /**
       * [descr:Properties.onZoomEnd]
       */
      onZoomEnd?: (e: ZoomEndEvent) => void;
      /**
       * [descr:Properties.onZoomStart]
       */
      onZoomStart?: (e: ZoomStartEvent) => void;
      /**
       * [descr:Properties.panes]
       */
      panes?: dxChartPanes | Array<dxChartPanes>;
      /**
       * [descr:Properties.resizePanesOnZoom]
       */
      resizePanesOnZoom?: boolean;
      /**
       * [descr:Properties.resolveLabelOverlapping]
       */
      resolveLabelOverlapping?: 'hide' | 'none' | 'stack';
      /**
       * [descr:Properties.rotated]
       */
      rotated?: boolean;
      /**
       * [descr:Properties.scrollBar]
       */
      scrollBar?: {
        /**
         * [descr:Properties.scrollBar.color]
         */
        color?: string;
        /**
         * [descr:Properties.scrollBar.offset]
         */
        offset?: number;
        /**
         * [descr:Properties.scrollBar.opacity]
         */
        opacity?: number;
        /**
         * [descr:Properties.scrollBar.position]
         */
        position?: 'bottom' | 'left' | 'right' | 'top';
        /**
         * [descr:Properties.scrollBar.visible]
         */
        visible?: boolean;
        /**
         * [descr:Properties.scrollBar.width]
         */
        width?: number;
      };
      /**
       * [descr:Properties.series]
       */
      series?: ChartSeries | Array<ChartSeries>;
      /**
       * [descr:Properties.seriesSelectionMode]
       */
      seriesSelectionMode?: 'multiple' | 'single';
      /**
       * [descr:Properties.seriesTemplate]
       */
      seriesTemplate?: {
        /**
         * [descr:Properties.seriesTemplate.customizeSeries]
         */
        customizeSeries?: (seriesName: any) => ChartSeries;
        /**
         * [descr:Properties.seriesTemplate.nameField]
         */
        nameField?: string;
      };
      /**
       * [descr:Properties.stickyHovering]
       */
      stickyHovering?: boolean;
      /**
       * [descr:Properties.synchronizeMultiAxes]
       */
      synchronizeMultiAxes?: boolean;
      /**
       * [descr:Properties.tooltip]
       */
      tooltip?: dxChartTooltip;
      /**
       * [descr:Properties.valueAxis]
       */
      valueAxis?: dxChartValueAxis | Array<dxChartValueAxis>;
      /**
       * [descr:Properties.zoomAndPan]
       */
      zoomAndPan?: {
        /**
         * [descr:Properties.zoomAndPan.allowMouseWheel]
         */
        allowMouseWheel?: boolean;
        /**
         * [descr:Properties.zoomAndPan.allowTouchGestures]
         */
        allowTouchGestures?: boolean;
        /**
         * [descr:Properties.zoomAndPan.argumentAxis]
         */
        argumentAxis?: 'both' | 'none' | 'pan' | 'zoom';
        /**
         * [descr:Properties.zoomAndPan.dragBoxStyle]
         */
        dragBoxStyle?: {
          /**
           * [descr:Properties.zoomAndPan.dragBoxStyle.color]
           */
          color?: string;
          /**
           * [descr:Properties.zoomAndPan.dragBoxStyle.opacity]
           */
          opacity?: number;
        };
        /**
         * [descr:Properties.zoomAndPan.dragToZoom]
         */
        dragToZoom?: boolean;
        /**
         * [descr:Properties.zoomAndPan.panKey]
         */
        panKey?: 'alt' | 'ctrl' | 'meta' | 'shift';
        /**
         * [descr:Properties.zoomAndPan.valueAxis]
         */
        valueAxis?: 'both' | 'none' | 'pan' | 'zoom';
      };
    }
    export type SeriesClickEvent =
      DevExpress.events.NativeEventInfo<dxChart> & {
        readonly target: chartSeriesObject;
      };
    export type SeriesHoverChangedEvent = DevExpress.events.EventInfo<dxChart> &
      SeriesInteractionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface SeriesInteractionInfo {
      target: chartSeriesObject;
    }
    export type SeriesSelectionChangedEvent =
      DevExpress.events.EventInfo<dxChart> & SeriesInteractionInfo;
    export type TooltipHiddenEvent = DevExpress.events.EventInfo<dxChart> &
      DevExpress.viz.BaseChart.TooltipInfo;
    export type TooltipShownEvent = DevExpress.events.EventInfo<dxChart> &
      DevExpress.viz.BaseChart.TooltipInfo;
    export type ZoomEndEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxChart> & {
        readonly rangeStart: Date | number;
        readonly rangeEnd: Date | number;
        readonly axis: chartAxisObject;
        readonly range: VizRange;
        readonly previousRange: VizRange;
        readonly actionType: 'zoom' | 'pan';
        readonly zoomFactor: number;
        readonly shift: number;
      };
    export type ZoomStartEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxChart> & {
        readonly axis: chartAxisObject;
        readonly range: VizRange;
        readonly actionType?: 'zoom' | 'pan';
      };
  }
  /**
   * [descr:dxChartAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartAnnotationConfig
    extends dxChartCommonAnnotationConfig {
    /**
     * [descr:dxChartAnnotationConfig.name]
     */
    name?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartArgumentAxis extends dxChartCommonAxisSettings {
    /**
     * [descr:dxChartOptions.argumentAxis.aggregateByCategory]
     */
    aggregateByCategory?: boolean;
    /**
     * [descr:dxChartOptions.argumentAxis.aggregationGroupWidth]
     */
    aggregationGroupWidth?: number;
    /**
     * [descr:dxChartOptions.argumentAxis.aggregationInterval]
     */
    aggregationInterval?: VizTimeInterval;
    /**
     * [descr:dxChartOptions.argumentAxis.argumentType]
     */
    argumentType?: 'datetime' | 'numeric' | 'string';
    /**
     * [descr:dxChartOptions.argumentAxis.axisDivisionFactor]
     */
    axisDivisionFactor?: number;
    /**
     * [descr:dxChartOptions.argumentAxis.breaks]
     */
    breaks?: Array<ScaleBreak>;
    /**
     * [descr:dxChartOptions.argumentAxis.categories]
     */
    categories?: Array<number | string | Date>;
    /**
     * [descr:dxChartOptions.argumentAxis.constantLineStyle]
     */
    constantLineStyle?: dxChartArgumentAxisConstantLineStyle;
    /**
     * [descr:dxChartOptions.argumentAxis.constantLines]
     */
    constantLines?: Array<dxChartArgumentAxisConstantLines>;
    /**
     * [descr:dxChartOptions.argumentAxis.endOnTick]
     */
    endOnTick?: boolean;
    /**
     * [descr:dxChartOptions.argumentAxis.holidays]
     */
    holidays?: Array<Date | string> | Array<number>;
    /**
     * [descr:dxChartOptions.argumentAxis.hoverMode]
     */
    hoverMode?: 'allArgumentPoints' | 'none';
    /**
     * [descr:dxChartOptions.argumentAxis.label]
     */
    label?: dxChartArgumentAxisLabel;
    /**
     * [descr:dxChartOptions.argumentAxis.linearThreshold]
     */
    linearThreshold?: number;
    /**
     * [descr:dxChartOptions.argumentAxis.logarithmBase]
     */
    logarithmBase?: number;
    /**
     * [descr:dxChartOptions.argumentAxis.minVisualRangeLength]
     */
    minVisualRangeLength?: VizTimeInterval;
    /**
     * [descr:dxChartOptions.argumentAxis.minorTickCount]
     */
    minorTickCount?: number;
    /**
     * [descr:dxChartOptions.argumentAxis.minorTickInterval]
     */
    minorTickInterval?: VizTimeInterval;
    /**
     * [descr:dxChartOptions.argumentAxis.position]
     */
    position?: 'bottom' | 'left' | 'right' | 'top';
    /**
     * [descr:dxChartOptions.argumentAxis.customPosition]
     */
    customPosition?: number | Date | string;
    /**
     * [descr:dxChartOptions.argumentAxis.customPositionAxis]
     */
    customPositionAxis?: string;
    /**
     * [descr:dxChartOptions.argumentAxis.offset]
     */
    offset?: number;
    /**
     * [descr:dxChartOptions.argumentAxis.singleWorkdays]
     */
    singleWorkdays?: Array<Date | string> | Array<number>;
    /**
     * [descr:dxChartOptions.argumentAxis.strips]
     */
    strips?: Array<dxChartArgumentAxisStrips>;
    /**
     * [descr:dxChartOptions.argumentAxis.tickInterval]
     */
    tickInterval?: VizTimeInterval;
    /**
     * [descr:dxChartOptions.argumentAxis.title]
     */
    title?: dxChartArgumentAxisTitle;
    /**
     * [descr:dxChartOptions.argumentAxis.type]
     */
    type?: 'continuous' | 'discrete' | 'logarithmic';
    /**
     * [descr:dxChartOptions.argumentAxis.visualRange]
     */
    visualRange?: VizRange | Array<number | string | Date>;
    /**
     * [descr:dxChartOptions.argumentAxis.visualRangeUpdateMode]
     */
    visualRangeUpdateMode?: 'auto' | 'keep' | 'reset' | 'shift';
    /**
     * [descr:dxChartOptions.argumentAxis.wholeRange]
     */
    wholeRange?: VizRange | Array<number | string | Date>;
    /**
     * [descr:dxChartOptions.argumentAxis.workWeek]
     */
    workWeek?: Array<number>;
    /**
     * [descr:dxChartOptions.argumentAxis.workdaysOnly]
     */
    workdaysOnly?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartArgumentAxisConstantLines
    extends dxChartCommonAxisSettingsConstantLineStyle {
    /**
     * [descr:dxChartOptions.argumentAxis.constantLines.displayBehindSeries]
     */
    displayBehindSeries?: boolean;
    /**
     * [descr:dxChartOptions.argumentAxis.constantLines.extendAxis]
     */
    extendAxis?: boolean;
    /**
     * [descr:dxChartOptions.argumentAxis.constantLines.label]
     */
    label?: dxChartArgumentAxisConstantLinesLabel;
    /**
     * [descr:dxChartOptions.argumentAxis.constantLines.value]
     */
    value?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartArgumentAxisConstantLinesLabel
    extends dxChartCommonAxisSettingsConstantLineStyleLabel {
    /**
     * [descr:dxChartOptions.argumentAxis.constantLines.label.horizontalAlignment]
     */
    horizontalAlignment?: 'center' | 'left' | 'right';
    /**
     * [descr:dxChartOptions.argumentAxis.constantLines.label.text]
     */
    text?: string;
    /**
     * [descr:dxChartOptions.argumentAxis.constantLines.label.verticalAlignment]
     */
    verticalAlignment?: 'bottom' | 'center' | 'top';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartArgumentAxisConstantLineStyle
    extends dxChartCommonAxisSettingsConstantLineStyle {
    /**
     * [descr:dxChartOptions.argumentAxis.constantLineStyle.label]
     */
    label?: dxChartArgumentAxisConstantLineStyleLabel;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartArgumentAxisConstantLineStyleLabel
    extends dxChartCommonAxisSettingsConstantLineStyleLabel {
    /**
     * [descr:dxChartOptions.argumentAxis.constantLineStyle.label.horizontalAlignment]
     */
    horizontalAlignment?: 'center' | 'left' | 'right';
    /**
     * [descr:dxChartOptions.argumentAxis.constantLineStyle.label.verticalAlignment]
     */
    verticalAlignment?: 'bottom' | 'center' | 'top';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartArgumentAxisLabel
    extends dxChartCommonAxisSettingsLabel {
    /**
     * [descr:dxChartOptions.argumentAxis.label.customizeHint]
     */
    customizeHint?: (argument: {
      value?: Date | number | string;
      valueText?: string;
    }) => string;
    /**
     * [descr:dxChartOptions.argumentAxis.label.customizeText]
     */
    customizeText?: (argument: {
      value?: Date | number | string;
      valueText?: string;
    }) => string;
    /**
     * [descr:dxChartOptions.argumentAxis.label.format]
     */
    format?: DevExpress.ui.Format;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartArgumentAxisStrips
    extends dxChartCommonAxisSettingsStripStyle {
    /**
     * [descr:dxChartOptions.argumentAxis.strips.color]
     */
    color?: string;
    /**
     * [descr:dxChartOptions.argumentAxis.strips.endValue]
     */
    endValue?: number | Date | string;
    /**
     * [descr:dxChartOptions.argumentAxis.strips.label]
     */
    label?: dxChartArgumentAxisStripsLabel;
    /**
     * [descr:dxChartOptions.argumentAxis.strips.startValue]
     */
    startValue?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartArgumentAxisStripsLabel
    extends dxChartCommonAxisSettingsStripStyleLabel {
    /**
     * [descr:dxChartOptions.argumentAxis.strips.label.text]
     */
    text?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartArgumentAxisTitle
    extends dxChartCommonAxisSettingsTitle {
    /**
     * [descr:dxChartOptions.argumentAxis.title.text]
     */
    text?: string;
  }
  /**
   * [descr:dxChartCommonAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartCommonAnnotationConfig
    extends BaseChartAnnotationConfig {
    /**
     * [descr:dxChartCommonAnnotationConfig.axis]
     */
    axis?: string;
    /**
     * [descr:dxChartCommonAnnotationConfig.customizeTooltip]
     */
    customizeTooltip?: (annotation: dxChartAnnotationConfig | any) => any;
    /**
     * [descr:dxChartCommonAnnotationConfig.template]
     */
    template?:
      | DevExpress.core.template
      | ((
          annotation: dxChartAnnotationConfig | any,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
    /**
     * [descr:dxChartCommonAnnotationConfig.tooltipTemplate]
     */
    tooltipTemplate?:
      | DevExpress.core.template
      | ((
          annotation: dxChartAnnotationConfig | any,
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartCommonAxisSettings {
    /**
     * [descr:dxChartOptions.commonAxisSettings.allowDecimals]
     */
    allowDecimals?: boolean;
    /**
     * [descr:dxChartOptions.commonAxisSettings.breakStyle]
     */
    breakStyle?: {
      /**
       * [descr:dxChartOptions.commonAxisSettings.breakStyle.color]
       */
      color?: string;
      /**
       * [descr:dxChartOptions.commonAxisSettings.breakStyle.line]
       */
      line?: 'straight' | 'waved';
      /**
       * [descr:dxChartOptions.commonAxisSettings.breakStyle.width]
       */
      width?: number;
    };
    /**
     * [descr:dxChartOptions.commonAxisSettings.color]
     */
    color?: string;
    /**
     * [descr:dxChartOptions.commonAxisSettings.constantLineStyle]
     */
    constantLineStyle?: dxChartCommonAxisSettingsConstantLineStyle;
    /**
     * [descr:dxChartOptions.commonAxisSettings.discreteAxisDivisionMode]
     */
    discreteAxisDivisionMode?: 'betweenLabels' | 'crossLabels';
    /**
     * [descr:dxChartOptions.commonAxisSettings.endOnTick]
     */
    endOnTick?: boolean;
    /**
     * [descr:dxChartOptions.commonAxisSettings.grid]
     */
    grid?: {
      /**
       * [descr:dxChartOptions.commonAxisSettings.grid.color]
       */
      color?: string;
      /**
       * [descr:dxChartOptions.commonAxisSettings.grid.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.grid.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxChartOptions.commonAxisSettings.grid.width]
       */
      width?: number;
    };
    /**
     * [descr:dxChartOptions.commonAxisSettings.inverted]
     */
    inverted?: boolean;
    /**
     * [descr:dxChartOptions.commonAxisSettings.label]
     */
    label?: dxChartCommonAxisSettingsLabel;
    /**
     * [descr:dxChartOptions.commonAxisSettings.maxValueMargin]
     */
    maxValueMargin?: number;
    /**
     * [descr:dxChartOptions.commonAxisSettings.minValueMargin]
     */
    minValueMargin?: number;
    /**
     * [descr:dxChartOptions.commonAxisSettings.minorGrid]
     */
    minorGrid?: {
      /**
       * [descr:dxChartOptions.commonAxisSettings.minorGrid.color]
       */
      color?: string;
      /**
       * [descr:dxChartOptions.commonAxisSettings.minorGrid.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.minorGrid.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxChartOptions.commonAxisSettings.minorGrid.width]
       */
      width?: number;
    };
    /**
     * [descr:dxChartOptions.commonAxisSettings.minorTick]
     */
    minorTick?: {
      /**
       * [descr:dxChartOptions.commonAxisSettings.minorTick.color]
       */
      color?: string;
      /**
       * [descr:dxChartOptions.commonAxisSettings.minorTick.length]
       */
      length?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.minorTick.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.minorTick.shift]
       */
      shift?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.minorTick.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxChartOptions.commonAxisSettings.minorTick.width]
       */
      width?: number;
    };
    /**
     * [descr:dxChartOptions.commonAxisSettings.opacity]
     */
    opacity?: number;
    /**
     * [descr:dxChartOptions.commonAxisSettings.placeholderSize]
     */
    placeholderSize?: number;
    /**
     * [descr:dxChartOptions.commonAxisSettings.stripStyle]
     */
    stripStyle?: dxChartCommonAxisSettingsStripStyle;
    /**
     * [descr:dxChartOptions.commonAxisSettings.tick]
     */
    tick?: {
      /**
       * [descr:dxChartOptions.commonAxisSettings.tick.color]
       */
      color?: string;
      /**
       * [descr:dxChartOptions.commonAxisSettings.tick.length]
       */
      length?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.tick.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.tick.shift]
       */
      shift?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.tick.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxChartOptions.commonAxisSettings.tick.width]
       */
      width?: number;
    };
    /**
     * [descr:dxChartOptions.commonAxisSettings.title]
     */
    title?: dxChartCommonAxisSettingsTitle;
    /**
     * [descr:dxChartOptions.commonAxisSettings.valueMarginsEnabled]
     */
    valueMarginsEnabled?: boolean;
    /**
     * [descr:dxChartOptions.commonAxisSettings.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxChartOptions.commonAxisSettings.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartCommonAxisSettingsConstantLineStyle {
    /**
     * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.color]
     */
    color?: string;
    /**
     * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.dashStyle]
     */
    dashStyle?: DashStyleType;
    /**
     * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.label]
     */
    label?: dxChartCommonAxisSettingsConstantLineStyleLabel;
    /**
     * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.paddingLeftRight]
     */
    paddingLeftRight?: number;
    /**
     * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.paddingTopBottom]
     */
    paddingTopBottom?: number;
    /**
     * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartCommonAxisSettingsConstantLineStyleLabel {
    /**
     * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.label.font]
     */
    font?: Font;
    /**
     * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.label.position]
     */
    position?: 'inside' | 'outside';
    /**
     * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.label.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartCommonAxisSettingsLabel {
    /**
     * [descr:dxChartOptions.commonAxisSettings.label.template]
     */
    template?:
      | DevExpress.core.template
      | ((
          data: object,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
    /**
     * [descr:dxChartOptions.commonAxisSettings.label.alignment]
     */
    alignment?: 'center' | 'left' | 'right';
    /**
     * [descr:dxChartOptions.commonAxisSettings.label.displayMode]
     */
    displayMode?: 'rotate' | 'stagger' | 'standard';
    /**
     * [descr:dxChartOptions.commonAxisSettings.label.font]
     */
    font?: Font;
    /**
     * [descr:dxChartOptions.commonAxisSettings.label.indentFromAxis]
     */
    indentFromAxis?: number;
    /**
     * [descr:dxChartOptions.commonAxisSettings.label.overlappingBehavior]
     */
    overlappingBehavior?: 'rotate' | 'stagger' | 'none' | 'hide';
    /**
     * [descr:dxChartOptions.commonAxisSettings.label.position]
     */
    position?: 'inside' | 'outside' | 'bottom' | 'left' | 'right' | 'top';
    /**
     * [descr:dxChartOptions.commonAxisSettings.label.rotationAngle]
     */
    rotationAngle?: number;
    /**
     * [descr:dxChartOptions.commonAxisSettings.label.staggeringSpacing]
     */
    staggeringSpacing?: number;
    /**
     * [descr:dxChartOptions.commonAxisSettings.label.textOverflow]
     */
    textOverflow?: DevExpress.viz.BaseWidget.VizTextOverflowType;
    /**
     * [descr:dxChartOptions.commonAxisSettings.label.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxChartOptions.commonAxisSettings.label.wordWrap]
     */
    wordWrap?: DevExpress.viz.BaseWidget.WordWrapType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartCommonAxisSettingsStripStyle {
    /**
     * [descr:dxChartOptions.commonAxisSettings.stripStyle.label]
     */
    label?: dxChartCommonAxisSettingsStripStyleLabel;
    /**
     * [descr:dxChartOptions.commonAxisSettings.stripStyle.paddingLeftRight]
     */
    paddingLeftRight?: number;
    /**
     * [descr:dxChartOptions.commonAxisSettings.stripStyle.paddingTopBottom]
     */
    paddingTopBottom?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartCommonAxisSettingsStripStyleLabel {
    /**
     * [descr:dxChartOptions.commonAxisSettings.stripStyle.label.font]
     */
    font?: Font;
    /**
     * [descr:dxChartOptions.commonAxisSettings.stripStyle.label.horizontalAlignment]
     */
    horizontalAlignment?: 'center' | 'left' | 'right';
    /**
     * [descr:dxChartOptions.commonAxisSettings.stripStyle.label.verticalAlignment]
     */
    verticalAlignment?: 'bottom' | 'center' | 'top';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartCommonAxisSettingsTitle {
    /**
     * [descr:dxChartOptions.commonAxisSettings.title.alignment]
     */
    alignment?: 'center' | 'left' | 'right';
    /**
     * [descr:dxChartOptions.commonAxisSettings.title.font]
     */
    font?: Font;
    /**
     * [descr:dxChartOptions.commonAxisSettings.title.margin]
     */
    margin?: number;
    /**
     * [descr:dxChartOptions.commonAxisSettings.title.textOverflow]
     */
    textOverflow?: DevExpress.viz.BaseWidget.VizTextOverflowType;
    /**
     * [descr:dxChartOptions.commonAxisSettings.title.wordWrap]
     */
    wordWrap?: DevExpress.viz.BaseWidget.WordWrapType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartCommonPaneSettings {
    /**
     * [descr:dxChartOptions.commonPaneSettings.backgroundColor]
     */
    backgroundColor?: string;
    /**
     * [descr:dxChartOptions.commonPaneSettings.border]
     */
    border?: {
      /**
       * [descr:dxChartOptions.commonPaneSettings.border.bottom]
       */
      bottom?: boolean;
      /**
       * [descr:dxChartOptions.commonPaneSettings.border.color]
       */
      color?: string;
      /**
       * [descr:dxChartOptions.commonPaneSettings.border.dashStyle]
       */
      dashStyle?: DashStyleType;
      /**
       * [descr:dxChartOptions.commonPaneSettings.border.left]
       */
      left?: boolean;
      /**
       * [descr:dxChartOptions.commonPaneSettings.border.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxChartOptions.commonPaneSettings.border.right]
       */
      right?: boolean;
      /**
       * [descr:dxChartOptions.commonPaneSettings.border.top]
       */
      top?: boolean;
      /**
       * [descr:dxChartOptions.commonPaneSettings.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxChartOptions.commonPaneSettings.border.width]
       */
      width?: number;
    };
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartCommonSeriesSettings
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartOptions.commonSeriesSettings.area]
     */
    area?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.bar]
     */
    bar?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.bubble]
     */
    bubble?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.candlestick]
     */
    candlestick?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.fullstackedarea]
     */
    fullstackedarea?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.fullstackedbar]
     */
    fullstackedbar?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.fullstackedline]
     */
    fullstackedline?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.fullstackedspline]
     */
    fullstackedspline?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.fullstackedsplinearea]
     */
    fullstackedsplinearea?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.line]
     */
    line?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.rangearea]
     */
    rangearea?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.rangebar]
     */
    rangebar?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.scatter]
     */
    scatter?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.spline]
     */
    spline?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.splinearea]
     */
    splinearea?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.stackedarea]
     */
    stackedarea?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.stackedbar]
     */
    stackedbar?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.stackedline]
     */
    stackedline?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.stackedspline]
     */
    stackedspline?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.stackedsplinearea]
     */
    stackedsplinearea?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.steparea]
     */
    steparea?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.stepline]
     */
    stepline?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.stock]
     */
    stock?: any;
    /**
     * [descr:dxChartOptions.commonSeriesSettings.type]
     */
    type?: ChartSeriesType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartLegend extends BaseChartLegend {
    /**
     * [descr:dxChartOptions.legend.customizeHint]
     */
    customizeHint?: (seriesInfo: {
      seriesName?: any;
      seriesIndex?: number;
      seriesColor?: string;
    }) => string;
    /**
     * [descr:dxChartOptions.legend.customizeText]
     */
    customizeText?: (seriesInfo: {
      seriesName?: any;
      seriesIndex?: number;
      seriesColor?: string;
    }) => string;
    /**
     * [descr:dxChartOptions.legend.hoverMode]
     */
    hoverMode?: 'excludePoints' | 'includePoints' | 'none';
    /**
     * [descr:dxChartOptions.legend.position]
     */
    position?: 'inside' | 'outside';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartPanes extends dxChartCommonPaneSettings {
    /**
     * [descr:dxChartOptions.panes.height]
     */
    height?: number | string;
    /**
     * [descr:dxChartOptions.panes.name]
     */
    name?: string;
  }
  /**
   * [descr:dxChartSeriesTypes]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypes {
    /**
     * [descr:dxChartSeriesTypes.AreaSeries]
     */
    AreaSeries?: dxChartSeriesTypesAreaSeries;
    /**
     * [descr:dxChartSeriesTypes.BarSeries]
     */
    BarSeries?: dxChartSeriesTypesBarSeries;
    /**
     * [descr:dxChartSeriesTypes.BubbleSeries]
     */
    BubbleSeries?: dxChartSeriesTypesBubbleSeries;
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries]
     */
    CandleStickSeries?: dxChartSeriesTypesCandleStickSeries;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries]
     */
    CommonSeries?: dxChartSeriesTypesCommonSeries;
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries]
     */
    FullStackedAreaSeries?: dxChartSeriesTypesFullStackedAreaSeries;
    /**
     * [descr:dxChartSeriesTypes.FullStackedBarSeries]
     */
    FullStackedBarSeries?: dxChartSeriesTypesFullStackedBarSeries;
    /**
     * [descr:dxChartSeriesTypes.FullStackedLineSeries]
     */
    FullStackedLineSeries?: dxChartSeriesTypesFullStackedLineSeries;
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries]
     */
    FullStackedSplineAreaSeries?: dxChartSeriesTypesFullStackedSplineAreaSeries;
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineSeries]
     */
    FullStackedSplineSeries?: dxChartSeriesTypesFullStackedSplineSeries;
    /**
     * [descr:dxChartSeriesTypes.LineSeries]
     */
    LineSeries?: dxChartSeriesTypesLineSeries;
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries]
     */
    RangeAreaSeries?: dxChartSeriesTypesRangeAreaSeries;
    /**
     * [descr:dxChartSeriesTypes.RangeBarSeries]
     */
    RangeBarSeries?: dxChartSeriesTypesRangeBarSeries;
    /**
     * [descr:dxChartSeriesTypes.ScatterSeries]
     */
    ScatterSeries?: dxChartSeriesTypesScatterSeries;
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries]
     */
    SplineAreaSeries?: dxChartSeriesTypesSplineAreaSeries;
    /**
     * [descr:dxChartSeriesTypes.SplineSeries]
     */
    SplineSeries?: dxChartSeriesTypesSplineSeries;
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries]
     */
    StackedAreaSeries?: dxChartSeriesTypesStackedAreaSeries;
    /**
     * [descr:dxChartSeriesTypes.StackedBarSeries]
     */
    StackedBarSeries?: dxChartSeriesTypesStackedBarSeries;
    /**
     * [descr:dxChartSeriesTypes.StackedLineSeries]
     */
    StackedLineSeries?: dxChartSeriesTypesStackedLineSeries;
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries]
     */
    StackedSplineAreaSeries?: dxChartSeriesTypesStackedSplineAreaSeries;
    /**
     * [descr:dxChartSeriesTypes.StackedSplineSeries]
     */
    StackedSplineSeries?: dxChartSeriesTypesStackedSplineSeries;
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries]
     */
    StepAreaSeries?: dxChartSeriesTypesStepAreaSeries;
    /**
     * [descr:dxChartSeriesTypes.StepLineSeries]
     */
    StepLineSeries?: dxChartSeriesTypesStepLineSeries;
    /**
     * [descr:dxChartSeriesTypes.StockSeries]
     */
    StockSeries?: dxChartSeriesTypesStockSeries;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.AreaSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesAreaSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.AreaSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.AreaSeries.label]
     */
    label?: dxChartSeriesTypesAreaSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.AreaSeries.point]
     */
    point?: dxChartSeriesTypesAreaSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.AreaSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.AreaSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.AreaSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.AreaSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesBarSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.BarSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesBarSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.BarSeries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.BarSeries.label]
     */
    label?: dxChartSeriesTypesBarSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.BarSeries.selectionMode]
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesBarSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.BarSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesBarSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.BarSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesBubbleSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.BubbleSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesBubbleSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.BubbleSeries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.BubbleSeries.label]
     */
    label?: dxChartSeriesTypesBubbleSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.BubbleSeries.selectionMode]
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesBubbleSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.BubbleSeries.aggregation.method]
     */
    method?: 'avg' | 'custom';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesBubbleSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.BubbleSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCandleStickSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesCandleStickSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.argumentField]
     */
    argumentField?: string;
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.hoverStyle]
     */
    hoverStyle?: dxChartSeriesTypesCandleStickSeriesHoverStyle;
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.label]
     */
    label?: dxChartSeriesTypesCandleStickSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.selectionMode]
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.selectionStyle]
     */
    selectionStyle?: dxChartSeriesTypesCandleStickSeriesSelectionStyle;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCandleStickSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.aggregation.method]
     */
    method?: 'ohlc' | 'custom';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCandleStickSeriesHoverStyle
    extends dxChartSeriesTypesCommonSeriesHoverStyle {
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.hoverStyle.hatching]
     */
    hatching?: dxChartSeriesTypesCandleStickSeriesHoverStyleHatching;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCandleStickSeriesHoverStyleHatching
    extends dxChartSeriesTypesCommonSeriesHoverStyleHatching {
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.hoverStyle.hatching.direction]
     */
    direction?: HatchingDirectionType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCandleStickSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCandleStickSeriesSelectionStyle
    extends dxChartSeriesTypesCommonSeriesSelectionStyle {
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.selectionStyle.hatching]
     */
    hatching?: dxChartSeriesTypesCandleStickSeriesSelectionStyleHatching;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCandleStickSeriesSelectionStyleHatching
    extends dxChartSeriesTypesCommonSeriesSelectionStyleHatching {
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.selectionStyle.hatching.direction]
     */
    direction?: HatchingDirectionType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesCommonSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.argumentField]
     */
    argumentField?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.axis]
     */
    axis?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.barOverlapGroup]
     */
    barOverlapGroup?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.barPadding]
     */
    barPadding?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.barWidth]
     */
    barWidth?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.border]
     */
    border?: dxChartSeriesTypesCommonSeriesBorder;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.closeValueField]
     */
    closeValueField?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.color]
     */
    color?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.cornerRadius]
     */
    cornerRadius?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.dashStyle]
     */
    dashStyle?: DashStyleType;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.highValueField]
     */
    highValueField?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverMode]
     */
    hoverMode?:
      | 'allArgumentPoints'
      | 'allSeriesPoints'
      | 'excludePoints'
      | 'includePoints'
      | 'nearestPoint'
      | 'none'
      | 'onlyPoint';
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle]
     */
    hoverStyle?: dxChartSeriesTypesCommonSeriesHoverStyle;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.ignoreEmptyPoints]
     */
    ignoreEmptyPoints?: boolean;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.innerColor]
     */
    innerColor?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label]
     */
    label?: dxChartSeriesTypesCommonSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.lowValueField]
     */
    lowValueField?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.maxLabelCount]
     */
    maxLabelCount?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.minBarSize]
     */
    minBarSize?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.opacity]
     */
    opacity?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.openValueField]
     */
    openValueField?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.pane]
     */
    pane?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point]
     */
    point?: dxChartSeriesTypesCommonSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.rangeValue1Field]
     */
    rangeValue1Field?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.rangeValue2Field]
     */
    rangeValue2Field?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.reduction]
     */
    reduction?: {
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.reduction.color]
       */
      color?: string;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.reduction.level]
       */
      level?: 'close' | 'high' | 'low' | 'open';
    };
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionMode]
     */
    selectionMode?:
      | 'allArgumentPoints'
      | 'allSeriesPoints'
      | 'excludePoints'
      | 'includePoints'
      | 'none'
      | 'onlyPoint';
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle]
     */
    selectionStyle?: dxChartSeriesTypesCommonSeriesSelectionStyle;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.showInLegend]
     */
    showInLegend?: boolean;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.sizeField]
     */
    sizeField?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.stack]
     */
    stack?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.tagField]
     */
    tagField?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar]
     */
    valueErrorBar?: {
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.color]
       */
      color?: string;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.displayMode]
       */
      displayMode?: 'auto' | 'high' | 'low' | 'none';
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.edgeLength]
       */
      edgeLength?: number;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.highValueField]
       */
      highValueField?: string;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.lineWidth]
       */
      lineWidth?: number;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.lowValueField]
       */
      lowValueField?: string;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.type]
       */
      type?: 'fixed' | 'percent' | 'stdDeviation' | 'stdError' | 'variance';
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.value]
       */
      value?: number;
    };
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.valueField]
     */
    valueField?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.aggregation.calculate]
     */
    calculate?: (
      aggregationInfo: chartPointAggregationInfoObject,
      series: chartSeriesObject
    ) => any | Array<any>;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.aggregation.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.aggregation.method]
     */
    method?:
      | 'avg'
      | 'count'
      | 'max'
      | 'min'
      | 'ohlc'
      | 'range'
      | 'sum'
      | 'custom';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCommonSeriesBorder {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.border.color]
     */
    color?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.border.dashStyle]
     */
    dashStyle?: DashStyleType;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.border.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.border.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCommonSeriesHoverStyle {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.border]
     */
    border?: dxChartSeriesTypesCommonSeriesHoverStyleBorder;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.color]
     */
    color?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.dashStyle]
     */
    dashStyle?: DashStyleType;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.hatching]
     */
    hatching?: dxChartSeriesTypesCommonSeriesHoverStyleHatching;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCommonSeriesHoverStyleBorder {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.border.color]
     */
    color?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.border.dashStyle]
     */
    dashStyle?: DashStyleType;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.border.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.border.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCommonSeriesHoverStyleHatching {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.hatching.direction]
     */
    direction?: HatchingDirectionType;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.hatching.opacity]
     */
    opacity?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.hatching.step]
     */
    step?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.hatching.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.alignment]
     */
    alignment?: 'center' | 'left' | 'right';
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.argumentFormat]
     */
    argumentFormat?: DevExpress.ui.Format;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.backgroundColor]
     */
    backgroundColor?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.border]
     */
    border?: {
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.label.border.color]
       */
      color?: string;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.label.border.dashStyle]
       */
      dashStyle?: DashStyleType;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.label.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.label.border.width]
       */
      width?: number;
    };
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.connector]
     */
    connector?: {
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.label.connector.color]
       */
      color?: string;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.label.connector.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.label.connector.width]
       */
      width?: number;
    };
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.font]
     */
    font?: Font;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.format]
     */
    format?: DevExpress.ui.Format;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.horizontalOffset]
     */
    horizontalOffset?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.position]
     */
    position?: 'inside' | 'outside';
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.rotationAngle]
     */
    rotationAngle?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.showForZeroValues]
     */
    showForZeroValues?: boolean;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.verticalOffset]
     */
    verticalOffset?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.border]
     */
    border?: {
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.border.color]
       */
      color?: string;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.border.width]
       */
      width?: number;
    };
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.color]
     */
    color?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.hoverMode]
     */
    hoverMode?: 'allArgumentPoints' | 'allSeriesPoints' | 'none' | 'onlyPoint';
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.hoverStyle]
     */
    hoverStyle?: {
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.hoverStyle.border]
       */
      border?: {
        /**
         * [descr:dxChartSeriesTypes.CommonSeries.point.hoverStyle.border.color]
         */
        color?: string;
        /**
         * [descr:dxChartSeriesTypes.CommonSeries.point.hoverStyle.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxChartSeriesTypes.CommonSeries.point.hoverStyle.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.hoverStyle.color]
       */
      color?: string;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.hoverStyle.size]
       */
      size?: number;
    };
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.image]
     */
    image?:
      | string
      | {
          /**
           * [descr:dxChartSeriesTypes.CommonSeries.point.image.height]
           */
          height?:
            | number
            | {
                /**
                 * [descr:dxChartSeriesTypes.CommonSeries.point.image.height.rangeMaxPoint]
                 */
                rangeMaxPoint?: number;
                /**
                 * [descr:dxChartSeriesTypes.CommonSeries.point.image.height.rangeMinPoint]
                 */
                rangeMinPoint?: number;
              };
          /**
           * [descr:dxChartSeriesTypes.CommonSeries.point.image.url]
           */
          url?:
            | string
            | {
                /**
                 * [descr:dxChartSeriesTypes.CommonSeries.point.image.url.rangeMaxPoint]
                 */
                rangeMaxPoint?: string;
                /**
                 * [descr:dxChartSeriesTypes.CommonSeries.point.image.url.rangeMinPoint]
                 */
                rangeMinPoint?: string;
              };
          /**
           * [descr:dxChartSeriesTypes.CommonSeries.point.image.width]
           */
          width?:
            | number
            | {
                /**
                 * [descr:dxChartSeriesTypes.CommonSeries.point.image.width.rangeMaxPoint]
                 */
                rangeMaxPoint?: number;
                /**
                 * [descr:dxChartSeriesTypes.CommonSeries.point.image.width.rangeMinPoint]
                 */
                rangeMinPoint?: number;
              };
        };
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.selectionMode]
     */
    selectionMode?:
      | 'allArgumentPoints'
      | 'allSeriesPoints'
      | 'none'
      | 'onlyPoint';
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.selectionStyle]
     */
    selectionStyle?: {
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.selectionStyle.border]
       */
      border?: {
        /**
         * [descr:dxChartSeriesTypes.CommonSeries.point.selectionStyle.border.color]
         */
        color?: string;
        /**
         * [descr:dxChartSeriesTypes.CommonSeries.point.selectionStyle.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxChartSeriesTypes.CommonSeries.point.selectionStyle.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.selectionStyle.color]
       */
      color?: string;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.selectionStyle.size]
       */
      size?: number;
    };
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.size]
     */
    size?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.symbol]
     */
    symbol?:
      | 'circle'
      | 'cross'
      | 'polygon'
      | 'square'
      | 'triangleDown'
      | 'triangleUp';
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCommonSeriesSelectionStyle {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.border]
     */
    border?: dxChartSeriesTypesCommonSeriesSelectionStyleBorder;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.color]
     */
    color?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.dashStyle]
     */
    dashStyle?: DashStyleType;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.hatching]
     */
    hatching?: dxChartSeriesTypesCommonSeriesSelectionStyleHatching;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCommonSeriesSelectionStyleBorder {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.border.color]
     */
    color?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.border.dashStyle]
     */
    dashStyle?: DashStyleType;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.border.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.border.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesCommonSeriesSelectionStyleHatching {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.hatching.direction]
     */
    direction?: HatchingDirectionType;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.hatching.opacity]
     */
    opacity?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.hatching.step]
     */
    step?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.hatching.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesFullStackedAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesFullStackedAreaSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries.label]
     */
    label?: dxChartSeriesTypesFullStackedAreaSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries.point]
     */
    point?: dxChartSeriesTypesFullStackedAreaSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesFullStackedAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesFullStackedAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesFullStackedAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesFullStackedBarSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.FullStackedBarSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesFullStackedBarSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.FullStackedBarSeries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.FullStackedBarSeries.label]
     */
    label?: dxChartSeriesTypesFullStackedBarSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.FullStackedBarSeries.selectionMode]
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesFullStackedBarSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.FullStackedBarSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesFullStackedBarSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.FullStackedBarSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
    /**
     * [descr:dxChartSeriesTypes.FullStackedBarSeries.label.position]
     */
    position?: 'inside' | 'outside';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesFullStackedLineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.FullStackedLineSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesFullStackedLineSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.FullStackedLineSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.FullStackedLineSeries.label]
     */
    label?: dxChartSeriesTypesFullStackedLineSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.FullStackedLineSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesFullStackedLineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.FullStackedLineSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesFullStackedLineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.FullStackedLineSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesFullStackedSplineAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesFullStackedSplineAreaSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries.label]
     */
    label?: dxChartSeriesTypesFullStackedSplineAreaSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries.point]
     */
    point?: dxChartSeriesTypesFullStackedSplineAreaSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesFullStackedSplineAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesFullStackedSplineAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesFullStackedSplineAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesFullStackedSplineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesFullStackedSplineSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineSeries.label]
     */
    label?: dxChartSeriesTypesFullStackedSplineSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesFullStackedSplineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesFullStackedSplineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesLineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.LineSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesLineSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.LineSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.LineSeries.label]
     */
    label?: dxChartSeriesTypesLineSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.LineSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesLineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.LineSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesLineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.LineSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesRangeAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesRangeAreaSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries.label]
     */
    label?: dxChartSeriesTypesRangeAreaSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries.point]
     */
    point?: dxChartSeriesTypesRangeAreaSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesRangeAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries.aggregation.method]
     */
    method?: 'range' | 'custom';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesRangeAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesRangeAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesRangeBarSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.RangeBarSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesRangeBarSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.RangeBarSeries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.RangeBarSeries.label]
     */
    label?: dxChartSeriesTypesRangeBarSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.RangeBarSeries.selectionMode]
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesRangeBarSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.RangeBarSeries.aggregation.method]
     */
    method?: 'range' | 'custom';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesRangeBarSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.RangeBarSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesScatterSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.ScatterSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesScatterSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.ScatterSeries.label]
     */
    label?: dxChartSeriesTypesScatterSeriesLabel;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesScatterSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.ScatterSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesScatterSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.ScatterSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesSplineAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesSplineAreaSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries.label]
     */
    label?: dxChartSeriesTypesSplineAreaSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries.point]
     */
    point?: dxChartSeriesTypesSplineAreaSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesSplineAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesSplineAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesSplineAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesSplineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.SplineSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesSplineSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.SplineSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.SplineSeries.label]
     */
    label?: dxChartSeriesTypesSplineSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.SplineSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesSplineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.SplineSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesSplineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.SplineSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStackedAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesStackedAreaSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries.label]
     */
    label?: dxChartSeriesTypesStackedAreaSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries.point]
     */
    point?: dxChartSeriesTypesStackedAreaSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStackedAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStackedAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStackedAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStackedBarSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.StackedBarSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesStackedBarSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.StackedBarSeries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StackedBarSeries.label]
     */
    label?: dxChartSeriesTypesStackedBarSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.StackedBarSeries.selectionMode]
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStackedBarSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.StackedBarSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStackedBarSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.StackedBarSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
    /**
     * [descr:dxChartSeriesTypes.StackedBarSeries.label.position]
     */
    position?: 'inside' | 'outside';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStackedLineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.StackedLineSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesStackedLineSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.StackedLineSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StackedLineSeries.label]
     */
    label?: dxChartSeriesTypesStackedLineSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.StackedLineSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStackedLineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.StackedLineSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStackedLineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.StackedLineSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStackedSplineAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesStackedSplineAreaSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries.label]
     */
    label?: dxChartSeriesTypesStackedSplineAreaSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries.point]
     */
    point?: dxChartSeriesTypesStackedSplineAreaSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStackedSplineAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStackedSplineAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStackedSplineAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStackedSplineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.StackedSplineSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesStackedSplineSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.StackedSplineSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StackedSplineSeries.label]
     */
    label?: dxChartSeriesTypesStackedSplineSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.StackedSplineSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStackedSplineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.StackedSplineSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStackedSplineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.StackedSplineSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStepAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesStepAreaSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.border]
     */
    border?: dxChartSeriesTypesStepAreaSeriesBorder;
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.hoverStyle]
     */
    hoverStyle?: dxChartSeriesTypesStepAreaSeriesHoverStyle;
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.label]
     */
    label?: dxChartSeriesTypesStepAreaSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.point]
     */
    point?: dxChartSeriesTypesStepAreaSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.selectionStyle]
     */
    selectionStyle?: dxChartSeriesTypesStepAreaSeriesSelectionStyle;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStepAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStepAreaSeriesBorder
    extends dxChartSeriesTypesCommonSeriesBorder {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.border.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStepAreaSeriesHoverStyle
    extends dxChartSeriesTypesCommonSeriesHoverStyle {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.hoverStyle.border]
     */
    border?: dxChartSeriesTypesStepAreaSeriesHoverStyleBorder;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStepAreaSeriesHoverStyleBorder
    extends dxChartSeriesTypesCommonSeriesHoverStyleBorder {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.hoverStyle.border.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStepAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStepAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStepAreaSeriesSelectionStyle
    extends dxChartSeriesTypesCommonSeriesSelectionStyle {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.selectionStyle.border]
     */
    border?: dxChartSeriesTypesStepAreaSeriesSelectionStyleBorder;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStepAreaSeriesSelectionStyleBorder
    extends dxChartSeriesTypesCommonSeriesSelectionStyleBorder {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.selectionStyle.border.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStepLineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.StepLineSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesStepLineSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.StepLineSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StepLineSeries.label]
     */
    label?: dxChartSeriesTypesStepLineSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.StepLineSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStepLineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.StepLineSeries.aggregation.method]
     */
    method?: DevExpress.viz.dxChart.ChartSingleValueSeriesAggregationMethodType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStepLineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.StepLineSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStockSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.StockSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesStockSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.StockSeries.argumentField]
     */
    argumentField?: string;
    /**
     * [descr:dxChartSeriesTypes.StockSeries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StockSeries.label]
     */
    label?: dxChartSeriesTypesStockSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.StockSeries.selectionMode]
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStockSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.StockSeries.aggregation.method]
     */
    method?: 'ohlc' | 'custom';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartSeriesTypesStockSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.StockSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartTooltip extends BaseChartTooltip {
    /**
     * [descr:dxChartOptions.tooltip.location]
     */
    location?: 'center' | 'edge';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartValueAxis extends dxChartCommonAxisSettings {
    /**
     * [descr:dxChartOptions.valueAxis.autoBreaksEnabled]
     */
    autoBreaksEnabled?: boolean;
    /**
     * [descr:dxChartOptions.valueAxis.axisDivisionFactor]
     */
    axisDivisionFactor?: number;
    /**
     * [descr:dxChartOptions.valueAxis.breaks]
     */
    breaks?: Array<ScaleBreak>;
    /**
     * [descr:dxChartOptions.valueAxis.categories]
     */
    categories?: Array<number | string | Date>;
    /**
     * [descr:dxChartOptions.valueAxis.constantLineStyle]
     */
    constantLineStyle?: dxChartValueAxisConstantLineStyle;
    /**
     * [descr:dxChartOptions.valueAxis.constantLines]
     */
    constantLines?: Array<dxChartValueAxisConstantLines>;
    /**
     * [descr:dxChartOptions.valueAxis.endOnTick]
     */
    endOnTick?: boolean;
    /**
     * [descr:dxChartOptions.valueAxis.label]
     */
    label?: dxChartValueAxisLabel;
    /**
     * [descr:dxChartOptions.valueAxis.linearThreshold]
     */
    linearThreshold?: number;
    /**
     * [descr:dxChartOptions.valueAxis.logarithmBase]
     */
    logarithmBase?: number;
    /**
     * [descr:dxChartOptions.valueAxis.maxAutoBreakCount]
     */
    maxAutoBreakCount?: number;
    /**
     * [descr:dxChartOptions.valueAxis.minVisualRangeLength]
     */
    minVisualRangeLength?: VizTimeInterval;
    /**
     * [descr:dxChartOptions.valueAxis.minorTickCount]
     */
    minorTickCount?: number;
    /**
     * [descr:dxChartOptions.valueAxis.minorTickInterval]
     */
    minorTickInterval?: VizTimeInterval;
    /**
     * [descr:dxChartOptions.valueAxis.multipleAxesSpacing]
     */
    multipleAxesSpacing?: number;
    /**
     * [descr:dxChartOptions.valueAxis.name]
     */
    name?: string;
    /**
     * [descr:dxChartOptions.valueAxis.pane]
     */
    pane?: string;
    /**
     * [descr:dxChartOptions.valueAxis.position]
     */
    position?: 'bottom' | 'left' | 'right' | 'top';
    /**
     * [descr:dxChartOptions.valueAxis.customPosition]
     */
    customPosition?: number | Date | string;
    /**
     * [descr:dxChartOptions.valueAxis.offset]
     */
    offset?: number;
    /**
     * [descr:dxChartOptions.valueAxis.showZero]
     */
    showZero?: boolean;
    /**
     * [descr:dxChartOptions.valueAxis.strips]
     */
    strips?: Array<dxChartValueAxisStrips>;
    /**
     * [descr:dxChartOptions.valueAxis.synchronizedValue]
     */
    synchronizedValue?: number;
    /**
     * [descr:dxChartOptions.valueAxis.tickInterval]
     */
    tickInterval?: VizTimeInterval;
    /**
     * [descr:dxChartOptions.valueAxis.title]
     */
    title?: dxChartValueAxisTitle;
    /**
     * [descr:dxChartOptions.valueAxis.type]
     */
    type?: 'continuous' | 'discrete' | 'logarithmic';
    /**
     * [descr:dxChartOptions.valueAxis.valueType]
     */
    valueType?: 'datetime' | 'numeric' | 'string';
    /**
     * [descr:dxChartOptions.valueAxis.visualRange]
     */
    visualRange?: VizRange | Array<number | string | Date>;
    /**
     * [descr:dxChartOptions.valueAxis.visualRangeUpdateMode]
     */
    visualRangeUpdateMode?: 'auto' | 'keep' | 'reset' | 'shift';
    /**
     * [descr:dxChartOptions.valueAxis.wholeRange]
     */
    wholeRange?: VizRange | Array<number | string | Date>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartValueAxisConstantLines
    extends dxChartCommonAxisSettingsConstantLineStyle {
    /**
     * [descr:dxChartOptions.valueAxis.constantLines.displayBehindSeries]
     */
    displayBehindSeries?: boolean;
    /**
     * [descr:dxChartOptions.valueAxis.constantLines.extendAxis]
     */
    extendAxis?: boolean;
    /**
     * [descr:dxChartOptions.valueAxis.constantLines.label]
     */
    label?: dxChartValueAxisConstantLinesLabel;
    /**
     * [descr:dxChartOptions.valueAxis.constantLines.value]
     */
    value?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartValueAxisConstantLinesLabel
    extends dxChartCommonAxisSettingsConstantLineStyleLabel {
    /**
     * [descr:dxChartOptions.valueAxis.constantLines.label.horizontalAlignment]
     */
    horizontalAlignment?: 'center' | 'left' | 'right';
    /**
     * [descr:dxChartOptions.valueAxis.constantLines.label.text]
     */
    text?: string;
    /**
     * [descr:dxChartOptions.valueAxis.constantLines.label.verticalAlignment]
     */
    verticalAlignment?: 'bottom' | 'center' | 'top';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartValueAxisConstantLineStyle
    extends dxChartCommonAxisSettingsConstantLineStyle {
    /**
     * [descr:dxChartOptions.valueAxis.constantLineStyle.label]
     */
    label?: dxChartValueAxisConstantLineStyleLabel;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartValueAxisConstantLineStyleLabel
    extends dxChartCommonAxisSettingsConstantLineStyleLabel {
    /**
     * [descr:dxChartOptions.valueAxis.constantLineStyle.label.horizontalAlignment]
     */
    horizontalAlignment?: 'center' | 'left' | 'right';
    /**
     * [descr:dxChartOptions.valueAxis.constantLineStyle.label.verticalAlignment]
     */
    verticalAlignment?: 'bottom' | 'center' | 'top';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartValueAxisLabel
    extends dxChartCommonAxisSettingsLabel {
    /**
     * [descr:dxChartOptions.valueAxis.label.customizeHint]
     */
    customizeHint?: (axisValue: {
      value?: Date | number | string;
      valueText?: string;
    }) => string;
    /**
     * [descr:dxChartOptions.valueAxis.label.customizeText]
     */
    customizeText?: (axisValue: {
      value?: Date | number | string;
      valueText?: string;
    }) => string;
    /**
     * [descr:dxChartOptions.valueAxis.label.format]
     */
    format?: DevExpress.ui.Format;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartValueAxisStrips
    extends dxChartCommonAxisSettingsStripStyle {
    /**
     * [descr:dxChartOptions.valueAxis.strips.color]
     */
    color?: string;
    /**
     * [descr:dxChartOptions.valueAxis.strips.endValue]
     */
    endValue?: number | Date | string;
    /**
     * [descr:dxChartOptions.valueAxis.strips.label]
     */
    label?: dxChartValueAxisStripsLabel;
    /**
     * [descr:dxChartOptions.valueAxis.strips.startValue]
     */
    startValue?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartValueAxisStripsLabel
    extends dxChartCommonAxisSettingsStripStyleLabel {
    /**
     * [descr:dxChartOptions.valueAxis.strips.label.text]
     */
    text?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxChartValueAxisTitle
    extends dxChartCommonAxisSettingsTitle {
    /**
     * [descr:dxChartOptions.valueAxis.title.text]
     */
    text?: string;
  }
  /**
   * [descr:dxCircularGauge]
   */
  export class dxCircularGauge extends BaseGauge<DevExpress.viz.dxCircularGauge.Properties> {}
  module dxCircularGauge {
    export type DisposingEvent = DevExpress.events.EventInfo<dxCircularGauge>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxCircularGauge>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxCircularGauge>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxCircularGauge> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxCircularGauge>;
    export type IncidentOccurredEvent =
      DevExpress.events.EventInfo<dxCircularGauge> &
        DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxCircularGauge>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxCircularGauge> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends BaseGaugeOptions<dxCircularGauge> {
      /**
       * [descr:Properties.geometry]
       */
      geometry?: {
        /**
         * [descr:Properties.geometry.endAngle]
         */
        endAngle?: number;
        /**
         * [descr:Properties.geometry.startAngle]
         */
        startAngle?: number;
      };
      /**
       * [descr:Properties.rangeContainer]
       */
      rangeContainer?: dxCircularGaugeRangeContainer;
      /**
       * [descr:Properties.scale]
       */
      scale?: dxCircularGaugeScale;
      /**
       * [descr:Properties.subvalueIndicator]
       */
      subvalueIndicator?: GaugeIndicator;
      /**
       * [descr:Properties.valueIndicator]
       */
      valueIndicator?: GaugeIndicator;
    }
    export type TooltipHiddenEvent =
      DevExpress.events.EventInfo<dxCircularGauge> &
        DevExpress.viz.BaseGauge.TooltipInfo;
    export type TooltipShownEvent =
      DevExpress.events.EventInfo<dxCircularGauge> &
        DevExpress.viz.BaseGauge.TooltipInfo;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxCircularGaugeRangeContainer
    extends BaseGaugeRangeContainer {
    /**
     * [descr:dxCircularGaugeOptions.rangeContainer.orientation]
     */
    orientation?: 'center' | 'inside' | 'outside';
    /**
     * [descr:dxCircularGaugeOptions.rangeContainer.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxCircularGaugeScale extends BaseGaugeScale {
    /**
     * [descr:dxCircularGaugeOptions.scale.label]
     */
    label?: dxCircularGaugeScaleLabel;
    /**
     * [descr:dxCircularGaugeOptions.scale.orientation]
     */
    orientation?: 'center' | 'inside' | 'outside';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxCircularGaugeScaleLabel extends BaseGaugeScaleLabel {
    /**
     * [descr:dxCircularGaugeOptions.scale.label.hideFirstOrLast]
     */
    hideFirstOrLast?: 'first' | 'last';
    /**
     * [descr:dxCircularGaugeOptions.scale.label.indentFromTick]
     */
    indentFromTick?: number;
  }
  /**
   * [descr:dxFunnel]
   */
  export class dxFunnel extends BaseWidget<DevExpress.viz.dxFunnel.Properties> {
    /**
     * [descr:dxFunnel.clearSelection()]
     */
    clearSelection(): void;
    /**
     * [descr:dxFunnel.getAllItems()]
     */
    getAllItems(): Array<DevExpress.viz.dxFunnel.Item>;
    getDataSource(): DevExpress.data.DataSource;
    /**
     * [descr:dxFunnel.hideTooltip()]
     */
    hideTooltip(): void;
  }
  module dxFunnel {
    export type DisposingEvent = DevExpress.events.EventInfo<dxFunnel>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxFunnel>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxFunnel>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxFunnel> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxFunnel>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface FunnelItemInfo {
      readonly item: Item;
    }
    export type HoverChangedEvent = DevExpress.events.EventInfo<dxFunnel> &
      FunnelItemInfo;
    export type IncidentOccurredEvent = DevExpress.events.EventInfo<dxFunnel> &
      DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxFunnel>;
    export type ItemClickEvent = DevExpress.events.NativeEventInfo<dxFunnel> &
      FunnelItemInfo;
    export type LegendClickEvent = DevExpress.events.NativeEventInfo<dxFunnel> &
      FunnelItemInfo;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxFunnel> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends BaseWidgetOptions<dxFunnel> {
      /**
       * [descr:Properties.adaptiveLayout]
       */
      adaptiveLayout?: {
        /**
         * [descr:Properties.adaptiveLayout.height]
         */
        height?: number;
        /**
         * [descr:Properties.adaptiveLayout.keepLabels]
         */
        keepLabels?: boolean;
        /**
         * [descr:Properties.adaptiveLayout.width]
         */
        width?: number;
      };
      /**
       * [descr:Properties.algorithm]
       */
      algorithm?: 'dynamicHeight' | 'dynamicSlope';
      /**
       * [descr:Properties.argumentField]
       */
      argumentField?: string;
      /**
       * [descr:Properties.colorField]
       */
      colorField?: string;
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<any>;
      /**
       * [descr:Properties.hoverEnabled]
       */
      hoverEnabled?: boolean;
      /**
       * [descr:Properties.inverted]
       */
      inverted?: boolean;
      /**
       * [descr:Properties.item]
       */
      item?: {
        /**
         * [descr:Properties.item.border]
         */
        border?: {
          /**
           * [descr:Properties.item.border.color]
           */
          color?: string;
          /**
           * [descr:Properties.item.border.visible]
           */
          visible?: boolean;
          /**
           * [descr:Properties.item.border.width]
           */
          width?: number;
        };
        /**
         * [descr:Properties.item.hoverStyle]
         */
        hoverStyle?: {
          /**
           * [descr:Properties.item.hoverStyle.border]
           */
          border?: {
            /**
             * [descr:Properties.item.hoverStyle.border.color]
             */
            color?: string;
            /**
             * [descr:Properties.item.hoverStyle.border.visible]
             */
            visible?: boolean;
            /**
             * [descr:Properties.item.hoverStyle.border.width]
             */
            width?: number;
          };
          /**
           * [descr:Properties.item.hoverStyle.hatching]
           */
          hatching?: {
            /**
             * [descr:Properties.item.hoverStyle.hatching.direction]
             */
            direction?: HatchingDirectionType;
            /**
             * [descr:Properties.item.hoverStyle.hatching.opacity]
             */
            opacity?: number;
            /**
             * [descr:Properties.item.hoverStyle.hatching.step]
             */
            step?: number;
            /**
             * [descr:Properties.item.hoverStyle.hatching.width]
             */
            width?: number;
          };
        };
        /**
         * [descr:Properties.item.selectionStyle]
         */
        selectionStyle?: {
          /**
           * [descr:Properties.item.selectionStyle.border]
           */
          border?: {
            /**
             * [descr:Properties.item.selectionStyle.border.color]
             */
            color?: string;
            /**
             * [descr:Properties.item.selectionStyle.border.visible]
             */
            visible?: boolean;
            /**
             * [descr:Properties.item.selectionStyle.border.width]
             */
            width?: number;
          };
          /**
           * [descr:Properties.item.selectionStyle.hatching]
           */
          hatching?: {
            /**
             * [descr:Properties.item.selectionStyle.hatching.direction]
             */
            direction?: HatchingDirectionType;
            /**
             * [descr:Properties.item.selectionStyle.hatching.opacity]
             */
            opacity?: number;
            /**
             * [descr:Properties.item.selectionStyle.hatching.step]
             */
            step?: number;
            /**
             * [descr:Properties.item.selectionStyle.hatching.width]
             */
            width?: number;
          };
        };
      };
      /**
       * [descr:Properties.label]
       */
      label?: {
        /**
         * [descr:Properties.label.backgroundColor]
         */
        backgroundColor?: string;
        /**
         * [descr:Properties.label.border]
         */
        border?: {
          /**
           * [descr:Properties.label.border.color]
           */
          color?: string;
          /**
           * [descr:Properties.label.border.dashStyle]
           */
          dashStyle?: DashStyleType;
          /**
           * [descr:Properties.label.border.visible]
           */
          visible?: boolean;
          /**
           * [descr:Properties.label.border.width]
           */
          width?: number;
        };
        /**
         * [descr:Properties.label.connector]
         */
        connector?: {
          /**
           * [descr:Properties.label.connector.color]
           */
          color?: string;
          /**
           * [descr:Properties.label.connector.opacity]
           */
          opacity?: number;
          /**
           * [descr:Properties.label.connector.visible]
           */
          visible?: boolean;
          /**
           * [descr:Properties.label.connector.width]
           */
          width?: number;
        };
        /**
         * [descr:Properties.label.customizeText]
         */
        customizeText?: (itemInfo: {
          item?: Item;
          value?: number;
          valueText?: string;
          percent?: number;
          percentText?: string;
        }) => string;
        /**
         * [descr:Properties.label.font]
         */
        font?: Font;
        /**
         * [descr:Properties.label.format]
         */
        format?: DevExpress.ui.Format;
        /**
         * [descr:Properties.label.horizontalAlignment]
         */
        horizontalAlignment?: 'left' | 'right';
        /**
         * [descr:Properties.label.horizontalOffset]
         */
        horizontalOffset?: number;
        /**
         * [descr:Properties.label.position]
         */
        position?: 'columns' | 'inside' | 'outside';
        /**
         * [descr:Properties.label.showForZeroValues]
         */
        showForZeroValues?: boolean;
        /**
         * [descr:Properties.label.textOverflow]
         */
        textOverflow?: DevExpress.viz.BaseWidget.VizTextOverflowType;
        /**
         * [descr:Properties.label.visible]
         */
        visible?: boolean;
        /**
         * [descr:Properties.label.wordWrap]
         */
        wordWrap?: DevExpress.viz.BaseWidget.WordWrapType;
      };
      /**
       * [descr:Properties.legend]
       */
      legend?: dxFunnelLegend;
      /**
       * [descr:Properties.neckHeight]
       */
      neckHeight?: number;
      /**
       * [descr:Properties.neckWidth]
       */
      neckWidth?: number;
      /**
       * [descr:Properties.onHoverChanged]
       */
      onHoverChanged?: (e: HoverChangedEvent) => void;
      /**
       * [descr:Properties.onItemClick]
       */
      onItemClick?: ((e: ItemClickEvent) => void) | string;
      /**
       * [descr:Properties.onLegendClick]
       */
      onLegendClick?: ((e: LegendClickEvent) => void) | string;
      /**
       * [descr:Properties.onSelectionChanged]
       */
      onSelectionChanged?: (e: SelectionChangedEvent) => void;
      /**
       * [descr:Properties.palette]
       */
      palette?: Array<string> | PaletteType;
      /**
       * [descr:Properties.paletteExtensionMode]
       */
      paletteExtensionMode?: PaletteExtensionModeType;
      /**
       * [descr:Properties.resolveLabelOverlapping]
       */
      resolveLabelOverlapping?: 'hide' | 'none' | 'shift';
      /**
       * [descr:Properties.selectionMode]
       */
      selectionMode?: 'multiple' | 'none' | 'single';
      /**
       * [descr:Properties.sortData]
       */
      sortData?: boolean;
      /**
       * [descr:Properties.tooltip]
       */
      tooltip?: dxFunnelTooltip;
      /**
       * [descr:Properties.valueField]
       */
      valueField?: string;
    }
    export type SelectionChangedEvent = DevExpress.events.EventInfo<dxFunnel> &
      FunnelItemInfo;
  }
  /**
   * @deprecated Use DevExpress.viz.dxFunnel.Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type dxFunnelItem = DevExpress.viz.dxFunnel.Item;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxFunnelLegend extends BaseLegend {
    /**
     * [descr:dxFunnelOptions.legend.customizeHint]
     */
    customizeHint?: (itemInfo: {
      item?: DevExpress.viz.dxFunnel.Item;
      text?: string;
    }) => string;
    /**
     * [descr:dxFunnelOptions.legend.customizeItems]
     */
    customizeItems?: (
      items: Array<DevExpress.viz.dxFunnel.LegendItem>
    ) => Array<DevExpress.viz.dxFunnel.LegendItem>;
    /**
     * [descr:dxFunnelOptions.legend.customizeText]
     */
    customizeText?: (itemInfo: {
      item?: DevExpress.viz.dxFunnel.Item;
      text?: string;
    }) => string;
    /**
     * [descr:dxFunnelOptions.legend.markerTemplate]
     */
    markerTemplate?:
      | DevExpress.core.template
      | ((
          legendItem: DevExpress.viz.dxFunnel.LegendItem,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
    /**
     * [descr:dxFunnelOptions.legend.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxFunnelTooltip extends BaseWidgetTooltip {
    /**
     * [descr:dxFunnelOptions.tooltip.contentTemplate]
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          info: {
            item?: DevExpress.viz.dxFunnel.Item;
            value?: number;
            valueText?: string;
            percent?: number;
            percentText?: string;
          },
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:dxFunnelOptions.tooltip.customizeTooltip]
     */
    customizeTooltip?: (info: {
      item?: DevExpress.viz.dxFunnel.Item;
      value?: number;
      valueText?: string;
      percent?: number;
      percentText?: string;
    }) => any;
  }
  /**
   * [descr:dxLinearGauge]
   */
  export class dxLinearGauge extends BaseGauge<DevExpress.viz.dxLinearGauge.Properties> {}
  module dxLinearGauge {
    export type DisposingEvent = DevExpress.events.EventInfo<dxLinearGauge>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxLinearGauge>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxLinearGauge>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxLinearGauge> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxLinearGauge>;
    export type IncidentOccurredEvent =
      DevExpress.events.EventInfo<dxLinearGauge> &
        DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxLinearGauge>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxLinearGauge> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends BaseGaugeOptions<dxLinearGauge> {
      /**
       * [descr:Properties.geometry]
       */
      geometry?: {
        /**
         * [descr:Properties.geometry.orientation]
         */
        orientation?: 'horizontal' | 'vertical';
      };
      /**
       * [descr:Properties.rangeContainer]
       */
      rangeContainer?: dxLinearGaugeRangeContainer;
      /**
       * [descr:Properties.scale]
       */
      scale?: dxLinearGaugeScale;
      /**
       * [descr:Properties.subvalueIndicator]
       */
      subvalueIndicator?: GaugeIndicator;
      /**
       * [descr:Properties.valueIndicator]
       */
      valueIndicator?: GaugeIndicator;
    }
    export type TooltipHiddenEvent =
      DevExpress.events.EventInfo<dxLinearGauge> &
        DevExpress.viz.BaseGauge.TooltipInfo;
    export type TooltipShownEvent = DevExpress.events.EventInfo<dxLinearGauge> &
      DevExpress.viz.BaseGauge.TooltipInfo;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxLinearGaugeRangeContainer extends BaseGaugeRangeContainer {
    /**
     * [descr:dxLinearGaugeOptions.rangeContainer.horizontalOrientation]
     */
    horizontalOrientation?: 'center' | 'left' | 'right';
    /**
     * [descr:dxLinearGaugeOptions.rangeContainer.verticalOrientation]
     */
    verticalOrientation?: 'bottom' | 'center' | 'top';
    /**
     * [descr:dxLinearGaugeOptions.rangeContainer.width]
     */
    width?:
      | {
          /**
           * [descr:dxLinearGaugeOptions.rangeContainer.width.start]
           */
          start?: number;
          /**
           * [descr:dxLinearGaugeOptions.rangeContainer.width.end]
           */
          end?: number;
        }
      | number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxLinearGaugeScale extends BaseGaugeScale {
    /**
     * [descr:dxLinearGaugeOptions.scale.horizontalOrientation]
     */
    horizontalOrientation?: 'center' | 'left' | 'right';
    /**
     * [descr:dxLinearGaugeOptions.scale.label]
     */
    label?: dxLinearGaugeScaleLabel;
    /**
     * [descr:dxLinearGaugeOptions.scale.scaleDivisionFactor]
     */
    scaleDivisionFactor?: number;
    /**
     * [descr:dxLinearGaugeOptions.scale.verticalOrientation]
     */
    verticalOrientation?: 'bottom' | 'center' | 'top';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxLinearGaugeScaleLabel extends BaseGaugeScaleLabel {
    /**
     * [descr:dxLinearGaugeOptions.scale.label.indentFromTick]
     */
    indentFromTick?: number;
  }
  /**
   * [descr:dxPieChart]
   */
  export class dxPieChart extends BaseChart<DevExpress.viz.dxPieChart.Properties> {
    /**
     * [descr:dxPieChart.getInnerRadius()]
     */
    getInnerRadius(): number;
  }
  module dxPieChart {
    export type DisposingEvent = DevExpress.events.EventInfo<dxPieChart>;
    export type DoneEvent = DevExpress.events.EventInfo<dxPieChart>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxPieChart>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxPieChart>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxPieChart> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxPieChart>;
    export type IncidentOccurredEvent =
      DevExpress.events.EventInfo<dxPieChart> &
        DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxPieChart>;
    export type LegendClickEvent =
      DevExpress.events.NativeEventInfo<dxPieChart> & {
        readonly target: string | number;
        readonly points: Array<piePointObject>;
      };
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxPieChart> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export type PieSeriesType = 'donut' | 'doughnut' | 'pie';
    export type PointClickEvent =
      DevExpress.events.NativeEventInfo<dxPieChart> &
        DevExpress.viz.BaseChart.PointInteractionInfo;
    export type PointHoverChangedEvent =
      DevExpress.events.EventInfo<dxPieChart> &
        DevExpress.viz.BaseChart.PointInteractionInfo;
    export type PointSelectionChangedEvent =
      DevExpress.events.EventInfo<dxPieChart> &
        DevExpress.viz.BaseChart.PointInteractionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends BaseChartOptions<dxPieChart> {
      /**
       * [descr:Properties.adaptiveLayout]
       */
      adaptiveLayout?: dxPieChartAdaptiveLayout;
      /**
       * [descr:Properties.centerTemplate]
       */
      centerTemplate?:
        | DevExpress.core.template
        | ((
            component: dxPieChart,
            element: SVGGElement
          ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
      /**
       * [descr:Properties.commonSeriesSettings]
       */
      commonSeriesSettings?: any;
      /**
       * [descr:Properties.diameter]
       */
      diameter?: number;
      /**
       * [descr:Properties.innerRadius]
       */
      innerRadius?: number;
      /**
       * [descr:Properties.legend]
       */
      legend?: dxPieChartLegend;
      /**
       * [descr:Properties.minDiameter]
       */
      minDiameter?: number;
      /**
       * [descr:Properties.onLegendClick]
       */
      onLegendClick?: ((e: LegendClickEvent) => void) | string;
      /**
       * [descr:Properties.palette]
       */
      palette?: Array<string> | PaletteType;
      /**
       * [descr:Properties.resolveLabelOverlapping]
       */
      resolveLabelOverlapping?: 'hide' | 'none' | 'shift';
      /**
       * [descr:Properties.segmentsDirection]
       */
      segmentsDirection?: SegmentsDirectionType;
      /**
       * [descr:Properties.series]
       */
      series?: PieChartSeries | Array<PieChartSeries>;
      /**
       * [descr:Properties.seriesTemplate]
       */
      seriesTemplate?: {
        /**
         * [descr:Properties.seriesTemplate.customizeSeries]
         */
        customizeSeries?: (seriesName: any) => PieChartSeries;
        /**
         * [descr:Properties.seriesTemplate.nameField]
         */
        nameField?: string;
      };
      /**
       * [descr:Properties.sizeGroup]
       */
      sizeGroup?: string;
      /**
       * [descr:Properties.startAngle]
       */
      startAngle?: number;
      /**
       * [descr:Properties.type]
       */
      type?: PieSeriesType;
      /**
       * [descr:Properties.annotations]
       */
      annotations?: Array<dxPieChartAnnotationConfig | any>;
      /**
       * [descr:Properties.commonAnnotationSettings]
       */
      commonAnnotationSettings?: dxPieChartCommonAnnotationConfig;
      /**
       * [descr:Properties.customizeAnnotation]
       */
      customizeAnnotation?: (
        annotation: dxPieChartAnnotationConfig | any
      ) => dxPieChartAnnotationConfig;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export type SegmentsDirectionType = 'anticlockwise' | 'clockwise';
    export type TooltipHiddenEvent = DevExpress.events.EventInfo<dxPieChart> &
      DevExpress.viz.BaseChart.TooltipInfo;
    export type TooltipShownEvent = DevExpress.events.EventInfo<dxPieChart> &
      DevExpress.viz.BaseChart.TooltipInfo;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPieChartAdaptiveLayout extends BaseChartAdaptiveLayout {
    /**
     * [descr:dxPieChartOptions.adaptiveLayout.keepLabels]
     */
    keepLabels?: boolean;
  }
  /**
   * [descr:dxPieChartAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPieChartAnnotationConfig
    extends dxPieChartCommonAnnotationConfig {
    /**
     * [descr:dxPieChartAnnotationConfig.name]
     */
    name?: string;
  }
  /**
   * [descr:dxPieChartCommonAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPieChartCommonAnnotationConfig
    extends BaseWidgetAnnotationConfig {
    /**
     * [descr:dxPieChartCommonAnnotationConfig.location]
     */
    location?: 'center' | 'edge';
    /**
     * [descr:dxPieChartCommonAnnotationConfig.argument]
     */
    argument?: number | Date | string;
    /**
     * [descr:dxPieChartCommonAnnotationConfig.series]
     */
    series?: string;
    /**
     * [descr:dxPieChartCommonAnnotationConfig.customizeTooltip]
     */
    customizeTooltip?: (annotation: dxPieChartAnnotationConfig | any) => any;
    /**
     * [descr:dxPieChartCommonAnnotationConfig.template]
     */
    template?:
      | DevExpress.core.template
      | ((
          annotation: dxPieChartAnnotationConfig | any,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
    /**
     * [descr:dxPieChartCommonAnnotationConfig.tooltipTemplate]
     */
    tooltipTemplate?:
      | DevExpress.core.template
      | ((
          annotation: dxPieChartAnnotationConfig | any,
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPieChartLegend extends BaseChartLegend {
    /**
     * [descr:dxPieChartOptions.legend.customizeHint]
     */
    customizeHint?: (pointInfo: {
      pointName?: any;
      pointIndex?: number;
      pointColor?: string;
    }) => string;
    /**
     * [descr:dxPieChartOptions.legend.customizeItems]
     */
    customizeItems?: (
      items: Array<DevExpress.viz.dxPieChart.LegendItem>
    ) => Array<DevExpress.viz.dxPieChart.LegendItem>;
    /**
     * [descr:dxPieChartOptions.legend.customizeText]
     */
    customizeText?: (pointInfo: {
      pointName?: any;
      pointIndex?: number;
      pointColor?: string;
    }) => string;
    /**
     * [descr:dxPieChartOptions.legend.hoverMode]
     */
    hoverMode?: 'none' | 'allArgumentPoints';
    /**
     * [descr:dxPieChartOptions.legend.markerTemplate]
     */
    markerTemplate?:
      | DevExpress.core.template
      | ((
          legendItem: DevExpress.viz.dxPieChart.LegendItem,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
  }
  /**
   * [descr:dxPieChartSeriesTypes]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPieChartSeriesTypes {
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries]
     */
    CommonPieChartSeries?: dxPieChartSeriesTypesCommonPieChartSeries;
    /**
     * [descr:dxPieChartSeriesTypes.DoughnutSeries]
     */
    DoughnutSeries?: any;
    /**
     * [descr:dxPieChartSeriesTypes.PieSeries]
     */
    PieSeries?: any;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPieChartSeriesTypesCommonPieChartSeries {
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.argumentField]
     */
    argumentField?: string;
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.argumentType]
     */
    argumentType?: 'datetime' | 'numeric' | 'string';
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.border]
     */
    border?: {
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.border.color]
       */
      color?: string;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.border.dashStyle]
       */
      dashStyle?: DashStyleType;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.border.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.color]
     */
    color?: string;
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverMode]
     */
    hoverMode?: 'none' | 'onlyPoint';
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle]
     */
    hoverStyle?: {
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.border]
       */
      border?: {
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.border.color]
         */
        color?: string;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.border.dashStyle]
         */
        dashStyle?: DashStyleType;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.color]
       */
      color?: string;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.hatching]
       */
      hatching?: {
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.hatching.direction]
         */
        direction?: HatchingDirectionType;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.hatching.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.hatching.step]
         */
        step?: number;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.hatching.width]
         */
        width?: number;
      };
    };
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label]
     */
    label?: {
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.argumentFormat]
       */
      argumentFormat?: DevExpress.ui.Format;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.backgroundColor]
       */
      backgroundColor?: string;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.border]
       */
      border?: {
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.border.color]
         */
        color?: string;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.border.dashStyle]
         */
        dashStyle?: DashStyleType;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.connector]
       */
      connector?: {
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.connector.color]
         */
        color?: string;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.connector.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.connector.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.customizeText]
       */
      customizeText?: (pointInfo: any) => string;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.font]
       */
      font?: Font;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.format]
       */
      format?: DevExpress.ui.Format;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.position]
       */
      position?: 'columns' | 'inside' | 'outside';
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.radialOffset]
       */
      radialOffset?: number;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.rotationAngle]
       */
      rotationAngle?: number;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.textOverflow]
       */
      textOverflow?: DevExpress.viz.BaseWidget.VizTextOverflowType;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.wordWrap]
       */
      wordWrap?: DevExpress.viz.BaseWidget.WordWrapType;
    };
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.maxLabelCount]
     */
    maxLabelCount?: number;
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.minSegmentSize]
     */
    minSegmentSize?: number;
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionMode]
     */
    selectionMode?: 'none' | 'onlyPoint';
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle]
     */
    selectionStyle?: {
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.border]
       */
      border?: {
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.border.color]
         */
        color?: string;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.border.dashStyle]
         */
        dashStyle?: DashStyleType;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.color]
       */
      color?: string;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.hatching]
       */
      hatching?: {
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.hatching.direction]
         */
        direction?: HatchingDirectionType;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.hatching.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.hatching.step]
         */
        step?: number;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.hatching.width]
         */
        width?: number;
      };
    };
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.smallValuesGrouping]
     */
    smallValuesGrouping?: {
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.smallValuesGrouping.groupName]
       */
      groupName?: string;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.smallValuesGrouping.mode]
       */
      mode?: 'none' | 'smallValueThreshold' | 'topN';
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.smallValuesGrouping.threshold]
       */
      threshold?: number;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.smallValuesGrouping.topCount]
       */
      topCount?: number;
    };
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.tagField]
     */
    tagField?: string;
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.valueField]
     */
    valueField?: string;
  }
  /**
   * [descr:dxPolarChart]
   */
  export class dxPolarChart extends BaseChart<DevExpress.viz.dxPolarChart.Properties> {
    /**
     * [descr:dxPolarChart.getValueAxis()]
     */
    getValueAxis(): chartAxisObject;
    /**
     * [descr:dxPolarChart.resetVisualRange()]
     */
    resetVisualRange(): void;
  }
  module dxPolarChart {
    export type ArgumentAxisClickEvent =
      DevExpress.events.NativeEventInfo<dxPolarChart> & {
        readonly argument: Date | number | string;
      };
    export type DisposingEvent = DevExpress.events.EventInfo<dxPolarChart>;
    export type DoneEvent = DevExpress.events.EventInfo<dxPolarChart>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxPolarChart>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxPolarChart>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxPolarChart> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxPolarChart>;
    export type IncidentOccurredEvent =
      DevExpress.events.EventInfo<dxPolarChart> &
        DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxPolarChart>;
    export type LegendClickEvent =
      DevExpress.events.NativeEventInfo<dxPolarChart> & {
        readonly target: polarChartSeriesObject;
      };
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxPolarChart> &
      DevExpress.events.ChangedOptionInfo;
    export type PointClickEvent =
      DevExpress.events.NativeEventInfo<dxPolarChart> &
        DevExpress.viz.BaseChart.PointInteractionInfo;
    export type PointHoverChangedEvent =
      DevExpress.events.EventInfo<dxPolarChart> &
        DevExpress.viz.BaseChart.PointInteractionInfo;
    export type PointSelectionChangedEvent =
      DevExpress.events.EventInfo<dxPolarChart> &
        DevExpress.viz.BaseChart.PointInteractionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export type PolarChartSeriesType =
      | 'area'
      | 'bar'
      | 'line'
      | 'scatter'
      | 'stackedbar';
    /**
     * [descr:Properties]
     */
    export interface Properties extends BaseChartOptions<dxPolarChart> {
      /**
       * [descr:Properties.adaptiveLayout]
       */
      adaptiveLayout?: dxPolarChartAdaptiveLayout;
      /**
       * [descr:Properties.annotations]
       */
      annotations?: Array<dxPolarChartAnnotationConfig | any>;
      /**
       * [descr:Properties.argumentAxis]
       */
      argumentAxis?: dxPolarChartArgumentAxis;
      /**
       * [descr:Properties.barGroupPadding]
       */
      barGroupPadding?: number;
      /**
       * [descr:Properties.barGroupWidth]
       */
      barGroupWidth?: number;
      /**
       * [descr:Properties.commonAnnotationSettings]
       */
      commonAnnotationSettings?: dxPolarChartCommonAnnotationConfig;
      /**
       * [descr:Properties.commonAxisSettings]
       */
      commonAxisSettings?: dxPolarChartCommonAxisSettings;
      /**
       * [descr:Properties.commonSeriesSettings]
       */
      commonSeriesSettings?: dxPolarChartCommonSeriesSettings;
      /**
       * [descr:Properties.containerBackgroundColor]
       */
      containerBackgroundColor?: string;
      /**
       * [descr:Properties.customizeAnnotation]
       */
      customizeAnnotation?: (
        annotation: dxPolarChartAnnotationConfig | any
      ) => dxPolarChartAnnotationConfig;
      /**
       * [descr:Properties.dataPrepareSettings]
       */
      dataPrepareSettings?: {
        /**
         * [descr:Properties.dataPrepareSettings.checkTypeForAllData]
         */
        checkTypeForAllData?: boolean;
        /**
         * [descr:Properties.dataPrepareSettings.convertToAxisDataType]
         */
        convertToAxisDataType?: boolean;
        /**
         * [descr:Properties.dataPrepareSettings.sortingMethod]
         */
        sortingMethod?:
          | boolean
          | ((
              a: { arg?: Date | number | string; val?: Date | number | string },
              b: { arg?: Date | number | string; val?: Date | number | string }
            ) => number);
      };
      /**
       * [descr:Properties.legend]
       */
      legend?: dxPolarChartLegend;
      /**
       * [descr:Properties.negativesAsZeroes]
       */
      negativesAsZeroes?: boolean;
      /**
       * [descr:Properties.onArgumentAxisClick]
       */
      onArgumentAxisClick?:
        | ((e: {
            component?: dxPolarChart;
            element?: DevExpress.core.DxElement;
            model?: any;
            event?: DevExpress.events.DxEvent;
            argument?: Date | number | string;
          }) => void)
        | string;
      /**
       * [descr:Properties.onLegendClick]
       */
      onLegendClick?: ((e: LegendClickEvent) => void) | string;
      /**
       * [descr:Properties.onSeriesClick]
       */
      onSeriesClick?: ((e: SeriesClickEvent) => void) | string;
      /**
       * [descr:Properties.onSeriesHoverChanged]
       */
      onSeriesHoverChanged?: (e: SeriesHoverChangedEvent) => void;
      /**
       * [descr:Properties.onSeriesSelectionChanged]
       */
      onSeriesSelectionChanged?: (e: SeriesSelectionChangedEvent) => void;
      /**
       * [descr:Properties.onZoomEnd]
       */
      onZoomEnd?: (e: ZoomEndEvent) => void;
      /**
       * [descr:Properties.onZoomStart]
       */
      onZoomStart?: (e: ZoomStartEvent) => void;
      /**
       * [descr:Properties.resolveLabelOverlapping]
       */
      resolveLabelOverlapping?: 'hide' | 'none';
      /**
       * [descr:Properties.series]
       */
      series?: PolarChartSeries | Array<PolarChartSeries>;
      /**
       * [descr:Properties.seriesSelectionMode]
       */
      seriesSelectionMode?: 'multiple' | 'single';
      /**
       * [descr:Properties.seriesTemplate]
       */
      seriesTemplate?: {
        /**
         * [descr:Properties.seriesTemplate.customizeSeries]
         */
        customizeSeries?: (seriesName: any) => PolarChartSeries;
        /**
         * [descr:Properties.seriesTemplate.nameField]
         */
        nameField?: string;
      };
      /**
       * [descr:Properties.tooltip]
       */
      tooltip?: dxPolarChartTooltip;
      /**
       * [descr:Properties.useSpiderWeb]
       */
      useSpiderWeb?: boolean;
      /**
       * [descr:Properties.valueAxis]
       */
      valueAxis?: dxPolarChartValueAxis;
    }
    export type SeriesClickEvent =
      DevExpress.events.NativeEventInfo<dxPolarChart> & {
        readonly target: polarChartSeriesObject;
      };
    export type SeriesHoverChangedEvent =
      DevExpress.events.EventInfo<dxPolarChart> & SeriesInteractionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    interface SeriesInteractionInfo {
      target: polarChartSeriesObject;
    }
    export type SeriesSelectionChangedEvent =
      DevExpress.events.EventInfo<dxPolarChart> & SeriesInteractionInfo;
    export type TooltipHiddenEvent = DevExpress.events.EventInfo<dxPolarChart> &
      DevExpress.viz.BaseChart.TooltipInfo;
    export type TooltipShownEvent = DevExpress.events.EventInfo<dxPolarChart> &
      DevExpress.viz.BaseChart.TooltipInfo;
    export type ZoomEndEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxPolarChart> & {
        readonly axis: chartAxisObject;
        readonly range: VizRange;
        readonly previousRange: VizRange;
        readonly actionType: 'zoom' | 'pan';
        readonly zoomFactor: number;
        readonly shift: number;
      };
    export type ZoomStartEvent = DevExpress.events.Cancelable &
      DevExpress.events.NativeEventInfo<dxPolarChart> & {
        readonly axis: chartAxisObject;
        readonly range: VizRange;
        readonly actionType: 'zoom' | 'pan';
      };
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartAdaptiveLayout extends BaseChartAdaptiveLayout {
    /**
     * [descr:dxPolarChartOptions.adaptiveLayout.height]
     */
    height?: number;
    /**
     * [descr:dxPolarChartOptions.adaptiveLayout.width]
     */
    width?: number;
  }
  /**
   * [descr:dxPolarChartAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartAnnotationConfig
    extends dxPolarChartCommonAnnotationConfig {
    /**
     * [descr:dxPolarChartAnnotationConfig.name]
     */
    name?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartArgumentAxis
    extends dxPolarChartCommonAxisSettings {
    /**
     * [descr:dxPolarChartOptions.argumentAxis.argumentType]
     */
    argumentType?: 'datetime' | 'numeric' | 'string';
    /**
     * [descr:dxPolarChartOptions.argumentAxis.axisDivisionFactor]
     */
    axisDivisionFactor?: number;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.categories]
     */
    categories?: Array<number | string | Date>;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.constantLines]
     */
    constantLines?: Array<dxPolarChartArgumentAxisConstantLines>;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.firstPointOnStartAngle]
     */
    firstPointOnStartAngle?: boolean;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.hoverMode]
     */
    hoverMode?: 'allArgumentPoints' | 'none';
    /**
     * [descr:dxPolarChartOptions.argumentAxis.label]
     */
    label?: dxPolarChartArgumentAxisLabel;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.linearThreshold]
     */
    linearThreshold?: number;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.logarithmBase]
     */
    logarithmBase?: number;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.minorTick]
     */
    minorTick?: dxPolarChartArgumentAxisMinorTick;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.minorTickCount]
     */
    minorTickCount?: number;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.minorTickInterval]
     */
    minorTickInterval?: VizTimeInterval;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.originValue]
     */
    originValue?: number;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.period]
     */
    period?: number;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.startAngle]
     */
    startAngle?: number;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.strips]
     */
    strips?: Array<dxPolarChartArgumentAxisStrips>;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.tick]
     */
    tick?: dxPolarChartArgumentAxisTick;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.tickInterval]
     */
    tickInterval?: VizTimeInterval;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.type]
     */
    type?: 'continuous' | 'discrete' | 'logarithmic';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartArgumentAxisConstantLines
    extends dxPolarChartCommonAxisSettingsConstantLineStyle {
    /**
     * [descr:dxPolarChartOptions.argumentAxis.constantLines.displayBehindSeries]
     */
    displayBehindSeries?: boolean;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.constantLines.extendAxis]
     */
    extendAxis?: boolean;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.constantLines.label]
     */
    label?: dxPolarChartArgumentAxisConstantLinesLabel;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.constantLines.value]
     */
    value?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartArgumentAxisConstantLinesLabel
    extends dxPolarChartCommonAxisSettingsConstantLineStyleLabel {
    /**
     * [descr:dxPolarChartOptions.argumentAxis.constantLines.label.text]
     */
    text?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartArgumentAxisLabel
    extends dxPolarChartCommonAxisSettingsLabel {
    /**
     * [descr:dxPolarChartOptions.argumentAxis.label.customizeHint]
     */
    customizeHint?: (argument: {
      value?: Date | number | string;
      valueText?: string;
    }) => string;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.label.customizeText]
     */
    customizeText?: (argument: {
      value?: Date | number | string;
      valueText?: string;
    }) => string;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.label.format]
     */
    format?: DevExpress.ui.Format;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartArgumentAxisMinorTick
    extends dxPolarChartCommonAxisSettingsMinorTick {
    /**
     * [descr:dxPolarChartOptions.argumentAxis.minorTick.shift]
     */
    shift?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartArgumentAxisStrips
    extends dxPolarChartCommonAxisSettingsStripStyle {
    /**
     * [descr:dxPolarChartOptions.argumentAxis.strips.color]
     */
    color?: string;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.strips.endValue]
     */
    endValue?: number | Date | string;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.strips.label]
     */
    label?: dxPolarChartArgumentAxisStripsLabel;
    /**
     * [descr:dxPolarChartOptions.argumentAxis.strips.startValue]
     */
    startValue?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartArgumentAxisStripsLabel
    extends dxPolarChartCommonAxisSettingsStripStyleLabel {
    /**
     * [descr:dxPolarChartOptions.argumentAxis.strips.label.text]
     */
    text?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartArgumentAxisTick
    extends dxPolarChartCommonAxisSettingsTick {
    /**
     * [descr:dxPolarChartOptions.argumentAxis.tick.shift]
     */
    shift?: number;
  }
  /**
   * [descr:dxPolarChartCommonAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartCommonAnnotationConfig
    extends BaseChartAnnotationConfig {
    /**
     * [descr:dxPolarChartCommonAnnotationConfig.angle]
     */
    angle?: number;
    /**
     * [descr:dxPolarChartCommonAnnotationConfig.radius]
     */
    radius?: number;
    /**
     * [descr:dxPolarChartCommonAnnotationConfig.customizeTooltip]
     */
    customizeTooltip?: (annotation: dxPolarChartAnnotationConfig | any) => any;
    /**
     * [descr:dxPolarChartCommonAnnotationConfig.template]
     */
    template?:
      | DevExpress.core.template
      | ((
          annotation: dxPolarChartAnnotationConfig | any,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
    /**
     * [descr:dxPolarChartCommonAnnotationConfig.tooltipTemplate]
     */
    tooltipTemplate?:
      | DevExpress.core.template
      | ((
          annotation: dxPolarChartAnnotationConfig | any,
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartCommonAxisSettings {
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.allowDecimals]
     */
    allowDecimals?: boolean;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.color]
     */
    color?: string;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.constantLineStyle]
     */
    constantLineStyle?: dxPolarChartCommonAxisSettingsConstantLineStyle;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.discreteAxisDivisionMode]
     */
    discreteAxisDivisionMode?: 'betweenLabels' | 'crossLabels';
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.endOnTick]
     */
    endOnTick?: boolean;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.grid]
     */
    grid?: {
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.grid.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.grid.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.grid.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.grid.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.inverted]
     */
    inverted?: boolean;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.label]
     */
    label?: dxPolarChartCommonAxisSettingsLabel;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.minorGrid]
     */
    minorGrid?: {
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.minorGrid.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.minorGrid.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.minorGrid.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.minorGrid.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.minorTick]
     */
    minorTick?: dxPolarChartCommonAxisSettingsMinorTick;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.opacity]
     */
    opacity?: number;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.stripStyle]
     */
    stripStyle?: dxPolarChartCommonAxisSettingsStripStyle;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.tick]
     */
    tick?: dxPolarChartCommonAxisSettingsTick;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartCommonAxisSettingsConstantLineStyle {
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.constantLineStyle.color]
     */
    color?: string;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.constantLineStyle.dashStyle]
     */
    dashStyle?: DashStyleType;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.constantLineStyle.label]
     */
    label?: dxPolarChartCommonAxisSettingsConstantLineStyleLabel;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.constantLineStyle.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartCommonAxisSettingsConstantLineStyleLabel {
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.constantLineStyle.label.font]
     */
    font?: Font;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.constantLineStyle.label.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartCommonAxisSettingsLabel {
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.label.font]
     */
    font?: Font;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.label.indentFromAxis]
     */
    indentFromAxis?: number;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.label.overlappingBehavior]
     */
    overlappingBehavior?: 'none' | 'hide';
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.label.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartCommonAxisSettingsMinorTick {
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.minorTick.color]
     */
    color?: string;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.minorTick.length]
     */
    length?: number;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.minorTick.opacity]
     */
    opacity?: number;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.minorTick.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.minorTick.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartCommonAxisSettingsStripStyle {
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.stripStyle.label]
     */
    label?: dxPolarChartCommonAxisSettingsStripStyleLabel;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartCommonAxisSettingsStripStyleLabel {
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.stripStyle.label.font]
     */
    font?: Font;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartCommonAxisSettingsTick {
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.tick.color]
     */
    color?: string;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.tick.length]
     */
    length?: number;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.tick.opacity]
     */
    opacity?: number;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.tick.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings.tick.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartCommonSeriesSettings
    extends dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * [descr:dxPolarChartOptions.commonSeriesSettings.area]
     */
    area?: any;
    /**
     * [descr:dxPolarChartOptions.commonSeriesSettings.bar]
     */
    bar?: any;
    /**
     * [descr:dxPolarChartOptions.commonSeriesSettings.line]
     */
    line?: any;
    /**
     * [descr:dxPolarChartOptions.commonSeriesSettings.scatter]
     */
    scatter?: any;
    /**
     * [descr:dxPolarChartOptions.commonSeriesSettings.stackedbar]
     */
    stackedbar?: any;
    /**
     * [descr:dxPolarChartOptions.commonSeriesSettings.type]
     */
    type?: DevExpress.viz.dxPolarChart.PolarChartSeriesType;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartLegend extends BaseChartLegend {
    /**
     * [descr:dxPolarChartOptions.legend.customizeHint]
     */
    customizeHint?: (seriesInfo: {
      seriesName?: any;
      seriesIndex?: number;
      seriesColor?: string;
    }) => string;
    /**
     * [descr:dxPolarChartOptions.legend.customizeText]
     */
    customizeText?: (seriesInfo: {
      seriesName?: any;
      seriesIndex?: number;
      seriesColor?: string;
    }) => string;
    /**
     * [descr:dxPolarChartOptions.legend.hoverMode]
     */
    hoverMode?: 'excludePoints' | 'includePoints' | 'none';
  }
  /**
   * [descr:dxPolarChartSeriesTypes]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartSeriesTypes {
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries]
     */
    CommonPolarChartSeries?: dxPolarChartSeriesTypesCommonPolarChartSeries;
    /**
     * [descr:dxPolarChartSeriesTypes.areapolarseries]
     */
    areapolarseries?: dxPolarChartSeriesTypesAreapolarseries;
    /**
     * [descr:dxPolarChartSeriesTypes.barpolarseries]
     */
    barpolarseries?: dxPolarChartSeriesTypesBarpolarseries;
    /**
     * [descr:dxPolarChartSeriesTypes.linepolarseries]
     */
    linepolarseries?: dxPolarChartSeriesTypesLinepolarseries;
    /**
     * [descr:dxPolarChartSeriesTypes.scatterpolarseries]
     */
    scatterpolarseries?: any;
    /**
     * [descr:dxPolarChartSeriesTypes.stackedbarpolarseries]
     */
    stackedbarpolarseries?: dxPolarChartSeriesTypesStackedbarpolarseries;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartSeriesTypesAreapolarseries
    extends dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * [descr:dxPolarChartSeriesTypes.areapolarseries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxPolarChartSeriesTypes.areapolarseries.point]
     */
    point?: dxPolarChartSeriesTypesAreapolarseriesPoint;
    /**
     * [descr:dxPolarChartSeriesTypes.areapolarseries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartSeriesTypesAreapolarseriesPoint
    extends dxPolarChartSeriesTypesCommonPolarChartSeriesPoint {
    /**
     * [descr:dxPolarChartSeriesTypes.areapolarseries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartSeriesTypesBarpolarseries
    extends dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * [descr:dxPolarChartSeriesTypes.barpolarseries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxPolarChartSeriesTypes.barpolarseries.selectionMode]
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.argumentField]
     */
    argumentField?: string;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.barPadding]
     */
    barPadding?: number;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.barWidth]
     */
    barWidth?: number;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.border]
     */
    border?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.border.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.border.dashStyle]
       */
      dashStyle?: DashStyleType;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.border.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.closed]
     */
    closed?: boolean;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.color]
     */
    color?: string;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.dashStyle]
     */
    dashStyle?: DashStyleType;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverMode]
     */
    hoverMode?:
      | 'allArgumentPoints'
      | 'allSeriesPoints'
      | 'excludePoints'
      | 'includePoints'
      | 'nearestPoint'
      | 'none'
      | 'onlyPoint';
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle]
     */
    hoverStyle?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.border]
       */
      border?: {
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.border.color]
         */
        color?: string;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.border.dashStyle]
         */
        dashStyle?: DashStyleType;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.dashStyle]
       */
      dashStyle?: DashStyleType;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.hatching]
       */
      hatching?: {
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.hatching.direction]
         */
        direction?: HatchingDirectionType;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.hatching.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.hatching.step]
         */
        step?: number;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.hatching.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.ignoreEmptyPoints]
     */
    ignoreEmptyPoints?: boolean;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label]
     */
    label?: dxPolarChartSeriesTypesCommonPolarChartSeriesLabel;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.maxLabelCount]
     */
    maxLabelCount?: number;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.minBarSize]
     */
    minBarSize?: number;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.opacity]
     */
    opacity?: number;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point]
     */
    point?: dxPolarChartSeriesTypesCommonPolarChartSeriesPoint;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionMode]
     */
    selectionMode?:
      | 'allArgumentPoints'
      | 'allSeriesPoints'
      | 'excludePoints'
      | 'includePoints'
      | 'none'
      | 'onlyPoint';
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle]
     */
    selectionStyle?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.border]
       */
      border?: {
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.border.color]
         */
        color?: string;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.border.dashStyle]
         */
        dashStyle?: DashStyleType;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.dashStyle]
       */
      dashStyle?: DashStyleType;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.hatching]
       */
      hatching?: {
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.hatching.direction]
         */
        direction?: HatchingDirectionType;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.hatching.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.hatching.step]
         */
        step?: number;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.hatching.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.showInLegend]
     */
    showInLegend?: boolean;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.stack]
     */
    stack?: string;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.tagField]
     */
    tagField?: string;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar]
     */
    valueErrorBar?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.displayMode]
       */
      displayMode?: 'auto' | 'high' | 'low' | 'none';
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.edgeLength]
       */
      edgeLength?: number;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.highValueField]
       */
      highValueField?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.lineWidth]
       */
      lineWidth?: number;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.lowValueField]
       */
      lowValueField?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.type]
       */
      type?: 'fixed' | 'percent' | 'stdDeviation' | 'stdError' | 'variance';
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.value]
       */
      value?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueField]
     */
    valueField?: string;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartSeriesTypesCommonPolarChartSeriesLabel {
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.argumentFormat]
     */
    argumentFormat?: DevExpress.ui.Format;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.backgroundColor]
     */
    backgroundColor?: string;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.border]
     */
    border?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.border.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.border.dashStyle]
       */
      dashStyle?: DashStyleType;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.border.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.connector]
     */
    connector?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.connector.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.connector.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.connector.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.font]
     */
    font?: Font;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.format]
     */
    format?: DevExpress.ui.Format;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.position]
     */
    position?: 'inside' | 'outside';
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.rotationAngle]
     */
    rotationAngle?: number;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.showForZeroValues]
     */
    showForZeroValues?: boolean;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartSeriesTypesCommonPolarChartSeriesPoint {
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.border]
     */
    border?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.border.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.border.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.color]
     */
    color?: string;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverMode]
     */
    hoverMode?: 'allArgumentPoints' | 'allSeriesPoints' | 'none' | 'onlyPoint';
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle]
     */
    hoverStyle?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.border]
       */
      border?: {
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.border.color]
         */
        color?: string;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.size]
       */
      size?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.image]
     */
    image?:
      | string
      | {
          /**
           * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.image.height]
           */
          height?: number;
          /**
           * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.image.url]
           */
          url?: string;
          /**
           * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.image.width]
           */
          width?: number;
        };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionMode]
     */
    selectionMode?:
      | 'allArgumentPoints'
      | 'allSeriesPoints'
      | 'none'
      | 'onlyPoint';
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle]
     */
    selectionStyle?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.border]
       */
      border?: {
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.border.color]
         */
        color?: string;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.size]
       */
      size?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.size]
     */
    size?: number;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.symbol]
     */
    symbol?: 'circle' | 'cross' | 'polygon' | 'square' | 'triangle';
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartSeriesTypesLinepolarseries
    extends dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * [descr:dxPolarChartSeriesTypes.linepolarseries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxPolarChartSeriesTypes.linepolarseries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartSeriesTypesStackedbarpolarseries
    extends dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * [descr:dxPolarChartSeriesTypes.stackedbarpolarseries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxPolarChartSeriesTypes.stackedbarpolarseries.label]
     */
    label?: dxPolarChartSeriesTypesStackedbarpolarseriesLabel;
    /**
     * [descr:dxPolarChartSeriesTypes.stackedbarpolarseries.selectionMode]
     */
    selectionMode?:
      | 'onlyPoint'
      | 'allSeriesPoints'
      | 'allArgumentPoints'
      | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartSeriesTypesStackedbarpolarseriesLabel
    extends dxPolarChartSeriesTypesCommonPolarChartSeriesLabel {
    /**
     * [descr:dxPolarChartSeriesTypes.stackedbarpolarseries.label.position]
     */
    position?: 'inside' | 'outside';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartTooltip extends BaseChartTooltip {
    /**
     * [descr:dxPolarChartOptions.tooltip.shared]
     */
    shared?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartValueAxis
    extends dxPolarChartCommonAxisSettings {
    /**
     * [descr:dxPolarChartOptions.valueAxis.axisDivisionFactor]
     */
    axisDivisionFactor?: number;
    /**
     * [descr:dxPolarChartOptions.valueAxis.categories]
     */
    categories?: Array<number | string | Date>;
    /**
     * [descr:dxPolarChartOptions.valueAxis.constantLines]
     */
    constantLines?: Array<dxPolarChartValueAxisConstantLines>;
    /**
     * [descr:dxPolarChartOptions.valueAxis.endOnTick]
     */
    endOnTick?: boolean;
    /**
     * [descr:dxPolarChartOptions.valueAxis.label]
     */
    label?: dxPolarChartValueAxisLabel;
    /**
     * [descr:dxPolarChartOptions.valueAxis.linearThreshold]
     */
    linearThreshold?: number;
    /**
     * [descr:dxPolarChartOptions.valueAxis.logarithmBase]
     */
    logarithmBase?: number;
    /**
     * [descr:dxPolarChartOptions.valueAxis.maxValueMargin]
     */
    maxValueMargin?: number;
    /**
     * [descr:dxPolarChartOptions.valueAxis.minValueMargin]
     */
    minValueMargin?: number;
    /**
     * [descr:dxPolarChartOptions.valueAxis.minVisualRangeLength]
     */
    minVisualRangeLength?: VizTimeInterval;
    /**
     * [descr:dxPolarChartOptions.valueAxis.minorTickCount]
     */
    minorTickCount?: number;
    /**
     * [descr:dxPolarChartOptions.valueAxis.minorTickInterval]
     */
    minorTickInterval?: VizTimeInterval;
    /**
     * [descr:dxPolarChartOptions.valueAxis.showZero]
     */
    showZero?: boolean;
    /**
     * [descr:dxPolarChartOptions.valueAxis.strips]
     */
    strips?: Array<dxPolarChartValueAxisStrips>;
    /**
     * [descr:dxPolarChartOptions.valueAxis.tick]
     */
    tick?: dxPolarChartValueAxisTick;
    /**
     * [descr:dxPolarChartOptions.valueAxis.tickInterval]
     */
    tickInterval?: VizTimeInterval;
    /**
     * [descr:dxPolarChartOptions.valueAxis.type]
     */
    type?: 'continuous' | 'discrete' | 'logarithmic';
    /**
     * [descr:dxPolarChartOptions.valueAxis.valueMarginsEnabled]
     */
    valueMarginsEnabled?: boolean;
    /**
     * [descr:dxPolarChartOptions.valueAxis.valueType]
     */
    valueType?: 'datetime' | 'numeric' | 'string';
    /**
     * [descr:dxPolarChartOptions.valueAxis.visualRange]
     */
    visualRange?: VizRange | Array<number | string | Date>;
    /**
     * [descr:dxPolarChartOptions.valueAxis.visualRangeUpdateMode]
     */
    visualRangeUpdateMode?: 'auto' | 'keep' | 'reset';
    /**
     * [descr:dxPolarChartOptions.valueAxis.wholeRange]
     */
    wholeRange?: VizRange | Array<number | string | Date>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartValueAxisConstantLines
    extends dxPolarChartCommonAxisSettingsConstantLineStyle {
    /**
     * [descr:dxPolarChartOptions.valueAxis.constantLines.displayBehindSeries]
     */
    displayBehindSeries?: boolean;
    /**
     * [descr:dxPolarChartOptions.valueAxis.constantLines.extendAxis]
     */
    extendAxis?: boolean;
    /**
     * [descr:dxPolarChartOptions.valueAxis.constantLines.label]
     */
    label?: dxPolarChartValueAxisConstantLinesLabel;
    /**
     * [descr:dxPolarChartOptions.valueAxis.constantLines.value]
     */
    value?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartValueAxisConstantLinesLabel
    extends dxPolarChartCommonAxisSettingsConstantLineStyleLabel {
    /**
     * [descr:dxPolarChartOptions.valueAxis.constantLines.label.text]
     */
    text?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartValueAxisLabel
    extends dxPolarChartCommonAxisSettingsLabel {
    /**
     * [descr:dxPolarChartOptions.valueAxis.label.customizeHint]
     */
    customizeHint?: (axisValue: {
      value?: Date | number | string;
      valueText?: string;
    }) => string;
    /**
     * [descr:dxPolarChartOptions.valueAxis.label.customizeText]
     */
    customizeText?: (axisValue: {
      value?: Date | number | string;
      valueText?: string;
    }) => string;
    /**
     * [descr:dxPolarChartOptions.valueAxis.label.format]
     */
    format?: DevExpress.ui.Format;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartValueAxisStrips
    extends dxPolarChartCommonAxisSettingsStripStyle {
    /**
     * [descr:dxPolarChartOptions.valueAxis.strips.color]
     */
    color?: string;
    /**
     * [descr:dxPolarChartOptions.valueAxis.strips.endValue]
     */
    endValue?: number | Date | string;
    /**
     * [descr:dxPolarChartOptions.valueAxis.strips.label]
     */
    label?: dxPolarChartValueAxisStripsLabel;
    /**
     * [descr:dxPolarChartOptions.valueAxis.strips.startValue]
     */
    startValue?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartValueAxisStripsLabel
    extends dxPolarChartCommonAxisSettingsStripStyleLabel {
    /**
     * [descr:dxPolarChartOptions.valueAxis.strips.label.text]
     */
    text?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxPolarChartValueAxisTick
    extends dxPolarChartCommonAxisSettingsTick {
    /**
     * [descr:dxPolarChartOptions.valueAxis.tick.visible]
     */
    visible?: boolean;
  }
  /**
   * [descr:dxRangeSelector]
   */
  export class dxRangeSelector extends BaseWidget<DevExpress.viz.dxRangeSelector.Properties> {
    getDataSource(): DevExpress.data.DataSource;
    /**
     * [descr:dxRangeSelector.getValue()]
     */
    getValue(): Array<number | string | Date>;
    render(): void;
    /**
     * [descr:dxRangeSelector.render(skipChartAnimation)]
     */
    render(skipChartAnimation: boolean): void;
    /**
     * [descr:dxRangeSelector.setValue(value)]
     */
    setValue(value: Array<number | string | Date> | VizRange): void;
  }
  module dxRangeSelector {
    export type DisposingEvent = DevExpress.events.EventInfo<dxRangeSelector>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxRangeSelector>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxRangeSelector>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxRangeSelector> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxRangeSelector>;
    export type IncidentOccurredEvent =
      DevExpress.events.EventInfo<dxRangeSelector> &
        DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxRangeSelector>;
    export type OptionChangedEvent =
      DevExpress.events.EventInfo<dxRangeSelector> &
        DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends BaseWidgetOptions<dxRangeSelector> {
      /**
       * [descr:Properties.background]
       */
      background?: {
        /**
         * [descr:Properties.background.color]
         */
        color?: string;
        /**
         * [descr:Properties.background.image]
         */
        image?: {
          /**
           * [descr:Properties.background.image.location]
           */
          location?:
            | 'center'
            | 'centerBottom'
            | 'centerTop'
            | 'full'
            | 'leftBottom'
            | 'leftCenter'
            | 'leftTop'
            | 'rightBottom'
            | 'rightCenter'
            | 'rightTop';
          /**
           * [descr:Properties.background.image.url]
           */
          url?: string;
        };
        /**
         * [descr:Properties.background.visible]
         */
        visible?: boolean;
      };
      /**
       * [descr:Properties.behavior]
       */
      behavior?: {
        /**
         * [descr:Properties.behavior.allowSlidersSwap]
         */
        allowSlidersSwap?: boolean;
        /**
         * [descr:Properties.behavior.animationEnabled]
         */
        animationEnabled?: boolean;
        /**
         * [descr:Properties.behavior.callValueChanged]
         */
        callValueChanged?: 'onMoving' | 'onMovingComplete';
        /**
         * [descr:Properties.behavior.manualRangeSelectionEnabled]
         */
        manualRangeSelectionEnabled?: boolean;
        /**
         * [descr:Properties.behavior.moveSelectedRangeByClick]
         */
        moveSelectedRangeByClick?: boolean;
        /**
         * [descr:Properties.behavior.snapToTicks]
         */
        snapToTicks?: boolean;
      };
      /**
       * [descr:Properties.chart]
       */
      chart?: {
        /**
         * [descr:Properties.chart.barGroupPadding]
         */
        barGroupPadding?: number;
        /**
         * [descr:Properties.chart.barGroupWidth]
         */
        barGroupWidth?: number;
        /**
         * [descr:Properties.chart.bottomIndent]
         */
        bottomIndent?: number;
        /**
         * [descr:Properties.chart.commonSeriesSettings]
         */
        commonSeriesSettings?: dxChartCommonSeriesSettings;
        /**
         * [descr:Properties.chart.dataPrepareSettings]
         */
        dataPrepareSettings?: {
          /**
           * [descr:Properties.chart.dataPrepareSettings.checkTypeForAllData]
           */
          checkTypeForAllData?: boolean;
          /**
           * [descr:Properties.chart.dataPrepareSettings.convertToAxisDataType]
           */
          convertToAxisDataType?: boolean;
          /**
           * [descr:Properties.chart.dataPrepareSettings.sortingMethod]
           */
          sortingMethod?:
            | boolean
            | ((
                a: {
                  arg?: Date | number | string;
                  val?: Date | number | string;
                },
                b: {
                  arg?: Date | number | string;
                  val?: Date | number | string;
                }
              ) => number);
        };
        /**
         * [descr:Properties.chart.maxBubbleSize]
         */
        maxBubbleSize?: number;
        /**
         * [descr:Properties.chart.minBubbleSize]
         */
        minBubbleSize?: number;
        /**
         * [descr:Properties.chart.negativesAsZeroes]
         */
        negativesAsZeroes?: boolean;
        /**
         * [descr:Properties.chart.palette]
         */
        palette?: Array<string> | PaletteType;
        /**
         * [descr:Properties.chart.paletteExtensionMode]
         */
        paletteExtensionMode?: PaletteExtensionModeType;
        /**
         * [descr:Properties.chart.series]
         */
        series?: ChartSeries | Array<ChartSeries>;
        /**
         * [descr:Properties.chart.seriesTemplate]
         */
        seriesTemplate?: {
          /**
           * [descr:Properties.chart.seriesTemplate.customizeSeries]
           */
          customizeSeries?: (seriesName: any) => ChartSeries;
          /**
           * [descr:Properties.chart.seriesTemplate.nameField]
           */
          nameField?: string;
        };
        /**
         * [descr:Properties.chart.topIndent]
         */
        topIndent?: number;
        /**
         * [descr:Properties.chart.valueAxis]
         */
        valueAxis?: {
          /**
           * [descr:Properties.chart.valueAxis.inverted]
           */
          inverted?: boolean;
          /**
           * [descr:Properties.chart.valueAxis.logarithmBase]
           */
          logarithmBase?: number;
          /**
           * [descr:Properties.chart.valueAxis.max]
           */
          max?: number;
          /**
           * [descr:Properties.chart.valueAxis.min]
           */
          min?: number;
          /**
           * [descr:Properties.chart.valueAxis.type]
           */
          type?: 'continuous' | 'logarithmic';
          /**
           * [descr:Properties.chart.valueAxis.valueType]
           */
          valueType?: 'datetime' | 'numeric' | 'string';
        };
      };
      /**
       * [descr:Properties.containerBackgroundColor]
       */
      containerBackgroundColor?: string;
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<any>;
      /**
       * [descr:Properties.dataSourceField]
       */
      dataSourceField?: string;
      /**
       * [descr:Properties.indent]
       */
      indent?: {
        /**
         * [descr:Properties.indent.left]
         */
        left?: number;
        /**
         * [descr:Properties.indent.right]
         */
        right?: number;
      };
      /**
       * [descr:Properties.onValueChanged]
       */
      onValueChanged?: (e: ValueChangedEvent) => void;
      /**
       * [descr:Properties.scale]
       */
      scale?: {
        /**
         * [descr:Properties.scale.aggregateByCategory]
         */
        aggregateByCategory?: boolean;
        /**
         * [descr:Properties.scale.aggregationGroupWidth]
         */
        aggregationGroupWidth?: number;
        /**
         * [descr:Properties.scale.aggregationInterval]
         */
        aggregationInterval?: VizTimeInterval;
        /**
         * [descr:Properties.scale.allowDecimals]
         */
        allowDecimals?: boolean;
        /**
         * [descr:Properties.scale.breakStyle]
         */
        breakStyle?: {
          /**
           * [descr:Properties.scale.breakStyle.color]
           */
          color?: string;
          /**
           * [descr:Properties.scale.breakStyle.line]
           */
          line?: 'straight' | 'waved';
          /**
           * [descr:Properties.scale.breakStyle.width]
           */
          width?: number;
        };
        /**
         * [descr:Properties.scale.breaks]
         */
        breaks?: Array<ScaleBreak>;
        /**
         * [descr:Properties.scale.categories]
         */
        categories?: Array<number | string | Date>;
        /**
         * [descr:Properties.scale.endOnTick]
         */
        endOnTick?: boolean;
        /**
         * [descr:Properties.scale.endValue]
         */
        endValue?: number | Date | string;
        /**
         * [descr:Properties.scale.holidays]
         */
        holidays?: Array<Date | string> | Array<number>;
        /**
         * [descr:Properties.scale.label]
         */
        label?: {
          /**
           * [descr:Properties.scale.label.customizeText]
           */
          customizeText?: (scaleValue: {
            value?: Date | number | string;
            valueText?: string;
          }) => string;
          /**
           * [descr:Properties.scale.label.font]
           */
          font?: Font;
          /**
           * [descr:Properties.scale.label.format]
           */
          format?: DevExpress.ui.Format;
          /**
           * [descr:Properties.scale.label.overlappingBehavior]
           */
          overlappingBehavior?: 'hide' | 'none';
          /**
           * [descr:Properties.scale.label.topIndent]
           */
          topIndent?: number;
          /**
           * [descr:Properties.scale.label.visible]
           */
          visible?: boolean;
        };
        /**
         * [descr:Properties.scale.linearThreshold]
         */
        linearThreshold?: number;
        /**
         * [descr:Properties.scale.logarithmBase]
         */
        logarithmBase?: number;
        /**
         * [descr:Properties.scale.marker]
         */
        marker?: {
          /**
           * [descr:Properties.scale.marker.label]
           */
          label?: {
            /**
             * [descr:Properties.scale.marker.label.customizeText]
             */
            customizeText?: (markerValue: {
              value?: Date | number;
              valueText?: string;
            }) => string;
            /**
             * [descr:Properties.scale.marker.label.format]
             */
            format?: DevExpress.ui.Format;
          };
          /**
           * [descr:Properties.scale.marker.separatorHeight]
           */
          separatorHeight?: number;
          /**
           * [descr:Properties.scale.marker.textLeftIndent]
           */
          textLeftIndent?: number;
          /**
           * [descr:Properties.scale.marker.textTopIndent]
           */
          textTopIndent?: number;
          /**
           * [descr:Properties.scale.marker.topIndent]
           */
          topIndent?: number;
          /**
           * [descr:Properties.scale.marker.visible]
           */
          visible?: boolean;
        };
        /**
         * [descr:Properties.scale.maxRange]
         */
        maxRange?: VizTimeInterval;
        /**
         * [descr:Properties.scale.minRange]
         */
        minRange?: VizTimeInterval;
        /**
         * [descr:Properties.scale.minorTick]
         */
        minorTick?: {
          /**
           * [descr:Properties.scale.minorTick.color]
           */
          color?: string;
          /**
           * [descr:Properties.scale.minorTick.opacity]
           */
          opacity?: number;
          /**
           * [descr:Properties.scale.minorTick.visible]
           */
          visible?: boolean;
          /**
           * [descr:Properties.scale.minorTick.width]
           */
          width?: number;
        };
        /**
         * [descr:Properties.scale.minorTickCount]
         */
        minorTickCount?: number;
        /**
         * [descr:Properties.scale.minorTickInterval]
         */
        minorTickInterval?: VizTimeInterval;
        /**
         * [descr:Properties.scale.placeholderHeight]
         */
        placeholderHeight?: number;
        /**
         * [descr:Properties.scale.showCustomBoundaryTicks]
         */
        showCustomBoundaryTicks?: boolean;
        /**
         * [descr:Properties.scale.singleWorkdays]
         */
        singleWorkdays?: Array<Date | string> | Array<number>;
        /**
         * [descr:Properties.scale.startValue]
         */
        startValue?: number | Date | string;
        /**
         * [descr:Properties.scale.tick]
         */
        tick?: {
          /**
           * [descr:Properties.scale.tick.color]
           */
          color?: string;
          /**
           * [descr:Properties.scale.tick.opacity]
           */
          opacity?: number;
          /**
           * [descr:Properties.scale.tick.width]
           */
          width?: number;
        };
        /**
         * [descr:Properties.scale.tickInterval]
         */
        tickInterval?: VizTimeInterval;
        /**
         * [descr:Properties.scale.type]
         */
        type?: 'continuous' | 'discrete' | 'logarithmic' | 'semidiscrete';
        /**
         * [descr:Properties.scale.valueType]
         */
        valueType?: 'datetime' | 'numeric' | 'string';
        /**
         * [descr:Properties.scale.workWeek]
         */
        workWeek?: Array<number>;
        /**
         * [descr:Properties.scale.workdaysOnly]
         */
        workdaysOnly?: boolean;
      };
      /**
       * [descr:Properties.selectedRangeColor]
       */
      selectedRangeColor?: string;
      /**
       * [descr:Properties.selectedRangeUpdateMode]
       */
      selectedRangeUpdateMode?: 'auto' | 'keep' | 'reset' | 'shift';
      /**
       * [descr:Properties.shutter]
       */
      shutter?: {
        /**
         * [descr:Properties.shutter.color]
         */
        color?: string;
        /**
         * [descr:Properties.shutter.opacity]
         */
        opacity?: number;
      };
      /**
       * [descr:Properties.sliderHandle]
       */
      sliderHandle?: {
        /**
         * [descr:Properties.sliderHandle.color]
         */
        color?: string;
        /**
         * [descr:Properties.sliderHandle.opacity]
         */
        opacity?: number;
        /**
         * [descr:Properties.sliderHandle.width]
         */
        width?: number;
      };
      /**
       * [descr:Properties.sliderMarker]
       */
      sliderMarker?: {
        /**
         * [descr:Properties.sliderMarker.color]
         */
        color?: string;
        /**
         * [descr:Properties.sliderMarker.customizeText]
         */
        customizeText?: (scaleValue: {
          value?: Date | number | string;
          valueText?: string;
        }) => string;
        /**
         * [descr:Properties.sliderMarker.font]
         */
        font?: Font;
        /**
         * [descr:Properties.sliderMarker.format]
         */
        format?: DevExpress.ui.Format;
        /**
         * [descr:Properties.sliderMarker.invalidRangeColor]
         */
        invalidRangeColor?: string;
        /**
         * [descr:Properties.sliderMarker.paddingLeftRight]
         */
        paddingLeftRight?: number;
        /**
         * [descr:Properties.sliderMarker.paddingTopBottom]
         */
        paddingTopBottom?: number;
        /**
         * [descr:Properties.sliderMarker.placeholderHeight]
         */
        placeholderHeight?: number;
        /**
         * [descr:Properties.sliderMarker.visible]
         */
        visible?: boolean;
      };
      /**
       * [descr:Properties.tooltip]
       */
      tooltip?: BaseWidgetTooltip;
      /**
       * [descr:Properties.value]
       */
      value?: Array<number | string | Date> | VizRange;
    }
    export type ValueChangedEvent =
      DevExpress.events.NativeEventInfo<dxRangeSelector> & {
        readonly value: Array<number | string | Date>;
        readonly previousValue: Array<number | string | Date>;
      };
  }
  /**
   * [descr:dxSankey]
   */
  export class dxSankey extends BaseWidget<dxSankeyOptions> {
    /**
     * [descr:dxSankey.getAllLinks()]
     */
    getAllLinks(): Array<dxSankeyLink>;
    /**
     * [descr:dxSankey.getAllNodes()]
     */
    getAllNodes(): Array<dxSankeyNode>;
    getDataSource(): DevExpress.data.DataSource;
    /**
     * [descr:dxSankey.hideTooltip()]
     */
    hideTooltip(): void;
  }
  module dxSankey {
    export type DisposingEvent = DevExpress.events.EventInfo<dxSankey>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxSankey>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxSankey>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxSankey> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxSankey>;
    export type IncidentOccurredEvent = DevExpress.events.EventInfo<dxSankey> &
      DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxSankey>;
    export type LinkClickEvent = DevExpress.events.NativeEventInfo<dxSankey> & {
      readonly target: dxSankeyLink;
    };
    export type LinkHoverEvent = DevExpress.events.EventInfo<dxSankey> & {
      readonly target: dxSankeyLink;
    };
    export type NodeClickEvent = DevExpress.events.NativeEventInfo<dxSankey> & {
      readonly target: dxSankeyNode;
    };
    export type NodeHoverEvent = DevExpress.events.EventInfo<dxSankey> & {
      readonly target: dxSankeyNode;
    };
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxSankey> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends BaseWidgetOptions<dxSankey> {
      /**
       * [descr:Properties.adaptiveLayout]
       */
      adaptiveLayout?: {
        /**
         * [descr:Properties.adaptiveLayout.height]
         */
        height?: number;
        /**
         * [descr:Properties.adaptiveLayout.keepLabels]
         */
        keepLabels?: boolean;
        /**
         * [descr:Properties.adaptiveLayout.width]
         */
        width?: number;
      };
      /**
       * [descr:Properties.alignment]
       */
      alignment?:
        | 'bottom'
        | 'center'
        | 'top'
        | Array<'bottom' | 'center' | 'top'>;
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<any>;
      /**
       * [descr:Properties.hoverEnabled]
       */
      hoverEnabled?: boolean;
      /**
       * [descr:Properties.label]
       */
      label?: {
        /**
         * [descr:Properties.label.border]
         */
        border?: {
          /**
           * [descr:Properties.label.border.color]
           */
          color?: string;
          /**
           * [descr:Properties.label.border.visible]
           */
          visible?: boolean;
          /**
           * [descr:Properties.label.border.width]
           */
          width?: number;
        };
        /**
         * [descr:Properties.label.customizeText]
         */
        customizeText?: (itemInfo: dxSankeyNode) => string;
        /**
         * [descr:Properties.label.font]
         */
        font?: Font;
        /**
         * [descr:Properties.label.horizontalOffset]
         */
        horizontalOffset?: number;
        /**
         * [descr:Properties.label.overlappingBehavior]
         */
        overlappingBehavior?: 'ellipsis' | 'hide' | 'none';
        /**
         * [descr:Properties.label.shadow]
         */
        shadow?: {
          /**
           * [descr:Properties.label.shadow.blur]
           */
          blur?: number;
          /**
           * [descr:Properties.label.shadow.color]
           */
          color?: string;
          /**
           * [descr:Properties.label.shadow.offsetX]
           */
          offsetX?: number;
          /**
           * [descr:Properties.label.shadow.offsetY]
           */
          offsetY?: number;
          /**
           * [descr:Properties.label.shadow.opacity]
           */
          opacity?: number;
        };
        /**
         * [descr:Properties.label.useNodeColors]
         */
        useNodeColors?: boolean;
        /**
         * [descr:Properties.label.verticalOffset]
         */
        verticalOffset?: number;
        /**
         * [descr:Properties.label.visible]
         */
        visible?: boolean;
      };
      /**
       * [descr:Properties.link]
       */
      link?: {
        /**
         * [descr:Properties.link.border]
         */
        border?: {
          /**
           * [descr:Properties.link.border.color]
           */
          color?: string;
          /**
           * [descr:Properties.link.border.visible]
           */
          visible?: boolean;
          /**
           * [descr:Properties.link.border.width]
           */
          width?: number;
        };
        /**
         * [descr:Properties.link.color]
         */
        color?: string;
        /**
         * [descr:Properties.link.colorMode]
         */
        colorMode?: 'none' | 'source' | 'target' | 'gradient';
        /**
         * [descr:Properties.link.hoverStyle]
         */
        hoverStyle?: {
          /**
           * [descr:Properties.link.hoverStyle.border]
           */
          border?: {
            /**
             * [descr:Properties.link.hoverStyle.border.color]
             */
            color?: string;
            /**
             * [descr:Properties.link.hoverStyle.border.visible]
             */
            visible?: boolean;
            /**
             * [descr:Properties.link.hoverStyle.border.width]
             */
            width?: number;
          };
          /**
           * [descr:Properties.link.hoverStyle.color]
           */
          color?: string;
          /**
           * [descr:Properties.link.hoverStyle.hatching]
           */
          hatching?: {
            /**
             * [descr:Properties.link.hoverStyle.hatching.direction]
             */
            direction?: HatchingDirectionType;
            /**
             * [descr:Properties.link.hoverStyle.hatching.opacity]
             */
            opacity?: number;
            /**
             * [descr:Properties.link.hoverStyle.hatching.step]
             */
            step?: number;
            /**
             * [descr:Properties.link.hoverStyle.hatching.width]
             */
            width?: number;
          };
          /**
           * [descr:Properties.link.hoverStyle.opacity]
           */
          opacity?: number;
        };
        /**
         * [descr:Properties.link.opacity]
         */
        opacity?: number;
      };
      /**
       * [descr:Properties.node]
       */
      node?: {
        /**
         * [descr:Properties.node.border]
         */
        border?: {
          /**
           * [descr:Properties.node.border.color]
           */
          color?: string;
          /**
           * [descr:Properties.node.border.visible]
           */
          visible?: boolean;
          /**
           * [descr:Properties.node.border.width]
           */
          width?: number;
        };
        /**
         * [descr:Properties.node.color]
         */
        color?: string;
        /**
         * [descr:Properties.node.hoverStyle]
         */
        hoverStyle?: {
          /**
           * [descr:Properties.node.hoverStyle.border]
           */
          border?: {
            /**
             * [descr:Properties.node.hoverStyle.border.color]
             */
            color?: string;
            /**
             * [descr:Properties.node.hoverStyle.border.visible]
             */
            visible?: boolean;
            /**
             * [descr:Properties.node.hoverStyle.border.width]
             */
            width?: number;
          };
          /**
           * [descr:Properties.node.hoverStyle.color]
           */
          color?: string;
          /**
           * [descr:Properties.node.hoverStyle.hatching]
           */
          hatching?: {
            /**
             * [descr:Properties.node.hoverStyle.hatching.direction]
             */
            direction?: HatchingDirectionType;
            /**
             * [descr:Properties.node.hoverStyle.hatching.opacity]
             */
            opacity?: number;
            /**
             * [descr:Properties.node.hoverStyle.hatching.step]
             */
            step?: number;
            /**
             * [descr:Properties.node.hoverStyle.hatching.width]
             */
            width?: number;
          };
          /**
           * [descr:Properties.node.hoverStyle.opacity]
           */
          opacity?: number;
        };
        /**
         * [descr:Properties.node.opacity]
         */
        opacity?: number;
        /**
         * [descr:Properties.node.padding]
         */
        padding?: number;
        /**
         * [descr:Properties.node.width]
         */
        width?: number;
      };
      /**
       * [descr:Properties.onLinkClick]
       */
      onLinkClick?: ((e: LinkClickEvent) => void) | string;
      /**
       * [descr:Properties.onLinkHoverChanged]
       */
      onLinkHoverChanged?: (e: LinkHoverEvent) => void;
      /**
       * [descr:Properties.onNodeClick]
       */
      onNodeClick?: ((e: NodeClickEvent) => void) | string;
      /**
       * [descr:Properties.onNodeHoverChanged]
       */
      onNodeHoverChanged?: (e: NodeHoverEvent) => void;
      /**
       * [descr:Properties.palette]
       */
      palette?: Array<string> | PaletteType;
      /**
       * [descr:Properties.paletteExtensionMode]
       */
      paletteExtensionMode?: PaletteExtensionModeType;
      /**
       * [descr:Properties.sortData]
       */
      sortData?: any;
      /**
       * [descr:Properties.sourceField]
       */
      sourceField?: string;
      /**
       * [descr:Properties.targetField]
       */
      targetField?: string;
      /**
       * [descr:Properties.tooltip]
       */
      tooltip?: dxSankeyTooltip;
      /**
       * [descr:Properties.weightField]
       */
      weightField?: string;
    }
  }
  /**
   * [descr:dxSankeyConnectionInfoObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxSankeyConnectionInfoObject {
    /**
     * [descr:dxSankeyConnectionInfoObject.source]
     */
    source?: string;
    /**
     * [descr:dxSankeyConnectionInfoObject.target]
     */
    target?: string;
    /**
     * [descr:dxSankeyConnectionInfoObject.weight]
     */
    weight?: number;
  }
  /**
   * [descr:dxSankeyLink]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxSankeyLink {
    /**
     * [descr:dxSankeyLink.connection]
     */
    connection?: dxSankeyConnectionInfoObject;
    /**
     * [descr:dxSankeyLink.hideTooltip()]
     */
    hideTooltip(): void;
    /**
     * [descr:dxSankeyLink.hover(state)]
     */
    hover(state: boolean): void;
    /**
     * [descr:dxSankeyLink.isHovered()]
     */
    isHovered(): boolean;
    /**
     * [descr:dxSankeyLink.showTooltip()]
     */
    showTooltip(): void;
  }
  /**
   * [descr:dxSankeyNode]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxSankeyNode {
    /**
     * [descr:dxSankeyNode.hideTooltip()]
     */
    hideTooltip(): void;
    /**
     * [descr:dxSankeyNode.hover(state)]
     */
    hover(state: boolean): void;
    /**
     * [descr:dxSankeyNode.isHovered()]
     */
    isHovered(): boolean;
    /**
     * [descr:dxSankeyNode.label]
     */
    label?: string;
    /**
     * [descr:dxSankeyNode.linksIn]
     */
    linksIn?: Array<any>;
    /**
     * [descr:dxSankeyNode.linksOut]
     */
    linksOut?: Array<any>;
    /**
     * [descr:dxSankeyNode.showTooltip()]
     */
    showTooltip(): void;
    /**
     * [descr:dxSankeyNode.title]
     * @deprecated [depNote:dxSankeyNode.title]
     */
    title?: string;
  }
  /**
   * @deprecated use DevExpress.viz.dxSankey.Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type dxSankeyOptions = DevExpress.viz.dxSankey.Properties;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxSankeyTooltip extends BaseWidgetTooltip {
    /**
     * [descr:dxSankeyOptions.tooltip.customizeLinkTooltip]
     */
    customizeLinkTooltip?: (info: {
      source?: string;
      target?: string;
      weight?: number;
    }) => any;
    /**
     * [descr:dxSankeyOptions.tooltip.customizeNodeTooltip]
     */
    customizeNodeTooltip?: (info: {
      title?: string;
      label?: string;
      weightIn?: number;
      weightOut?: number;
    }) => any;
    /**
     * [descr:dxSankeyOptions.tooltip.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:dxSankeyOptions.tooltip.linkTooltipTemplate]
     */
    linkTooltipTemplate?:
      | DevExpress.core.template
      | ((
          info: { source?: string; target?: string; weight?: number },
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:dxSankeyOptions.tooltip.nodeTooltipTemplate]
     */
    nodeTooltipTemplate?:
      | DevExpress.core.template
      | ((
          info: { label?: string; weightIn?: number; weightOut?: number },
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
  }
  /**
   * [descr:dxSparkline]
   */
  export class dxSparkline extends BaseSparkline<dxSparklineOptions> {
    getDataSource(): DevExpress.data.DataSource;
  }
  module dxSparkline {
    export type DisposingEvent = DevExpress.events.EventInfo<dxSparkline>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxSparkline>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxSparkline>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxSparkline> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxSparkline>;
    export type IncidentOccurredEvent =
      DevExpress.events.EventInfo<dxSparkline> &
        DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxSparkline>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxSparkline> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends BaseSparklineOptions<dxSparkline> {
      /**
       * [descr:Properties.argumentField]
       */
      argumentField?: string;
      /**
       * [descr:Properties.barNegativeColor]
       */
      barNegativeColor?: string;
      /**
       * [descr:Properties.barPositiveColor]
       */
      barPositiveColor?: string;
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<any>;
      /**
       * [descr:Properties.firstLastColor]
       */
      firstLastColor?: string;
      /**
       * [descr:Properties.ignoreEmptyPoints]
       */
      ignoreEmptyPoints?: boolean;
      /**
       * [descr:Properties.lineColor]
       */
      lineColor?: string;
      /**
       * [descr:Properties.lineWidth]
       */
      lineWidth?: number;
      /**
       * [descr:Properties.lossColor]
       */
      lossColor?: string;
      /**
       * [descr:Properties.maxColor]
       */
      maxColor?: string;
      /**
       * [descr:Properties.maxValue]
       */
      maxValue?: number;
      /**
       * [descr:Properties.minColor]
       */
      minColor?: string;
      /**
       * [descr:Properties.minValue]
       */
      minValue?: number;
      /**
       * [descr:Properties.pointColor]
       */
      pointColor?: string;
      /**
       * [descr:Properties.pointSize]
       */
      pointSize?: number;
      /**
       * [descr:Properties.pointSymbol]
       */
      pointSymbol?: 'circle' | 'cross' | 'polygon' | 'square' | 'triangle';
      /**
       * [descr:Properties.showFirstLast]
       */
      showFirstLast?: boolean;
      /**
       * [descr:Properties.showMinMax]
       */
      showMinMax?: boolean;
      /**
       * [descr:Properties.type]
       */
      type?:
        | 'area'
        | 'bar'
        | 'line'
        | 'spline'
        | 'splinearea'
        | 'steparea'
        | 'stepline'
        | 'winloss';
      /**
       * [descr:Properties.valueField]
       */
      valueField?: string;
      /**
       * [descr:Properties.winColor]
       */
      winColor?: string;
      /**
       * [descr:Properties.winlossThreshold]
       */
      winlossThreshold?: number;
    }
    export type TooltipHiddenEvent = DevExpress.events.EventInfo<dxSparkline>;
    export type TooltipShownEvent = DevExpress.events.EventInfo<dxSparkline>;
  }
  /**
   * @deprecated use DevExpress.viz.dxSparkline.Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type dxSparklineOptions = DevExpress.viz.dxSparkline.Properties;
  /**
   * [descr:dxTreeMap]
   */
  export class dxTreeMap extends BaseWidget<dxTreeMapOptions> {
    /**
     * [descr:dxTreeMap.clearSelection()]
     */
    clearSelection(): void;
    /**
     * [descr:dxTreeMap.drillUp()]
     */
    drillUp(): void;
    /**
     * [descr:dxTreeMap.getCurrentNode()]
     */
    getCurrentNode(): dxTreeMapNode;
    getDataSource(): DevExpress.data.DataSource;
    /**
     * [descr:dxTreeMap.getRootNode()]
     */
    getRootNode(): dxTreeMapNode;
    /**
     * [descr:dxTreeMap.hideTooltip()]
     */
    hideTooltip(): void;
    /**
     * [descr:dxTreeMap.resetDrillDown()]
     */
    resetDrillDown(): void;
  }
  module dxTreeMap {
    export type ClickEvent = DevExpress.events.NativeEventInfo<dxTreeMap> & {
      readonly node: dxTreeMapNode;
    };
    export type DisposingEvent = DevExpress.events.EventInfo<dxTreeMap>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxTreeMap>;
    export type DrillEvent = DevExpress.events.EventInfo<dxTreeMap> & {
      readonly node: dxTreeMapNode;
    };
    export type ExportedEvent = DevExpress.events.EventInfo<dxTreeMap>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxTreeMap> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxTreeMap>;
    export type HoverChangedEvent = DevExpress.events.EventInfo<dxTreeMap> &
      InteractionInfo;
    export type IncidentOccurredEvent = DevExpress.events.EventInfo<dxTreeMap> &
      DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxTreeMap>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface InteractionInfo {
      readonly node: dxTreeMapNode;
    }
    export type NodesInitializedEvent =
      DevExpress.events.EventInfo<dxTreeMap> & {
        readonly root: dxTreeMapNode;
      };
    export type NodesRenderingEvent = DevExpress.events.EventInfo<dxTreeMap> & {
      readonly node: dxTreeMapNode;
    };
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxTreeMap> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends BaseWidgetOptions<dxTreeMap> {
      /**
       * [descr:Properties.childrenField]
       */
      childrenField?: string;
      /**
       * [descr:Properties.colorField]
       */
      colorField?: string;
      /**
       * [descr:Properties.colorizer]
       */
      colorizer?: {
        /**
         * [descr:Properties.colorizer.colorCodeField]
         */
        colorCodeField?: string;
        /**
         * [descr:Properties.colorizer.colorizeGroups]
         */
        colorizeGroups?: boolean;
        /**
         * [descr:Properties.colorizer.palette]
         */
        palette?: Array<string> | PaletteType;
        /**
         * [descr:Properties.colorizer.paletteExtensionMode]
         */
        paletteExtensionMode?: PaletteExtensionModeType;
        /**
         * [descr:Properties.colorizer.range]
         */
        range?: Array<number>;
        /**
         * [descr:Properties.colorizer.type]
         */
        type?: 'discrete' | 'gradient' | 'none' | 'range';
      };
      /**
       * [descr:Properties.dataSource]
       */
      dataSource?: DevExpress.data.DataSource.DataSourceLike<any>;
      /**
       * [descr:Properties.group]
       */
      group?: {
        /**
         * [descr:Properties.group.border]
         */
        border?: {
          /**
           * [descr:Properties.group.border.color]
           */
          color?: string;
          /**
           * [descr:Properties.group.border.width]
           */
          width?: number;
        };
        /**
         * [descr:Properties.group.color]
         */
        color?: string;
        /**
         * [descr:Properties.group.padding]
         */
        padding?: number;
        /**
         * [descr:Properties.group.headerHeight]
         */
        headerHeight?: number;
        /**
         * [descr:Properties.group.hoverEnabled]
         */
        hoverEnabled?: boolean;
        /**
         * [descr:Properties.group.hoverStyle]
         */
        hoverStyle?: {
          /**
           * [descr:Properties.group.hoverStyle.border]
           */
          border?: {
            /**
             * [descr:Properties.group.hoverStyle.border.color]
             */
            color?: string;
            /**
             * [descr:Properties.group.hoverStyle.border.width]
             */
            width?: number;
          };
          /**
           * [descr:Properties.group.hoverStyle.color]
           */
          color?: string;
        };
        /**
         * [descr:Properties.group.label]
         */
        label?: {
          /**
           * [descr:Properties.group.label.font]
           */
          font?: Font;
          /**
           * [descr:Properties.group.label.textOverflow]
           */
          textOverflow?: DevExpress.viz.BaseWidget.VizTextOverflowType;
          /**
           * [descr:Properties.group.label.visible]
           */
          visible?: boolean;
        };
        /**
         * [descr:Properties.group.selectionStyle]
         */
        selectionStyle?: {
          /**
           * [descr:Properties.group.selectionStyle.border]
           */
          border?: {
            /**
             * [descr:Properties.group.selectionStyle.border.color]
             */
            color?: string;
            /**
             * [descr:Properties.group.selectionStyle.border.width]
             */
            width?: number;
          };
          /**
           * [descr:Properties.group.selectionStyle.color]
           */
          color?: string;
        };
      };
      /**
       * [descr:Properties.hoverEnabled]
       */
      hoverEnabled?: boolean;
      /**
       * [descr:Properties.idField]
       */
      idField?: string;
      /**
       * [descr:Properties.interactWithGroup]
       */
      interactWithGroup?: boolean;
      /**
       * [descr:Properties.labelField]
       */
      labelField?: string;
      /**
       * [descr:Properties.layoutAlgorithm]
       */
      layoutAlgorithm?:
        | 'sliceanddice'
        | 'squarified'
        | 'strip'
        | ((e: {
            rect?: Array<number>;
            sum?: number;
            items?: Array<any>;
          }) => any);
      /**
       * [descr:Properties.layoutDirection]
       */
      layoutDirection?:
        | 'leftBottomRightTop'
        | 'leftTopRightBottom'
        | 'rightBottomLeftTop'
        | 'rightTopLeftBottom';
      /**
       * [descr:Properties.margin]
       */
      margin?: BaseWidgetMargin;
      /**
       * [descr:Properties.maxDepth]
       */
      maxDepth?: number;
      /**
       * [descr:Properties.onClick]
       */
      onClick?: ((e: ClickEvent) => void) | string;
      /**
       * [descr:Properties.onDrill]
       */
      onDrill?: (e: DrillEvent) => void;
      /**
       * [descr:Properties.onHoverChanged]
       */
      onHoverChanged?: (e: HoverChangedEvent) => void;
      /**
       * [descr:Properties.onNodesInitialized]
       */
      onNodesInitialized?: (e: NodesInitializedEvent) => void;
      /**
       * [descr:Properties.onNodesRendering]
       */
      onNodesRendering?: (e: NodesRenderingEvent) => void;
      /**
       * [descr:Properties.onSelectionChanged]
       */
      onSelectionChanged?: (e: SelectionChangedEvent) => void;
      /**
       * [descr:Properties.parentField]
       */
      parentField?: string;
      /**
       * [descr:Properties.selectionMode]
       */
      selectionMode?: 'multiple' | 'none' | 'single';
      /**
       * [descr:Properties.tile]
       */
      tile?: {
        /**
         * [descr:Properties.tile.border]
         */
        border?: {
          /**
           * [descr:Properties.tile.border.color]
           */
          color?: string;
          /**
           * [descr:Properties.tile.border.width]
           */
          width?: number;
        };
        /**
         * [descr:Properties.tile.color]
         */
        color?: string;
        /**
         * [descr:Properties.tile.hoverStyle]
         */
        hoverStyle?: {
          /**
           * [descr:Properties.tile.hoverStyle.border]
           */
          border?: {
            /**
             * [descr:Properties.tile.hoverStyle.border.color]
             */
            color?: string;
            /**
             * [descr:Properties.tile.hoverStyle.border.width]
             */
            width?: number;
          };
          /**
           * [descr:Properties.tile.hoverStyle.color]
           */
          color?: string;
        };
        /**
         * [descr:Properties.tile.label]
         */
        label?: {
          /**
           * [descr:Properties.tile.label.font]
           */
          font?: Font;
          /**
           * [descr:Properties.tile.label.textOverflow]
           */
          textOverflow?: DevExpress.viz.BaseWidget.VizTextOverflowType;
          /**
           * [descr:Properties.tile.label.visible]
           */
          visible?: boolean;
          /**
           * [descr:Properties.tile.label.wordWrap]
           */
          wordWrap?: DevExpress.viz.BaseWidget.WordWrapType;
        };
        /**
         * [descr:Properties.tile.selectionStyle]
         */
        selectionStyle?: {
          /**
           * [descr:Properties.tile.selectionStyle.border]
           */
          border?: {
            /**
             * [descr:Properties.tile.selectionStyle.border.color]
             */
            color?: string;
            /**
             * [descr:Properties.tile.selectionStyle.border.width]
             */
            width?: number;
          };
          /**
           * [descr:Properties.tile.selectionStyle.color]
           */
          color?: string;
        };
      };
      /**
       * [descr:Properties.tooltip]
       */
      tooltip?: dxTreeMapTooltip;
      /**
       * [descr:Properties.valueField]
       */
      valueField?: string;
    }
    export type SelectionChangedEvent = DevExpress.events.EventInfo<dxTreeMap> &
      InteractionInfo;
  }
  /**
   * [descr:dxTreeMapNode]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxTreeMapNode {
    /**
     * [descr:dxTreeMapNode.customize(options)]
     */
    customize(options: any): void;
    /**
     * [descr:dxTreeMapNode.data]
     */
    data?: any;
    /**
     * [descr:dxTreeMapNode.drillDown()]
     */
    drillDown(): void;
    /**
     * [descr:dxTreeMapNode.getAllChildren()]
     */
    getAllChildren(): Array<dxTreeMapNode>;
    /**
     * [descr:dxTreeMapNode.getAllNodes()]
     */
    getAllNodes(): Array<dxTreeMapNode>;
    /**
     * [descr:dxTreeMapNode.getChild(index)]
     */
    getChild(index: number): dxTreeMapNode;
    /**
     * [descr:dxTreeMapNode.getChildrenCount()]
     */
    getChildrenCount(): number;
    /**
     * [descr:dxTreeMapNode.getParent()]
     */
    getParent(): dxTreeMapNode;
    /**
     * [descr:dxTreeMapNode.index]
     */
    index?: number;
    /**
     * [descr:dxTreeMapNode.isActive()]
     */
    isActive(): boolean;
    /**
     * [descr:dxTreeMapNode.isHovered()]
     */
    isHovered(): boolean;
    /**
     * [descr:dxTreeMapNode.isLeaf()]
     */
    isLeaf(): boolean;
    /**
     * [descr:dxTreeMapNode.isSelected()]
     */
    isSelected(): boolean;
    /**
     * [descr:dxTreeMapNode.label()]
     */
    label(): string;
    /**
     * [descr:dxTreeMapNode.label(label)]
     */
    label(label: string): void;
    /**
     * [descr:dxTreeMapNode.level]
     */
    level?: number;
    /**
     * [descr:dxTreeMapNode.resetCustomization()]
     */
    resetCustomization(): void;
    /**
     * [descr:dxTreeMapNode.select(state)]
     */
    select(state: boolean): void;
    /**
     * [descr:dxTreeMapNode.showTooltip()]
     */
    showTooltip(): void;
    /**
     * [descr:dxTreeMapNode.value()]
     */
    value(): number;
  }
  /**
   * @deprecated use DevExpress.viz.dxTreeMap.Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type dxTreeMapOptions = DevExpress.viz.dxTreeMap.Properties;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxTreeMapTooltip extends BaseWidgetTooltip {
    /**
     * [descr:dxTreeMapOptions.tooltip.contentTemplate]
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          info: { value?: number; valueText?: string; node?: dxTreeMapNode },
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:dxTreeMapOptions.tooltip.customizeTooltip]
     */
    customizeTooltip?: (info: {
      value?: number;
      valueText?: string;
      node?: dxTreeMapNode;
    }) => any;
  }
  /**
   * [descr:dxVectorMap]
   */
  export class dxVectorMap extends BaseWidget<dxVectorMapOptions> {
    /**
     * [descr:dxVectorMap.center()]
     */
    center(): Array<number>;
    /**
     * [descr:dxVectorMap.center(centerCoordinates)]
     */
    center(centerCoordinates: Array<number>): void;
    /**
     * [descr:dxVectorMap.clearSelection()]
     */
    clearSelection(): void;
    /**
     * [descr:dxVectorMap.convertCoordinates(x, y)]
     * @deprecated [depNote:dxVectorMap.convertCoordinates(x, y)]
     */
    convertCoordinates(x: number, y: number): Array<number>;
    /**
     * [descr:dxVectorMap.convertToGeo(x, y)]
     */
    convertToGeo(x: number, y: number): Array<number>;
    /**
     * [descr:dxVectorMap.convertToXY(longitude, latitude)]
     */
    convertToXY(longitude: number, latitude: number): Array<number>;
    /**
     * [descr:dxVectorMap.getLayerByIndex(index)]
     */
    getLayerByIndex(index: number): MapLayer;
    /**
     * [descr:dxVectorMap.getLayerByName(name)]
     */
    getLayerByName(name: string): MapLayer;
    /**
     * [descr:dxVectorMap.getLayers()]
     */
    getLayers(): Array<MapLayer>;
    /**
     * [descr:dxVectorMap.viewport()]
     */
    viewport(): Array<number>;
    /**
     * [descr:dxVectorMap.viewport(viewportCoordinates)]
     */
    viewport(viewportCoordinates: Array<number>): void;
    /**
     * [descr:dxVectorMap.zoomFactor()]
     */
    zoomFactor(): number;
    /**
     * [descr:dxVectorMap.zoomFactor(zoomFactor)]
     */
    zoomFactor(zoomFactor: number): void;
  }
  module dxVectorMap {
    export type CenterChangedEvent =
      DevExpress.events.EventInfo<dxVectorMap> & {
        readonly center: Array<number>;
      };
    export type ClickEvent = DevExpress.events.NativeEventInfo<dxVectorMap> & {
      readonly target: MapLayerElement;
    };
    export type DisposingEvent = DevExpress.events.EventInfo<dxVectorMap>;
    export type DrawnEvent = DevExpress.events.EventInfo<dxVectorMap>;
    export type ExportedEvent = DevExpress.events.EventInfo<dxVectorMap>;
    export type ExportingEvent = DevExpress.events.EventInfo<dxVectorMap> &
      DevExpress.viz.BaseWidget.ExportInfo;
    export type FileSavingEvent =
      DevExpress.viz.BaseWidget.FileSavingEventInfo<dxVectorMap>;
    export type IncidentOccurredEvent =
      DevExpress.events.EventInfo<dxVectorMap> &
        DevExpress.viz.BaseWidget.IncidentInfo;
    export type InitializedEvent =
      DevExpress.events.InitializedEventInfo<dxVectorMap>;
    export type OptionChangedEvent = DevExpress.events.EventInfo<dxVectorMap> &
      DevExpress.events.ChangedOptionInfo;
    /**
     * [descr:Properties]
     */
    export interface Properties extends BaseWidgetOptions<dxVectorMap> {
      /**
       * [descr:Properties.background]
       */
      background?: {
        /**
         * [descr:Properties.background.borderColor]
         */
        borderColor?: string;
        /**
         * [descr:Properties.background.color]
         */
        color?: string;
      };
      /**
       * [descr:Properties.bounds]
       */
      bounds?: Array<number>;
      /**
       * [descr:Properties.center]
       */
      center?: Array<number>;
      /**
       * [descr:Properties.controlBar]
       */
      controlBar?: {
        /**
         * [descr:Properties.controlBar.borderColor]
         */
        borderColor?: string;
        /**
         * [descr:Properties.controlBar.color]
         */
        color?: string;
        /**
         * [descr:Properties.controlBar.enabled]
         */
        enabled?: boolean;
        /**
         * [descr:Properties.controlBar.horizontalAlignment]
         */
        horizontalAlignment?: 'center' | 'left' | 'right';
        /**
         * [descr:Properties.controlBar.margin]
         */
        margin?: number;
        /**
         * [descr:Properties.controlBar.opacity]
         */
        opacity?: number;
        /**
         * [descr:Properties.controlBar.verticalAlignment]
         */
        verticalAlignment?: 'bottom' | 'top';
      };
      /**
       * [descr:Properties.layers]
       */
      layers?:
        | Array<{
            /**
             * [descr:Properties.layers.borderColor]
             */
            borderColor?: string;
            /**
             * [descr:Properties.layers.borderWidth]
             */
            borderWidth?: number;
            /**
             * [descr:Properties.layers.color]
             */
            color?: string;
            /**
             * [descr:Properties.layers.colorGroupingField]
             */
            colorGroupingField?: string;
            /**
             * [descr:Properties.layers.colorGroups]
             */
            colorGroups?: Array<number>;
            /**
             * [descr:Properties.layers.customize]
             */
            customize?: (elements: Array<MapLayerElement>) => void;
            /**
             * [descr:Properties.layers.dataField]
             */
            dataField?: string;
            /**
             * [descr:Properties.layers.dataSource]
             */
            dataSource?:
              | object
              | DevExpress.data.DataSource.DataSourceLike<any>;
            /**
             * [descr:Properties.layers.elementType]
             */
            elementType?: 'bubble' | 'dot' | 'image' | 'pie';
            /**
             * [descr:Properties.layers.hoverEnabled]
             */
            hoverEnabled?: boolean;
            /**
             * [descr:Properties.layers.hoveredBorderColor]
             */
            hoveredBorderColor?: string;
            /**
             * [descr:Properties.layers.hoveredBorderWidth]
             */
            hoveredBorderWidth?: number;
            /**
             * [descr:Properties.layers.hoveredColor]
             */
            hoveredColor?: string;
            /**
             * [descr:Properties.layers.label]
             */
            label?: {
              /**
               * [descr:Properties.layers.label.dataField]
               */
              dataField?: string;
              /**
               * [descr:Properties.layers.label.enabled]
               */
              enabled?: boolean;
              /**
               * [descr:Properties.layers.label.font]
               */
              font?: Font;
            };
            /**
             * [descr:Properties.layers.maxSize]
             */
            maxSize?: number;
            /**
             * [descr:Properties.layers.minSize]
             */
            minSize?: number;
            /**
             * [descr:Properties.layers.name]
             */
            name?: string;
            /**
             * [descr:Properties.layers.opacity]
             */
            opacity?: number;
            /**
             * [descr:Properties.layers.palette]
             */
            palette?: Array<string> | PaletteType;
            /**
             * [descr:Properties.layers.paletteSize]
             */
            paletteSize?: number;
            /**
             * [descr:Properties.layers.paletteIndex]
             */
            paletteIndex?: number;
            /**
             * [descr:Properties.layers.selectedBorderColor]
             */
            selectedBorderColor?: string;
            /**
             * [descr:Properties.layers.selectedBorderWidth]
             */
            selectedBorderWidth?: number;
            /**
             * [descr:Properties.layers.selectedColor]
             */
            selectedColor?: string;
            /**
             * [descr:Properties.layers.selectionMode]
             */
            selectionMode?: 'multiple' | 'none' | 'single';
            /**
             * [descr:Properties.layers.size]
             */
            size?: number;
            /**
             * [descr:Properties.layers.sizeGroupingField]
             */
            sizeGroupingField?: string;
            /**
             * [descr:Properties.layers.sizeGroups]
             */
            sizeGroups?: Array<number>;
            /**
             * [descr:Properties.layers.type]
             */
            type?: 'area' | 'line' | 'marker';
          }>
        | {
            borderColor?: string;
            borderWidth?: number;
            color?: string;
            colorGroupingField?: string;
            colorGroups?: Array<number>;
            customize?: (elements: Array<MapLayerElement>) => any;
            dataField?: string;
            dataSource?:
              | object
              | DevExpress.data.DataSource.DataSourceLike<any>;
            elementType?: 'bubble' | 'dot' | 'image' | 'pie';
            hoverEnabled?: boolean;
            hoveredBorderColor?: string;
            hoveredBorderWidth?: number;
            hoveredColor?: string;
            label?: { dataField?: string; enabled?: boolean; font?: Font };
            maxSize?: number;
            minSize?: number;
            name?: string;
            opacity?: number;
            palette?: Array<string> | PaletteType;
            paletteSize?: number;
            selectedBorderColor?: string;
            selectedBorderWidth?: number;
            selectedColor?: string;
            selectionMode?: 'multiple' | 'none' | 'single';
            size?: number;
            sizeGroupingField?: string;
            sizeGroups?: Array<number>;
            type?: 'area' | 'line' | 'marker';
          };
      /**
       * [descr:Properties.legends]
       */
      legends?: Array<dxVectorMapLegends>;
      /**
       * [descr:Properties.margin]
       */
      margin?: BaseWidgetMargin;
      /**
       * [descr:Properties.maxZoomFactor]
       */
      maxZoomFactor?: number;
      /**
       * [descr:Properties.onCenterChanged]
       */
      onCenterChanged?: (e: CenterChangedEvent) => void;
      /**
       * [descr:Properties.onClick]
       */
      onClick?: ((e: ClickEvent) => void) | string;
      /**
       * [descr:Properties.onSelectionChanged]
       */
      onSelectionChanged?: (e: SelectionChangedEvent) => void;
      /**
       * [descr:Properties.onTooltipHidden]
       */
      onTooltipHidden?: (e: TooltipHiddenEvent) => void;
      /**
       * [descr:Properties.onTooltipShown]
       */
      onTooltipShown?: (e: TooltipShownEvent) => void;
      /**
       * [descr:Properties.onZoomFactorChanged]
       */
      onZoomFactorChanged?: (e: ZoomFactorChangedEvent) => void;
      /**
       * [descr:Properties.panningEnabled]
       */
      panningEnabled?: boolean;
      /**
       * [descr:Properties.projection]
       */
      projection?:
        | 'equirectangular'
        | 'lambert'
        | 'mercator'
        | 'miller'
        | VectorMapProjectionConfig
        | string
        | any;
      /**
       * [descr:Properties.tooltip]
       */
      tooltip?: dxVectorMapTooltip;
      /**
       * [descr:Properties.touchEnabled]
       */
      touchEnabled?: boolean;
      /**
       * [descr:Properties.wheelEnabled]
       */
      wheelEnabled?: boolean;
      /**
       * [descr:Properties.zoomFactor]
       */
      zoomFactor?: number;
      /**
       * [descr:Properties.zoomingEnabled]
       */
      zoomingEnabled?: boolean;
      /**
       * [descr:Properties.commonAnnotationSettings]
       */
      commonAnnotationSettings?: dxVectorMapCommonAnnotationConfig;
      /**
       * [descr:Properties.annotations]
       */
      annotations?: Array<dxVectorMapAnnotationConfig | any>;
      /**
       * [descr:Properties.customizeAnnotation]
       */
      customizeAnnotation?: (
        annotation: dxVectorMapAnnotationConfig | any
      ) => dxVectorMapAnnotationConfig;
    }
    export type SelectionChangedEvent =
      DevExpress.events.EventInfo<dxVectorMap> & {
        readonly target: MapLayerElement;
      };
    export type TooltipHiddenEvent = DevExpress.events.EventInfo<dxVectorMap> &
      TooltipInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
     */
    export interface TooltipInfo {
      target?: MapLayerElement | dxVectorMapAnnotationConfig;
    }
    export type TooltipShownEvent = DevExpress.events.EventInfo<dxVectorMap> &
      TooltipInfo;
    export type ZoomFactorChangedEvent =
      DevExpress.events.EventInfo<dxVectorMap> & {
        readonly zoomFactor: number;
      };
  }
  /**
   * [descr:dxVectorMapAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxVectorMapAnnotationConfig
    extends dxVectorMapCommonAnnotationConfig {
    /**
     * [descr:dxVectorMapAnnotationConfig.name]
     */
    name?: string;
  }
  /**
   * [descr:dxVectorMapCommonAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxVectorMapCommonAnnotationConfig
    extends BaseWidgetAnnotationConfig {
    /**
     * [descr:dxVectorMapCommonAnnotationConfig.coordinates]
     */
    coordinates?: Array<number>;
    /**
     * [descr:dxVectorMapCommonAnnotationConfig.customizeTooltip]
     */
    customizeTooltip?: (annotation: dxVectorMapAnnotationConfig | any) => any;
    /**
     * [descr:dxVectorMapCommonAnnotationConfig.template]
     */
    template?:
      | DevExpress.core.template
      | ((
          annotation: dxVectorMapAnnotationConfig | any,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
    /**
     * [descr:dxVectorMapCommonAnnotationConfig.tooltipTemplate]
     */
    tooltipTemplate?:
      | DevExpress.core.template
      | ((
          annotation: dxVectorMapAnnotationConfig | any,
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxVectorMapLegends extends BaseLegend {
    /**
     * [descr:dxVectorMapOptions.legends.customizeHint]
     */
    customizeHint?: (itemInfo: {
      start?: number;
      end?: number;
      index?: number;
      color?: string;
      size?: number;
    }) => string;
    /**
     * [descr:dxVectorMapOptions.legends.customizeItems]
     */
    customizeItems?: (
      items: Array<DevExpress.viz.dxVectorMap.LegendItem>
    ) => Array<DevExpress.viz.dxVectorMap.LegendItem>;
    /**
     * [descr:dxVectorMapOptions.legends.customizeText]
     */
    customizeText?: (itemInfo: {
      start?: number;
      end?: number;
      index?: number;
      color?: string;
      size?: number;
    }) => string;
    /**
     * [descr:dxVectorMapOptions.legends.font]
     */
    font?: Font;
    /**
     * [descr:dxVectorMapOptions.legends.markerColor]
     */
    markerColor?: string;
    /**
     * [descr:dxVectorMapOptions.legends.markerShape]
     */
    markerShape?: 'circle' | 'square';
    /**
     * [descr:dxVectorMapOptions.legends.markerSize]
     */
    markerSize?: number;
    /**
     * [descr:dxVectorMapOptions.legends.markerTemplate]
     */
    markerTemplate?:
      | DevExpress.core.template
      | ((
          legendItem: DevExpress.viz.dxVectorMap.LegendItem,
          element: SVGGElement
        ) => string | DevExpress.core.UserDefinedElement<SVGElement>);
    /**
     * [descr:dxVectorMapOptions.legends.source]
     */
    source?: {
      /**
       * [descr:dxVectorMapOptions.legends.source.grouping]
       */
      grouping?: string;
      /**
       * [descr:dxVectorMapOptions.legends.source.layer]
       */
      layer?: string;
    };
  }
  /**
   * @deprecated use DevExpress.viz.dxVectorMap.Properties instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type dxVectorMapOptions = DevExpress.viz.dxVectorMap.Properties;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface dxVectorMapTooltip extends BaseWidgetTooltip {
    /**
     * [descr:dxVectorMapOptions.tooltip.contentTemplate]
     */
    contentTemplate?:
      | DevExpress.core.template
      | ((
          info: MapLayerElement,
          element: DevExpress.core.DxElement
        ) => string | DevExpress.core.UserDefinedElement);
    /**
     * [descr:dxVectorMapOptions.tooltip.customizeTooltip]
     */
    customizeTooltip?: (info: MapLayerElement) => any;
    /**
     * [descr:dxVectorMapOptions.tooltip.format]
     */
    format?: DevExpress.ui.Format;
  }
  /**
   * [descr:viz.exportFromMarkup(markup, options)]
   */
  export function exportFromMarkup(
    markup: string,
    options: {
      fileName?: string;
      format?: string;
      backgroundColor?: string;
      proxyUrl?: string;
      width?: number;
      height?: number;
      onExporting?: Function;
      onExported?: Function;
      onFileSaving?: Function;
      margin?: number;
      svgToCanvas?: Function;
    }
  ): void;
  /**
   * [descr:viz.exportWidgets(widgetInstances)]
   */
  export function exportWidgets(
    widgetInstances: Array<Array<DOMComponent>>
  ): void;
  /**
   * [descr:viz.exportWidgets(widgetInstances, options)]
   */
  export function exportWidgets(
    widgetInstances: Array<Array<DOMComponent>>,
    options: {
      fileName?: string;
      format?: 'GIF' | 'JPEG' | 'PDF' | 'PNG' | 'SVG';
      backgroundColor?: string;
      margin?: number;
      gridLayout?: boolean;
      verticalAlignment?: 'bottom' | 'center' | 'top';
      horizontalAlignment?: 'center' | 'left' | 'right';
      proxyUrl?: string;
      onExporting?: Function;
      onExported?: Function;
      onFileSaving?: Function;
      svgToCanvas?: Function;
    }
  ): void;
  /**
   * [descr:Font]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface Font {
    /**
     * [descr:Font.color]
     */
    color?: string;
    /**
     * [descr:Font.family]
     */
    family?: string;
    /**
     * [descr:Font.opacity]
     */
    opacity?: number;
    /**
     * [descr:Font.size]
     */
    size?: string | number;
    /**
     * [descr:Font.weight]
     */
    weight?: number;
  }
  /**
   * [descr:GaugeIndicator]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface GaugeIndicator extends CommonIndicator {
    /**
     * [descr:GaugeIndicator.type]
     */
    type?: DevExpress.viz.BaseGauge.GaugeIndicatorType;
  }
  /**
   * [descr:viz.generateColors(palette, count, options)]
   */
  export function generateColors(
    palette: PaletteType | Array<string>,
    count: number,
    options: {
      paletteExtensionMode?: PaletteExtensionModeType;
      baseColorSet?: 'simpleSet' | 'indicatingSet' | 'gradientSet';
    }
  ): Array<string>;
  /**
   * [descr:viz.getMarkup(widgetInstances)]
   */
  export function getMarkup(widgetInstances: Array<DOMComponent>): string;
  /**
   * [descr:viz.getPalette(paletteName)]
   */
  export function getPalette(paletteName: string): any;
  /**
   * [descr:viz.getTheme(theme)]
   */
  export function getTheme(theme: string): any;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type HatchingDirectionType = 'left' | 'none' | 'right';
  /**
   * [descr:MapLayer]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface MapLayer {
    /**
     * [descr:MapLayer.clearSelection()]
     */
    clearSelection(): void;
    /**
     * [descr:MapLayer.elementType]
     */
    elementType?: string;
    /**
     * [descr:MapLayer.getDataSource()]
     */
    getDataSource(): DevExpress.data.DataSource;
    /**
     * [descr:MapLayer.getElements()]
     */
    getElements(): Array<MapLayerElement>;
    /**
     * [descr:MapLayer.index]
     */
    index?: number;
    /**
     * [descr:MapLayer.name]
     */
    name?: string;
    /**
     * [descr:MapLayer.type]
     */
    type?: string;
  }
  /**
   * [descr:MapLayerElement]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface MapLayerElement {
    /**
     * [descr:MapLayerElement.applySettings(settings)]
     */
    applySettings(settings: any): void;
    /**
     * [descr:MapLayerElement.attribute(name)]
     */
    attribute(name: string): any;
    /**
     * [descr:MapLayerElement.attribute(name, value)]
     */
    attribute(name: string, value: any): void;
    /**
     * [descr:MapLayerElement.coordinates()]
     */
    coordinates(): any;
    /**
     * [descr:MapLayerElement.layer]
     */
    layer?: any;
    /**
     * [descr:MapLayerElement.selected()]
     */
    selected(): boolean;
    /**
     * [descr:MapLayerElement.selected(state)]
     */
    selected(state: boolean): void;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type PaletteExtensionModeType = 'alternate' | 'blend' | 'extrapolate';
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type PaletteType =
    | 'Bright'
    | 'Harmony Light'
    | 'Ocean'
    | 'Pastel'
    | 'Soft'
    | 'Soft Pastel'
    | 'Vintage'
    | 'Violet'
    | 'Carmine'
    | 'Dark Moon'
    | 'Dark Violet'
    | 'Green Mist'
    | 'Soft Blue'
    | 'Material'
    | 'Office';
  /**
   * [descr:PieChartSeries]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface PieChartSeries
    extends dxPieChartSeriesTypesCommonPieChartSeries {
    /**
     * [descr:PieChartSeries.name]
     */
    name?: string;
    /**
     * [descr:PieChartSeries.tag]
     */
    tag?: any;
  }
  /**
   * [descr:pieChartSeriesObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface pieChartSeriesObject extends baseSeriesObject {
    /**
     * [descr:pieChartSeriesObject.hover()]
     */
    hover(): void;
    /**
     * [descr:pieChartSeriesObject.clearHover()]
     */
    clearHover(): void;
    /**
     * [descr:pieChartSeriesObject.isHovered()]
     */
    isHovered(): boolean;
  }
  /**
   * [descr:piePointObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface piePointObject extends basePointObject {
    /**
     * [descr:piePointObject.hide()]
     */
    hide(): void;
    /**
     * [descr:piePointObject.isVisible()]
     */
    isVisible(): boolean;
    /**
     * [descr:piePointObject.percent]
     */
    percent?: string | number | Date;
    /**
     * [descr:piePointObject.show()]
     */
    show(): void;
  }
  /**
   * [descr:PolarChartSeries]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface PolarChartSeries
    extends dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * [descr:PolarChartSeries.name]
     */
    name?: string;
    /**
     * [descr:PolarChartSeries.tag]
     */
    tag?: any;
    /**
     * [descr:PolarChartSeries.type]
     */
    type?: DevExpress.viz.dxPolarChart.PolarChartSeriesType;
  }
  /**
   * [descr:polarChartSeriesObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface polarChartSeriesObject extends baseSeriesObject {}
  /**
   * [descr:polarPointObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface polarPointObject extends basePointObject {}
  /**
   * [descr:viz.refreshPaths()]
   */
  export function refreshPaths(): void;
  /**
   * [descr:viz.refreshTheme()]
   */
  export function refreshTheme(): void;
  /**
   * [descr:viz.registerPalette(paletteName, palette)]
   */
  export function registerPalette(paletteName: string, palette: any): void;
  /**
   * [descr:viz.registerTheme(customTheme, baseTheme)]
   */
  export function registerTheme(customTheme: any, baseTheme: string): void;
  /**
   * [descr:ScaleBreak]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface ScaleBreak {
    /**
     * [descr:ScaleBreak.endValue]
     */
    endValue?: number | Date | string;
    /**
     * [descr:ScaleBreak.startValue]
     */
    startValue?: number | Date | string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type TimeIntervalType =
    | 'day'
    | 'hour'
    | 'millisecond'
    | 'minute'
    | 'month'
    | 'quarter'
    | 'second'
    | 'week'
    | 'year';
  /**
   * [descr:VectorMapProjectionConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface VectorMapProjectionConfig {
    /**
     * [descr:VectorMapProjectionConfig.aspectRatio]
     */
    aspectRatio?: number;
    /**
     * [descr:VectorMapProjectionConfig.from]
     */
    from?: (coordinates: Array<number>) => Array<number>;
    /**
     * [descr:VectorMapProjectionConfig.to]
     */
    to?: (coordinates: Array<number>) => Array<number>;
  }
  /**
   * [descr:VizRange]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export interface VizRange {
    /**
     * [descr:VizRange.endValue]
     */
    endValue?: number | Date | string;
    /**
     * [descr:VizRange.length]
     */
    length?: VizTimeInterval;
    /**
     * [descr:VizRange.startValue]
     */
    startValue?: number | Date | string;
  }
  /**
   * [descr:VizTimeInterval]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export type VizTimeInterval =
    | number
    | {
        /**
         * [descr:VizTimeInterval.days]
         */
        days?: number;
        /**
         * [descr:VizTimeInterval.hours]
         */
        hours?: number;
        /**
         * [descr:VizTimeInterval.milliseconds]
         */
        milliseconds?: number;
        /**
         * [descr:VizTimeInterval.minutes]
         */
        minutes?: number;
        /**
         * [descr:VizTimeInterval.months]
         */
        months?: number;
        /**
         * [descr:VizTimeInterval.quarters]
         */
        quarters?: number;
        /**
         * [descr:VizTimeInterval.seconds]
         */
        seconds?: number;
        /**
         * [descr:VizTimeInterval.weeks]
         */
        weeks?: number;
        /**
         * [descr:VizTimeInterval.years]
         */
        years?: number;
      }
    | TimeIntervalType;
}
declare module DevExpress.viz.dxBarGauge {
  /**
   * [descr:LegendItem]
   */
  export interface LegendItem extends BaseLegendItem {
    /**
     * [descr:LegendItem.item]
     */
    item?: BarGaugeBarInfo;
  }
}
declare module DevExpress.viz.dxFunnel {
  /**
   * [descr:Item]
   */
  export interface Item {
    /**
     * [descr:Item.argument]
     */
    argument?: string | Date | number;
    /**
     * [descr:Item.data]
     */
    data?: any;
    /**
     * [descr:Item.getColor()]
     */
    getColor(): string;
    /**
     * [descr:Item.hover(state)]
     */
    hover(state: boolean): void;
    /**
     * [descr:Item.isHovered()]
     */
    isHovered(): boolean;
    /**
     * [descr:Item.isSelected()]
     */
    isSelected(): boolean;
    /**
     * [descr:Item.percent]
     */
    percent?: number;
    /**
     * [descr:Item.select(state)]
     */
    select(state: boolean): void;
    /**
     * [descr:Item.showTooltip()]
     */
    showTooltip(): void;
    /**
     * [descr:Item.value]
     */
    value?: number;
  }
  /**
   * [descr:LegendItem]
   */
  export interface LegendItem extends BaseLegendItem {
    /**
     * [descr:LegendItem.item]
     */
    item?: Item;
  }
}
declare module DevExpress.viz.dxPieChart {
  /**
   * [descr:LegendItem]
   */
  export interface LegendItem extends BaseLegendItem {
    /**
     * [descr:LegendItem.argument]
     */
    argument?: string | Date | number;
    /**
     * [descr:LegendItem.argumentIndex]
     */
    argumentIndex?: number;
    /**
     * [descr:LegendItem.points]
     */
    points?: Array<piePointObject>;
    /**
     * [descr:LegendItem.text]
     */
    text?: any;
  }
}
declare module DevExpress.viz.dxVectorMap {
  /**
   * [descr:LegendItem]
   */
  export interface LegendItem extends BaseLegendItem {
    /**
     * [descr:LegendItem.color]
     */
    color?: string;
    /**
     * [descr:LegendItem.end]
     */
    end?: number;
    /**
     * [descr:LegendItem.size]
     */
    size?: number;
    /**
     * [descr:LegendItem.start]
     */
    start?: number;
  }
}
declare module DevExpress.viz.map {
  /**
   * [descr:viz.map.projection(data)]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please describe your scenario in the following GitHub Issue, and we will suggest a public alternative: {@link https://github.com/DevExpress/DevExtreme/issues/17885|Internal Types}.
   */
  export const projection: {
    /**
     * [descr:viz.map.projection.add(name, projection)]
     */
    add(name: string, projection: VectorMapProjectionConfig | any): void;

    /**
     * [descr:viz.map.projection.get(name)]
     */
    get(
      name: 'equirectangular' | 'lambert' | 'mercator' | 'miller' | string
    ): any;

    (data: VectorMapProjectionConfig): any;
  };
}
